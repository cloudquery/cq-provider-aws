-- Autogenerated by migration tool on 2022-04-04 17:12:37
-- CHANGEME: Verify or edit this file before proceeding

-- Resource: codepipeline.pipelines
CREATE TABLE IF NOT EXISTS "aws_codepipeline_pipelines" (
    "cq_id" uuid NOT NULL,
    "cq_meta" jsonb,
    "account_id" text,
    "region" text,
    "tags" jsonb,
    "created" timestamp without time zone,
    "arn" text,
    "updated" timestamp without time zone,
    "name" text,
    "role_arn" text,
    "artifact_store_location" text,
    "artifact_store_type" text,
    "artifact_store_encryption_key_id" text,
    "artifact_store_encryption_key_type" text,
    "artifact_stores" jsonb,
    "version" integer,
    CONSTRAINT aws_codepipeline_pipelines_pk PRIMARY KEY(arn),
    UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_codepipeline_pipeline_stages" (
    "cq_id" uuid NOT NULL,
    "cq_meta" jsonb,
    "pipeline_cq_id" uuid,
    "stage_order" integer,
    "name" text,
    "blockers" jsonb,
    CONSTRAINT aws_codepipeline_pipeline_stages_pk PRIMARY KEY(cq_id),
    UNIQUE(cq_id),
    FOREIGN KEY (pipeline_cq_id) REFERENCES aws_codepipeline_pipelines(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_codepipeline_pipeline_stage_actions" (
    "cq_id" uuid NOT NULL,
    "cq_meta" jsonb,
    "pipeline_stage_cq_id" uuid,
    "category" text,
    "owner" text,
    "provider" text,
    "version" text,
    "name" text,
    "configuration" jsonb,
    "input_artifacts" text[],
    "namespace" text,
    "output_artifacts" text[],
    "region" text,
    "role_arn" text,
    "run_order" integer,
    CONSTRAINT aws_codepipeline_pipeline_stage_actions_pk PRIMARY KEY(cq_id),
    UNIQUE(cq_id),
    FOREIGN KEY (pipeline_stage_cq_id) REFERENCES aws_codepipeline_pipeline_stages(cq_id) ON DELETE CASCADE
);

-- Resource: sns.subscriptions
ALTER TABLE IF EXISTS aws_sns_subscriptions DROP CONSTRAINT aws_sns_subscriptions_pk;
ALTER TABLE IF EXISTS aws_sns_subscriptions ADD CONSTRAINT aws_sns_subscriptions_pk PRIMARY KEY (endpoint,owner,protocol,arn,topic_arn);

-- Resource: mq.brokers
ALTER TABLE IF EXISTS aws_mq_brokers
    DROP CONSTRAINT aws_mq_brokers_pk;
ALTER TABLE IF EXISTS "aws_mq_brokers"
    RENAME COLUMN broker_id TO id;
ALTER TABLE IF EXISTS aws_mq_brokers
    ADD CONSTRAINT aws_mq_brokers_pk PRIMARY KEY (account_id, id);
ALTER TABLE IF EXISTS aws_mq_broker_configurations
    DROP CONSTRAINT aws_mq_broker_configurations_pk;
ALTER TABLE IF EXISTS aws_mq_broker_configurations
    ADD CONSTRAINT aws_mq_broker_configurations_pk PRIMARY KEY (cq_id);
CREATE TABLE IF NOT EXISTS "aws_mq_broker_configuration_revisions"
(
    "cq_id"                      uuid NOT NULL,
    "cq_meta"                    jsonb,
    "broker_configuration_cq_id" uuid,
    "configuration_id"           text,
    "created"                    timestamp without time zone,
    "data"                       jsonb,
    "description"                text,
    CONSTRAINT aws_mq_broker_configuration_revisions_pk PRIMARY KEY (cq_id),
    UNIQUE (cq_id),
    FOREIGN KEY (broker_configuration_cq_id) REFERENCES aws_mq_broker_configurations (cq_id) ON DELETE CASCADE
);
ALTER TABLE IF EXISTS aws_mq_broker_users
    DROP CONSTRAINT aws_mq_broker_users_pk;
ALTER TABLE IF EXISTS aws_mq_broker_users
    ADD CONSTRAINT aws_mq_broker_users_pk PRIMARY KEY (cq_id);



-- Resource: qldb.ledgers
CREATE TABLE IF NOT EXISTS "aws_qldb_ledgers" (
      "cq_id" uuid NOT NULL,
      "cq_meta" jsonb,
      "account_id" text,
      "region" text,
      "tags" jsonb,
      "arn" text,
      "creation_date_time" timestamp without time zone,
      "deletion_protection" boolean,
      "encryption_status" text,
      "kms_key_arn" text,
      "inaccessible_kms_key_date_time" timestamp without time zone,
      "name" text,
      "permissions_mode" text,
      "state" text,
      CONSTRAINT aws_qldb_ledgers_pk PRIMARY KEY(arn),
      UNIQUE(cq_id)
    );
CREATE TABLE IF NOT EXISTS "aws_qldb_ledger_journal_kinesis_streams" (
     "cq_id" uuid NOT NULL,
     "cq_meta" jsonb,
     "ledger_cq_id" uuid,
     "stream_arn" text,
     "aggregation_enabled" boolean,
     "ledger_name" text,
     "role_arn" text,
     "status" text,
     "stream_id" text,
     "stream_name" text,
     "arn" text,
     "creation_time" timestamp without time zone,
     "error_cause" text,
     "exclusive_end_time" timestamp without time zone,
     "inclusive_start_time" timestamp without time zone,
     CONSTRAINT aws_qldb_ledger_journal_kinesis_streams_pk PRIMARY KEY(cq_id),
     UNIQUE(cq_fetch_date,cq_id)
    );
CREATE INDEX ON aws_qldb_ledger_journal_kinesis_streams (ledger_cq_id);
CREATE TABLE IF NOT EXISTS "aws_qldb_ledger_journal_s3_exports" (
    "cq_id" uuid NOT NULL,
    "cq_meta" jsonb,
    "ledger_cq_id" uuid,
    "exclusive_end_time" timestamp without time zone,
    "export_creation_time" timestamp without time zone,
    "export_id" text,
    "inclusive_start_time" timestamp without time zone,
    "ledger_name" text,
    "role_arn" text,
    "bucket" text,
    "object_encryption_type" text,
    "kms_key_arn" text,
    "prefix" text,
    "status" text,
    "output_format" text,
    CONSTRAINT aws_qldb_ledger_journal_s3_exports_pk PRIMARY KEY(cq_id),
    UNIQUE(cq_id)
    );
CREATE INDEX ON aws_qldb_ledger_journal_s3_exports (ledger_cq_id);

