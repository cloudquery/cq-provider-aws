-- Autogenerated by migration tool on 2022-01-17 21:26:23

-- Resource: accessanalyzer.analyzers
CREATE TABLE IF NOT EXISTS "aws_access_analyzer_analyzers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"created_at" timestamp without time zone,
	"name" text,
	"status" text,
	"type" text,
	"last_resource_analyzed" text,
	"last_resource_analyzed_at" timestamp without time zone,
	"status_reason_code" text,
	"tags" jsonb,
	CONSTRAINT aws_access_analyzer_analyzers_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_access_analyzer_analyzer_findings" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"analyzer_cq_id" uuid,
	"analyzed_at" timestamp without time zone,
	"condition" jsonb,
	"created_at" timestamp without time zone,
	"id" text,
	"resource_owner_account" text,
	"resource_type" text,
	"status" text,
	"updated_at" timestamp without time zone,
	"action" text[],
	"error" text,
	"is_public" boolean,
	"principal" jsonb,
	"resource" text,
	CONSTRAINT aws_access_analyzer_analyzer_findings_pk PRIMARY KEY(analyzer_cq_id,id),
	UNIQUE(cq_id),
	FOREIGN KEY (analyzer_cq_id) REFERENCES aws_access_analyzer_analyzers(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_access_analyzer_analyzer_finding_sources" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"analyzer_finding_cq_id" uuid,
	"type" text,
	"detail_access_point_arn" text,
	CONSTRAINT aws_access_analyzer_analyzer_finding_sources_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (analyzer_finding_cq_id) REFERENCES aws_access_analyzer_analyzer_findings(cq_id) ON DELETE CASCADE
);

-- Resource: acm.certificates
CREATE TABLE IF NOT EXISTS "aws_acm_certificates" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"certificate_authority_arn" text,
	"created_at" timestamp without time zone,
	"domain_name" text,
	"domain_validation_options" jsonb,
	"extended_key_usages" jsonb,
	"failure_reason" text,
	"imported_at" timestamp without time zone,
	"in_use_by" text[],
	"issued_at" timestamp without time zone,
	"issuer" text,
	"key_algorithm" text,
	"key_usages" text[],
	"not_after" timestamp without time zone,
	"not_before" timestamp without time zone,
	"certificate_transparency_logging_preference" text,
	"renewal_eligibility" text,
	"renewal_summary_domain_validation_options" jsonb,
	"renewal_summary_status" text,
	"renewal_summary_updated_at" timestamp without time zone,
	"renewal_summary_failure_reason" text,
	"revocation_reason" text,
	"revoked_at" timestamp without time zone,
	"serial" text,
	"signature_algorithm" text,
	"status" text,
	"subject" text,
	"subject_alternative_names" text[],
	"type" text,
	"tags" jsonb,
	CONSTRAINT aws_acm_certificates_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: apigateway.api_keys
CREATE TABLE IF NOT EXISTS "aws_apigateway_api_keys" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"created_date" timestamp without time zone,
	"customer_id" text,
	"description" text,
	"enabled" boolean,
	"id" text,
	"last_updated_date" timestamp without time zone,
	"name" text,
	"stage_keys" text[],
	"tags" jsonb,
	"value" text,
	CONSTRAINT aws_apigateway_api_keys_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);

-- Resource: apigateway.client_certificates
CREATE TABLE IF NOT EXISTS "aws_apigateway_client_certificates" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"id" text,
	"created_date" timestamp without time zone,
	"description" text,
	"expiration_date" timestamp without time zone,
	"pem_encoded_certificate" text,
	"tags" jsonb,
	CONSTRAINT aws_apigateway_client_certificates_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);

-- Resource: apigateway.domain_names
CREATE TABLE IF NOT EXISTS "aws_apigateway_domain_names" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"certificate_arn" text,
	"certificate_name" text,
	"certificate_upload_date" timestamp without time zone,
	"distribution_domain_name" text,
	"distribution_hosted_zone_id" text,
	"domain_name" text,
	"domain_name_status" text,
	"domain_name_status_message" text,
	"endpoint_configuration_types" text[],
	"endpoint_configuration_vpc_endpoint_ids" text[],
	"mutual_tls_authentication_truststore_uri" text,
	"mutual_tls_authentication_truststore_version" text,
	"mutual_tls_authentication_truststore_warnings" text[],
	"regional_certificate_arn" text,
	"regional_certificate_name" text,
	"regional_domain_name" text,
	"regional_hosted_zone_id" text,
	"security_policy" text,
	"tags" jsonb,
	CONSTRAINT aws_apigateway_domain_names_pk PRIMARY KEY(account_id,region,domain_name),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_apigateway_domain_name_base_path_mappings" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"domain_name_cq_id" uuid,
	"arn" text,
	"domain_name" text,
	"base_path" text,
	"rest_api_id" text,
	"stage" text,
	CONSTRAINT aws_apigateway_domain_name_base_path_mappings_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (domain_name_cq_id) REFERENCES aws_apigateway_domain_names(cq_id) ON DELETE CASCADE
);

-- Resource: apigateway.rest_apis
CREATE TABLE IF NOT EXISTS "aws_apigateway_rest_apis" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"api_key_source" text,
	"binary_media_types" text[],
	"created_date" timestamp without time zone,
	"description" text,
	"disable_execute_api_endpoint" boolean,
	"endpoint_configuration_types" text[],
	"endpoint_configuration_vpc_endpoint_ids" text[],
	"id" text,
	"minimum_compression_size" integer,
	"name" text,
	"policy" text,
	"tags" jsonb,
	"version" text,
	"warnings" text[],
	CONSTRAINT aws_apigateway_rest_apis_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_apigateway_rest_api_authorizers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"rest_api_cq_id" uuid,
	"rest_api_id" text,
	"arn" text,
	"auth_type" text,
	"authorizer_credentials" text,
	"authorizer_result_ttl_in_seconds" integer,
	"authorizer_uri" text,
	"id" text,
	"identity_source" text,
	"identity_validation_expression" text,
	"name" text,
	"provider_arns" text[],
	"type" text,
	CONSTRAINT aws_apigateway_rest_api_authorizers_pk PRIMARY KEY(rest_api_cq_id,id),
	UNIQUE(cq_id),
	FOREIGN KEY (rest_api_cq_id) REFERENCES aws_apigateway_rest_apis(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_apigateway_rest_api_deployments" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"rest_api_cq_id" uuid,
	"rest_api_id" text,
	"arn" text,
	"api_summary" jsonb,
	"created_date" timestamp without time zone,
	"description" text,
	"id" text,
	CONSTRAINT aws_apigateway_rest_api_deployments_pk PRIMARY KEY(rest_api_cq_id,id),
	UNIQUE(cq_id),
	FOREIGN KEY (rest_api_cq_id) REFERENCES aws_apigateway_rest_apis(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_apigateway_rest_api_documentation_parts" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"rest_api_cq_id" uuid,
	"rest_api_id" text,
	"arn" text,
	"id" text,
	"location_type" text,
	"location_method" text,
	"location_name" text,
	"location_path" text,
	"location_status_code" text,
	"properties" text,
	CONSTRAINT aws_apigateway_rest_api_documentation_parts_pk PRIMARY KEY(rest_api_cq_id,id),
	UNIQUE(cq_id),
	FOREIGN KEY (rest_api_cq_id) REFERENCES aws_apigateway_rest_apis(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_apigateway_rest_api_documentation_versions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"rest_api_cq_id" uuid,
	"rest_api_id" text,
	"arn" text,
	"created_date" timestamp without time zone,
	"description" text,
	"version" text,
	CONSTRAINT aws_apigateway_rest_api_documentation_versions_pk PRIMARY KEY(rest_api_cq_id,version),
	UNIQUE(cq_id),
	FOREIGN KEY (rest_api_cq_id) REFERENCES aws_apigateway_rest_apis(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_apigateway_rest_api_gateway_responses" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"rest_api_cq_id" uuid,
	"rest_api_id" text,
	"arn" text,
	"default_response" boolean,
	"response_parameters" jsonb,
	"response_templates" jsonb,
	"response_type" text,
	"status_code" text,
	CONSTRAINT aws_apigateway_rest_api_gateway_responses_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (rest_api_cq_id) REFERENCES aws_apigateway_rest_apis(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_apigateway_rest_api_models" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"rest_api_cq_id" uuid,
	"rest_api_id" text,
	"arn" text,
	"model_template" text,
	"content_type" text,
	"description" text,
	"id" text,
	"name" text,
	"schema" text,
	CONSTRAINT aws_apigateway_rest_api_models_pk PRIMARY KEY(rest_api_cq_id,id),
	UNIQUE(cq_id),
	FOREIGN KEY (rest_api_cq_id) REFERENCES aws_apigateway_rest_apis(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_apigateway_rest_api_request_validators" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"rest_api_cq_id" uuid,
	"rest_api_id" text,
	"arn" text,
	"id" text,
	"name" text,
	"validate_request_body" boolean,
	"validate_request_parameters" boolean,
	CONSTRAINT aws_apigateway_rest_api_request_validators_pk PRIMARY KEY(rest_api_cq_id,id),
	UNIQUE(cq_id),
	FOREIGN KEY (rest_api_cq_id) REFERENCES aws_apigateway_rest_apis(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_apigateway_rest_api_resources" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"rest_api_cq_id" uuid,
	"rest_api_id" text,
	"arn" text,
	"id" text,
	"parent_id" text,
	"path" text,
	"path_part" text,
	"resource_methods" jsonb,
	CONSTRAINT aws_apigateway_rest_api_resources_pk PRIMARY KEY(rest_api_cq_id,id),
	UNIQUE(cq_id),
	FOREIGN KEY (rest_api_cq_id) REFERENCES aws_apigateway_rest_apis(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_apigateway_rest_api_stages" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"rest_api_cq_id" uuid,
	"rest_api_id" text,
	"arn" text,
	"access_log_settings_destination_arn" text,
	"access_log_settings_format" text,
	"cache_cluster_enabled" boolean,
	"cache_cluster_size" text,
	"cache_cluster_status" text,
	"canary_settings_deployment_id" text,
	"canary_settings_percent_traffic" float,
	"canary_settings_stage_variable_overrides" jsonb,
	"canary_settings_use_stage_cache" boolean,
	"client_certificate_id" text,
	"created_date" timestamp without time zone,
	"deployment_id" text,
	"description" text,
	"documentation_version" text,
	"last_updated_date" timestamp without time zone,
	"method_settings" jsonb,
	"stage_name" text,
	"tags" jsonb,
	"tracing_enabled" boolean,
	"variables" jsonb,
	"web_acl_arn" text,
	CONSTRAINT aws_apigateway_rest_api_stages_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (rest_api_cq_id) REFERENCES aws_apigateway_rest_apis(cq_id) ON DELETE CASCADE
);

-- Resource: apigateway.usage_plans
CREATE TABLE IF NOT EXISTS "aws_apigateway_usage_plans" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"description" text,
	"id" text,
	"name" text,
	"product_code" text,
	"quota_limit" integer,
	"quota_offset" integer,
	"quota_period" text,
	"tags" jsonb,
	"throttle_burst_limit" integer,
	"throttle_rate_limit" float,
	CONSTRAINT aws_apigateway_usage_plans_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_apigateway_usage_plan_api_stages" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"usage_plan_cq_id" uuid,
	"usage_plan_id" text,
	"api_id" text,
	"stage" text,
	"throttle" jsonb,
	CONSTRAINT aws_apigateway_usage_plan_api_stages_pk PRIMARY KEY(usage_plan_cq_id,api_id,stage),
	UNIQUE(cq_id),
	FOREIGN KEY (usage_plan_cq_id) REFERENCES aws_apigateway_usage_plans(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_apigateway_usage_plan_keys" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"usage_plan_cq_id" uuid,
	"usage_plan_id" text,
	"arn" text,
	"id" text,
	"name" text,
	"type" text,
	"value" text,
	CONSTRAINT aws_apigateway_usage_plan_keys_pk PRIMARY KEY(usage_plan_cq_id,id),
	UNIQUE(cq_id),
	FOREIGN KEY (usage_plan_cq_id) REFERENCES aws_apigateway_usage_plans(cq_id) ON DELETE CASCADE
);

-- Resource: apigateway.vpc_links
CREATE TABLE IF NOT EXISTS "aws_apigateway_vpc_links" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"description" text,
	"id" text,
	"name" text,
	"status" text,
	"status_message" text,
	"tags" jsonb,
	"target_arns" text[],
	CONSTRAINT aws_apigateway_vpc_links_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);

-- Resource: apigatewayv2.apis
CREATE TABLE IF NOT EXISTS "aws_apigatewayv2_apis" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"name" text,
	"protocol_type" text,
	"route_selection_expression" text,
	"api_endpoint" text,
	"api_gateway_managed" boolean,
	"id" text,
	"api_key_selection_expression" text,
	"cors_configuration_allow_credentials" boolean,
	"cors_configuration_allow_headers" text[],
	"cors_configuration_allow_methods" text[],
	"cors_configuration_allow_origins" text[],
	"cors_configuration_expose_headers" text[],
	"cors_configuration_max_age" integer,
	"created_date" timestamp without time zone,
	"description" text,
	"disable_execute_api_endpoint" boolean,
	"disable_schema_validation" boolean,
	"import_info" text[],
	"tags" jsonb,
	"version" text,
	"warnings" text[],
	CONSTRAINT aws_apigatewayv2_apis_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_apigatewayv2_api_authorizers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"api_cq_id" uuid,
	"api_id" text,
	"arn" text,
	"name" text,
	"authorizer_credentials_arn" text,
	"authorizer_id" text,
	"authorizer_payload_format_version" text,
	"authorizer_result_ttl_in_seconds" integer,
	"authorizer_type" text,
	"authorizer_uri" text,
	"enable_simple_responses" boolean,
	"identity_source" text[],
	"identity_validation_expression" text,
	"jwt_configuration_audience" text[],
	"jwt_configuration_issuer" text,
	CONSTRAINT aws_apigatewayv2_api_authorizers_pk PRIMARY KEY(api_cq_id,authorizer_id),
	UNIQUE(cq_id),
	FOREIGN KEY (api_cq_id) REFERENCES aws_apigatewayv2_apis(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_apigatewayv2_api_deployments" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"api_cq_id" uuid,
	"api_id" text,
	"arn" text,
	"auto_deployed" boolean,
	"created_date" timestamp without time zone,
	"deployment_id" text,
	"deployment_status" text,
	"deployment_status_message" text,
	"description" text,
	CONSTRAINT aws_apigatewayv2_api_deployments_pk PRIMARY KEY(api_cq_id,deployment_id),
	UNIQUE(cq_id),
	FOREIGN KEY (api_cq_id) REFERENCES aws_apigatewayv2_apis(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_apigatewayv2_api_integrations" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"api_cq_id" uuid,
	"api_id" text,
	"arn" text,
	"api_gateway_managed" boolean,
	"connection_id" text,
	"connection_type" text,
	"content_handling_strategy" text,
	"credentials_arn" text,
	"description" text,
	"integration_id" text,
	"integration_method" text,
	"integration_response_selection_expression" text,
	"integration_subtype" text,
	"integration_type" text,
	"integration_uri" text,
	"passthrough_behavior" text,
	"payload_format_version" text,
	"request_parameters" jsonb,
	"request_templates" jsonb,
	"response_parameters" jsonb,
	"template_selection_expression" text,
	"timeout_in_millis" integer,
	"tls_config_server_name_to_verify" text,
	CONSTRAINT aws_apigatewayv2_api_integrations_pk PRIMARY KEY(api_cq_id,integration_id),
	UNIQUE(cq_id),
	FOREIGN KEY (api_cq_id) REFERENCES aws_apigatewayv2_apis(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_apigatewayv2_api_integration_responses" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"api_integration_cq_id" uuid,
	"integration_id" text,
	"arn" text,
	"integration_response_key" text,
	"content_handling_strategy" text,
	"integration_response_id" text,
	"response_parameters" jsonb,
	"response_templates" jsonb,
	"template_selection_expression" text,
	CONSTRAINT aws_apigatewayv2_api_integration_responses_pk PRIMARY KEY(api_integration_cq_id,integration_response_id),
	UNIQUE(cq_id),
	FOREIGN KEY (api_integration_cq_id) REFERENCES aws_apigatewayv2_api_integrations(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_apigatewayv2_api_models" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"api_cq_id" uuid,
	"api_id" text,
	"arn" text,
	"model_template" text,
	"name" text,
	"content_type" text,
	"description" text,
	"model_id" text,
	"schema" text,
	CONSTRAINT aws_apigatewayv2_api_models_pk PRIMARY KEY(api_cq_id,model_id),
	UNIQUE(cq_id),
	FOREIGN KEY (api_cq_id) REFERENCES aws_apigatewayv2_apis(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_apigatewayv2_api_routes" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"api_cq_id" uuid,
	"api_id" text,
	"arn" text,
	"route_key" text,
	"api_gateway_managed" boolean,
	"api_key_required" boolean,
	"authorization_scopes" text[],
	"authorization_type" text,
	"authorizer_id" text,
	"model_selection_expression" text,
	"operation_name" text,
	"request_models" jsonb,
	"request_parameters" jsonb,
	"route_id" text,
	"route_response_selection_expression" text,
	"target" text,
	CONSTRAINT aws_apigatewayv2_api_routes_pk PRIMARY KEY(api_cq_id,route_id),
	UNIQUE(cq_id),
	FOREIGN KEY (api_cq_id) REFERENCES aws_apigatewayv2_apis(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_apigatewayv2_api_route_responses" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"api_route_cq_id" uuid,
	"route_id" text,
	"arn" text,
	"route_response_key" text,
	"model_selection_expression" text,
	"response_models" jsonb,
	"response_parameters" jsonb,
	"route_response_id" text,
	CONSTRAINT aws_apigatewayv2_api_route_responses_pk PRIMARY KEY(api_route_cq_id,route_response_id),
	UNIQUE(cq_id),
	FOREIGN KEY (api_route_cq_id) REFERENCES aws_apigatewayv2_api_routes(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_apigatewayv2_api_stages" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"api_cq_id" uuid,
	"api_id" text,
	"arn" text,
	"stage_name" text,
	"access_log_settings_destination_arn" text,
	"access_log_settings_format" text,
	"api_gateway_managed" boolean,
	"auto_deploy" boolean,
	"client_certificate_id" text,
	"created_date" timestamp without time zone,
	"route_settings_data_trace_enabled" boolean,
	"route_settings_detailed_metrics_enabled" boolean,
	"route_settings_logging_level" text,
	"route_settings_throttling_burst_limit" integer,
	"route_settings_throttling_rate_limit" float,
	"deployment_id" text,
	"description" text,
	"last_deployment_status_message" text,
	"last_updated_date" timestamp without time zone,
	"route_settings" jsonb,
	"stage_variables" jsonb,
	"tags" jsonb,
	CONSTRAINT aws_apigatewayv2_api_stages_pk PRIMARY KEY(api_cq_id,stage_name),
	UNIQUE(cq_id),
	FOREIGN KEY (api_cq_id) REFERENCES aws_apigatewayv2_apis(cq_id) ON DELETE CASCADE
);

-- Resource: apigatewayv2.domain_names
CREATE TABLE IF NOT EXISTS "aws_apigatewayv2_domain_names" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"domain_name" text,
	"api_mapping_selection_expression" text,
	"mutual_tls_authentication_truststore_uri" text,
	"mutual_tls_authentication_truststore_version" text,
	"mutual_tls_authentication_truststore_warnings" text[],
	"tags" jsonb,
	CONSTRAINT aws_apigatewayv2_domain_names_pk PRIMARY KEY(account_id,region,domain_name),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_apigatewayv2_domain_name_configurations" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"domain_name_cq_id" uuid,
	"api_gateway_domain_name" text,
	"certificate_arn" text,
	"certificate_name" text,
	"certificate_upload_date" timestamp without time zone,
	"domain_name_status" text,
	"domain_name_status_message" text,
	"endpoint_type" text,
	"hosted_zone_id" text,
	"security_policy" text,
	CONSTRAINT aws_apigatewayv2_domain_name_configurations_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (domain_name_cq_id) REFERENCES aws_apigatewayv2_domain_names(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_apigatewayv2_domain_name_rest_api_mappings" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"domain_name_cq_id" uuid,
	"api_id" text,
	"arn" text,
	"stage" text,
	"api_mapping_id" text,
	"api_mapping_key" text,
	CONSTRAINT aws_apigatewayv2_domain_name_rest_api_mappings_pk PRIMARY KEY(domain_name_cq_id,api_mapping_id),
	UNIQUE(cq_id),
	FOREIGN KEY (domain_name_cq_id) REFERENCES aws_apigatewayv2_domain_names(cq_id) ON DELETE CASCADE
);

-- Resource: apigatewayv2.vpc_links
CREATE TABLE IF NOT EXISTS "aws_apigatewayv2_vpc_links" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"name" text,
	"security_group_ids" text[],
	"subnet_ids" text[],
	"id" text,
	"created_date" timestamp without time zone,
	"tags" jsonb,
	"vpc_link_status" text,
	"vpc_link_status_message" text,
	"vpc_link_version" text,
	CONSTRAINT aws_apigatewayv2_vpc_links_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);

-- Resource: applicationautoscaling.policies
CREATE TABLE IF NOT EXISTS "aws_applicationautoscaling_policies" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"namespace" text,
	"creation_time" timestamp without time zone,
	"arn" text,
	"name" text,
	"type" text,
	"resource_id" text,
	"scalable_dimension" text,
	"service_namespace" text,
	"alarms" jsonb,
	"step_scaling_policy_configuration" jsonb,
	"target_tracking_scaling_policy_configuration" jsonb,
	CONSTRAINT aws_applicationautoscaling_policies_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: autoscaling.groups
CREATE TABLE IF NOT EXISTS "aws_autoscaling_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"load_balancers" jsonb,
	"load_balancer_target_groups" jsonb,
	"notifications_configurations" jsonb,
	"name" text,
	"availability_zones" text[],
	"created_time" timestamp without time zone,
	"default_cooldown" integer,
	"desired_capacity" integer,
	"health_check_type" text,
	"max_size" integer,
	"min_size" integer,
	"arn" text,
	"capacity_rebalance" boolean,
	"enabled_metrics" jsonb,
	"health_check_grace_period" integer,
	"launch_configuration_name" text,
	"launch_template_id" text,
	"launch_template_name" text,
	"launch_template_version" text,
	"load_balancer_names" text[],
	"max_instance_lifetime" integer,
	"mixed_instances_policy" jsonb,
	"new_instances_protected_from_scale_in" boolean,
	"placement_group" text,
	"service_linked_role_arn" text,
	"status" text,
	"suspended_processes" jsonb,
	"target_group_arns" text[],
	"termination_policies" text[],
	"vpc_zone_identifier" text,
	CONSTRAINT aws_autoscaling_groups_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_autoscaling_group_instances" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"group_cq_id" uuid,
	"availability_zone" text,
	"health_status" text,
	"id" text,
	"lifecycle_state" text,
	"protected_from_scale_in" boolean,
	"type" text,
	"launch_configuration_name" text,
	"launch_template_id" text,
	"launch_template_name" text,
	"launch_template_version" text,
	"weighted_capacity" text,
	CONSTRAINT aws_autoscaling_group_instances_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (group_cq_id) REFERENCES aws_autoscaling_groups(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_autoscaling_group_tags" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"group_cq_id" uuid,
	"key" text,
	"propagate_at_launch" boolean,
	"resource_id" text,
	"resource_type" text,
	"value" text,
	CONSTRAINT aws_autoscaling_group_tags_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (group_cq_id) REFERENCES aws_autoscaling_groups(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_autoscaling_group_scaling_policies" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"group_cq_id" uuid,
	"adjustment_type" text,
	"alarms" jsonb,
	"auto_scaling_group_name" text,
	"cooldown" integer,
	"enabled" boolean,
	"estimated_instance_warmup" integer,
	"metric_aggregation_type" text,
	"min_adjustment_magnitude" integer,
	"min_adjustment_step" integer,
	"arn" text,
	"name" text,
	"type" text,
	"scaling_adjustment" integer,
	"step_adjustments" jsonb,
	"target_tracking_configuration_target_value" float,
	"target_tracking_configuration_customized_metric_name" text,
	"target_tracking_configuration_customized_metric_namespace" text,
	"target_tracking_configuration_customized_metric_statistic" text,
	"target_tracking_configuration_customized_metric_dimensions" jsonb,
	"target_tracking_configuration_customized_metric_unit" text,
	"target_tracking_configuration_disable_scale_in" boolean,
	"target_tracking_configuration_predefined_metric_type" text,
	"target_tracking_configuration_predefined_metric_resource_label" text,
	CONSTRAINT aws_autoscaling_group_scaling_policies_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (group_cq_id) REFERENCES aws_autoscaling_groups(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_autoscaling_group_lifecycle_hooks" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"group_cq_id" uuid,
	"auto_scaling_group_name" text,
	"default_result" text,
	"global_timeout" integer,
	"heartbeat_timeout" integer,
	"lifecycle_hook_name" text,
	"lifecycle_transition" text,
	"notification_metadata" text,
	"notification_target_arn" text,
	"role_arn" text,
	CONSTRAINT aws_autoscaling_group_lifecycle_hooks_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (group_cq_id) REFERENCES aws_autoscaling_groups(cq_id) ON DELETE CASCADE
);

-- Resource: autoscaling.launch_configurations
CREATE TABLE IF NOT EXISTS "aws_autoscaling_launch_configurations" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"created_time" timestamp without time zone,
	"image_id" text,
	"instance_type" text,
	"launch_configuration_name" text,
	"associate_public_ip_address" boolean,
	"classic_link_vpc_id" text,
	"classic_link_vpc_security_groups" text[],
	"ebs_optimized" boolean,
	"iam_instance_profile" text,
	"instance_monitoring_enabled" boolean,
	"kernel_id" text,
	"key_name" text,
	"arn" text,
	"metadata_options_http_endpoint" text,
	"metadata_options_http_put_response_hop_limit" integer,
	"metadata_options_http_tokens" text,
	"placement_tenancy" text,
	"ramdisk_id" text,
	"security_groups" text[],
	"spot_price" text,
	"user_data" text,
	CONSTRAINT aws_autoscaling_launch_configurations_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_autoscaling_launch_configuration_block_device_mappings" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"launch_configuration_cq_id" uuid,
	"device_name" text,
	"ebs_delete_on_termination" boolean,
	"ebs_encrypted" boolean,
	"ebs_iops" integer,
	"ebs_snapshot_id" text,
	"ebs_volume_size" integer,
	"ebs_volume_type" text,
	"no_device" boolean,
	"virtual_name" text,
	CONSTRAINT aws_autoscaling_launch_configuration_block_device_mappings_pk PRIMARY KEY(launch_configuration_cq_id,device_name),
	UNIQUE(cq_id),
	FOREIGN KEY (launch_configuration_cq_id) REFERENCES aws_autoscaling_launch_configurations(cq_id) ON DELETE CASCADE
);

-- Resource: aws.regions
CREATE TABLE IF NOT EXISTS "aws_regions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"enabled" boolean,
	"endpoint" text,
	"opt_in_status" text,
	"region" text,
	CONSTRAINT aws_regions_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id)
);

-- Resource: cloudfront.cache_policies
CREATE TABLE IF NOT EXISTS "aws_cloudfront_cache_policies" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"arn" text,
	"min_ttl" bigint,
	"name" text,
	"comment" text,
	"default_ttl" bigint,
	"max_ttl" bigint,
	"cookies_behavior" text,
	"cookies_quantity" integer,
	"cookies" text[],
	"enable_accept_encoding_gzip" boolean,
	"headers_behavior" text,
	"headers_quantity" integer,
	"headers" text[],
	"query_strings_behavior" text,
	"query_strings_quantity" integer,
	"query_strings" text[],
	"enable_accept_encoding_brotli" boolean,
	"id" text,
	"last_modified_time" timestamp without time zone,
	"type" text,
	CONSTRAINT aws_cloudfront_cache_policies_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);

-- Resource: cloudfront.distributions
CREATE TABLE IF NOT EXISTS "aws_cloudfront_distributions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"tags" jsonb,
	"arn" text,
	"caller_reference" text,
	"comment" text,
	"cache_behavior_target_origin_id" text,
	"cache_behavior_viewer_protocol_policy" text,
	"cache_behavior_allowed_methods" text[],
	"cache_behavior_allowed_methods_cached_methods" text[],
	"cache_behavior_cache_policy_id" text,
	"cache_behavior_compress" boolean,
	"cache_behavior_default_ttl" bigint,
	"cache_behavior_field_level_encryption_id" text,
	"cache_behavior_forwarded_values_cookies_forward" text,
	"cache_behavior_forwarded_values_cookies_whitelisted_names" text[],
	"cache_behavior_forwarded_values_query_string" boolean,
	"cache_behavior_forwarded_values_headers" text[],
	"cache_behavior_forwarded_values_query_string_cache_keys" text[],
	"cache_behavior_max_ttl" bigint,
	"cache_behavior_min_ttl" bigint,
	"cache_behavior_origin_request_policy_id" text,
	"cache_behavior_realtime_log_config_arn" text,
	"cache_behavior_smooth_streaming" boolean,
	"cache_behavior_trusted_key_groups_enabled" boolean,
	"cache_behavior_trusted_key_groups" text[],
	"cache_behavior_trusted_signers_enabled" boolean,
	"cache_behavior_trusted_signers" text[],
	"enabled" boolean,
	"aliases" text[],
	"default_root_object" text,
	"http_version" text,
	"ipv6_enabled" boolean,
	"logging_bucket" text,
	"logging_enabled" boolean,
	"logging_include_cookies" boolean,
	"logging_prefix" text,
	"price_class" text,
	"geo_restriction_type" text,
	"geo_restrictions" text[],
	"viewer_certificate_acm_certificate_arn" text,
	"viewer_certificate" text,
	"viewer_certificate_source" text,
	"viewer_certificate_cloudfront_default_certificate" boolean,
	"viewer_certificate_iam_certificate_id" text,
	"viewer_certificate_minimum_protocol_version" text,
	"viewer_certificate_ssl_support_method" text,
	"web_acl_id" text,
	"domain_name" text,
	"id" text,
	"in_progress_invalidation_batches" integer,
	"last_modified_time" timestamp without time zone,
	"status" text,
	"active_trusted_key_groups_enabled" boolean,
	"active_trusted_key_groups" jsonb,
	"active_trusted_signers_enabled" boolean,
	"active_trusted_signers" jsonb,
	"alias_icp_recordals" jsonb,
	CONSTRAINT aws_cloudfront_distributions_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_cloudfront_distribution_default_cache_behavior_functions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"distribution_cq_id" uuid,
	"event_type" text,
	"lambda_function_arn" text,
	"include_body" boolean,
	CONSTRAINT aws_cloudfront_distribution_default_cache_behavior_functions_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (distribution_cq_id) REFERENCES aws_cloudfront_distributions(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_cloudfront_distribution_origins" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"distribution_cq_id" uuid,
	"domain_name" text,
	"id" text,
	"connection_attempts" integer,
	"connection_timeout" integer,
	"custom_headers" jsonb,
	"custom_origin_config_http_port" integer,
	"custom_origin_config_https_port" integer,
	"custom_origin_config_protocol_policy" text,
	"custom_origin_config_keepalive_timeout" integer,
	"custom_origin_config_read_timeout" integer,
	"custom_origin_config_ssl_protocols" text[],
	"origin_path" text,
	"origin_shield_enabled" boolean,
	"origin_shield_region" text,
	"s3_origin_config_origin_access_identity" text,
	CONSTRAINT aws_cloudfront_distribution_origins_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (distribution_cq_id) REFERENCES aws_cloudfront_distributions(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_cloudfront_distribution_cache_behaviors" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"distribution_cq_id" uuid,
	"path_pattern" text,
	"target_origin_id" text,
	"viewer_protocol_policy" text,
	"allowed_methods" text[],
	"cached_methods" text[],
	"cache_policy_id" text,
	"compress" boolean,
	"default_ttl" bigint,
	"field_level_encryption_id" text,
	"forwarded_values_cookies_forward" text,
	"forwarded_values_cookies_whitelisted_names" text[],
	"forwarded_values_query_string" boolean,
	"forwarded_values_headers" text[],
	"forwarded_values_query_string_cache_keys" text[],
	"max_ttl" bigint,
	"min_ttl" bigint,
	"origin_request_policy_id" text,
	"realtime_log_config_arn" text,
	"smooth_streaming" boolean,
	"trusted_key_groups_enabled" boolean,
	"trusted_key_groups" text[],
	"trusted_signers_enabled" boolean,
	"trusted_signers" text[],
	CONSTRAINT aws_cloudfront_distribution_cache_behaviors_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (distribution_cq_id) REFERENCES aws_cloudfront_distributions(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_cloudfront_distribution_cache_behavior_lambda_functions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"distribution_cache_behavior_cq_id" uuid,
	"event_type" text,
	"lambda_function_arn" text,
	"include_body" boolean,
	CONSTRAINT aws_cloudfront_distribution_cache_behavior_lambda_functions_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (distribution_cache_behavior_cq_id) REFERENCES aws_cloudfront_distribution_cache_behaviors(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_cloudfront_distribution_custom_error_responses" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"distribution_cq_id" uuid,
	"error_code" integer,
	"error_caching_min_ttl" bigint,
	"response_code" text,
	"response_page_path" text,
	CONSTRAINT aws_cloudfront_distribution_custom_error_responses_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (distribution_cq_id) REFERENCES aws_cloudfront_distributions(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_cloudfront_distribution_origin_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"distribution_cq_id" uuid,
	"failover_criteria_status_codes" integer[],
	"id" text,
	"members_origin_ids" text[],
	CONSTRAINT aws_cloudfront_distribution_origin_groups_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (distribution_cq_id) REFERENCES aws_cloudfront_distributions(cq_id) ON DELETE CASCADE
);

-- Resource: cloudtrail.trails
CREATE TABLE IF NOT EXISTS "aws_cloudtrail_trails" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"tags" jsonb,
	"cloudwatch_logs_log_group_name" text,
	"is_logging" boolean,
	"latest_cloud_watch_logs_delivery_error" text,
	"latest_cloud_watch_logs_delivery_time" timestamp without time zone,
	"latest_delivery_error" text,
	"latest_delivery_time" timestamp without time zone,
	"latest_digest_delivery_error" text,
	"latest_digest_delivery_time" timestamp without time zone,
	"latest_notification_error" text,
	"latest_notification_time" timestamp without time zone,
	"start_logging_time" timestamp without time zone,
	"stop_logging_time" timestamp without time zone,
	"cloud_watch_logs_log_group_arn" text,
	"cloud_watch_logs_role_arn" text,
	"has_custom_event_selectors" boolean,
	"has_insight_selectors" boolean,
	"region" text,
	"include_global_service_events" boolean,
	"is_multi_region_trail" boolean,
	"is_organization_trail" boolean,
	"kms_key_id" text,
	"log_file_validation_enabled" boolean,
	"name" text,
	"s3_bucket_name" text,
	"s3_key_prefix" text,
	"sns_topic_arn" text,
	"sns_topic_name" text,
	"arn" text,
	CONSTRAINT aws_cloudtrail_trails_pk PRIMARY KEY(account_id,arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_cloudtrail_trail_event_selectors" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"trail_cq_id" uuid,
	"trail_arn" text,
	"exclude_management_event_sources" text[],
	"include_management_events" boolean,
	"read_write_type" text,
	CONSTRAINT aws_cloudtrail_trail_event_selectors_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (trail_cq_id) REFERENCES aws_cloudtrail_trails(cq_id) ON DELETE CASCADE
);

-- Resource: cloudwatch.alarms
CREATE TABLE IF NOT EXISTS "aws_cloudwatch_alarms" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"actions_enabled" boolean,
	"actions" text[],
	"arn" text,
	"configuration_updated_timestamp" timestamp without time zone,
	"description" text,
	"name" text,
	"comparison_operator" text,
	"datapoints_to_alarm" integer,
	"dimensions" jsonb,
	"evaluate_low_sample_count_percentile" text,
	"evaluation_periods" integer,
	"extended_statistic" text,
	"insufficient_data_actions" text[],
	"metric_name" text,
	"namespace" text,
	"ok_actions" text[],
	"period" integer,
	"state_reason" text,
	"state_reason_data" text,
	"state_updated_timestamp" timestamp without time zone,
	"state_value" text,
	"statistic" text,
	"threshold" float,
	"threshold_metric_id" text,
	"treat_missing_data" text,
	"unit" text,
	CONSTRAINT aws_cloudwatch_alarms_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_cloudwatch_alarm_metrics" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"alarm_cq_id" uuid,
	"alarm_arn" text,
	"alarm_name" text,
	"id" text,
	"expression" text,
	"label" text,
	"metric_stat_metric_dimensions" jsonb,
	"metric_stat_metric_name" text,
	"metric_stat_metric_namespace" text,
	"metric_stat_period" integer,
	"metric_stat" text,
	"metric_stat_unit" text,
	"period" integer,
	"return_data" boolean,
	CONSTRAINT aws_cloudwatch_alarm_metrics_pk PRIMARY KEY(alarm_cq_id,id),
	UNIQUE(cq_id),
	FOREIGN KEY (alarm_cq_id) REFERENCES aws_cloudwatch_alarms(cq_id) ON DELETE CASCADE
);

-- Resource: cloudwatchlogs.filters
CREATE TABLE IF NOT EXISTS "aws_cloudwatchlogs_filters" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"creation_time" bigint,
	"name" text,
	"pattern" text,
	"log_group_name" text,
	CONSTRAINT aws_cloudwatchlogs_filters_pk PRIMARY KEY(account_id,region,name,log_group_name),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_cloudwatchlogs_filter_metric_transformations" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"filter_cq_id" uuid,
	"metric_name" text,
	"metric_namespace" text,
	"metric_value" text,
	"default_value" float,
	CONSTRAINT aws_cloudwatchlogs_filter_metric_transformations_pk PRIMARY KEY(filter_cq_id,metric_name),
	UNIQUE(cq_id),
	FOREIGN KEY (filter_cq_id) REFERENCES aws_cloudwatchlogs_filters(cq_id) ON DELETE CASCADE
);

-- Resource: codebuild.projects
CREATE TABLE IF NOT EXISTS "aws_codebuild_projects" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"artifacts_type" text,
	"artifacts_artifact_identifier" text,
	"artifacts_bucket_owner_access" text,
	"artifacts_encryption_disabled" boolean,
	"artifacts_location" text,
	"artifacts_name" text,
	"artifacts_namespace_type" text,
	"artifacts_override_artifact_name" boolean,
	"artifacts_packaging" text,
	"artifacts_path" text,
	"badge_enabled" boolean,
	"badge_request_url" text,
	"build_batch_config_batch_report_mode" text,
	"build_batch_config_combine_artifacts" boolean,
	"build_batch_config_restrictions_compute_types_allowed" text[],
	"build_batch_config_restrictions_maximum_builds_allowed" integer,
	"build_batch_config_service_role" text,
	"build_batch_config_timeout_in_mins" integer,
	"cache_type" text,
	"cache_location" text,
	"cache_modes" text[],
	"concurrent_build_limit" integer,
	"created" timestamp without time zone,
	"description" text,
	"encryption_key" text,
	"environment_compute_type" text,
	"environment_image" text,
	"environment_type" text,
	"environment_certificate" text,
	"environment_image_pull_credentials_type" text,
	"environment_privileged_mode" boolean,
	"environment_registry_credential" text,
	"environment_registry_credential_credential_provider" text,
	"last_modified" timestamp without time zone,
	"logs_config_cloud_watch_logs_status" text,
	"logs_config_cloud_watch_logs_group_name" text,
	"logs_config_cloud_watch_logs_stream_name" text,
	"logs_config_s3_logs_status" text,
	"logs_config_s3_logs_bucket_owner_access" text,
	"logs_config_s3_logs_encryption_disabled" boolean,
	"logs_config_s3_logs_location" text,
	"name" text,
	"project_visibility" text,
	"public_project_alias" text,
	"queued_timeout_in_minutes" integer,
	"resource_access_role" text,
	"secondary_source_versions" jsonb,
	"service_role" text,
	"source_type" text,
	"source_auth_type" text,
	"source_auth_resource" text,
	"source_build_status_config_context" text,
	"source_build_status_config_target_url" text,
	"source_buildspec" text,
	"source_git_clone_depth" integer,
	"source_git_submodules_config_fetch_submodules" boolean,
	"source_insecure_ssl" boolean,
	"source_location" text,
	"source_report_build_status" boolean,
	"source_identifier" text,
	"source_version" text,
	"tags" jsonb,
	"timeout_in_minutes" integer,
	"vpc_config_security_group_ids" text[],
	"vpc_config_subnets" text[],
	"vpc_config_vpc_id" text,
	"webhook_branch_filter" text,
	"webhook_build_type" text,
	"webhook_filter_groups" jsonb,
	"webhook_last_modified_secret" timestamp without time zone,
	"webhook_payload_url" text,
	"webhook_secret" text,
	"webhook_url" text,
	CONSTRAINT aws_codebuild_projects_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_codebuild_project_environment_variables" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"project_cq_id" uuid,
	"name" text,
	"value" text,
	"type" text,
	CONSTRAINT aws_codebuild_project_environment_variables_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (project_cq_id) REFERENCES aws_codebuild_projects(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_codebuild_project_file_system_locations" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"project_cq_id" uuid,
	"identifier" text,
	"location" text,
	"mount_options" text,
	"mount_point" text,
	"type" text,
	CONSTRAINT aws_codebuild_project_file_system_locations_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (project_cq_id) REFERENCES aws_codebuild_projects(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_codebuild_project_secondary_artifacts" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"project_cq_id" uuid,
	"type" text,
	"artifact_identifier" text,
	"bucket_owner_access" text,
	"encryption_disabled" boolean,
	"location" text,
	"name" text,
	"namespace_type" text,
	"override_artifact_name" boolean,
	"packaging" text,
	"path" text,
	CONSTRAINT aws_codebuild_project_secondary_artifacts_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (project_cq_id) REFERENCES aws_codebuild_projects(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_codebuild_project_secondary_sources" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"project_cq_id" uuid,
	"type" text,
	"auth_type" text,
	"auth_resource" text,
	"build_status_config_context" text,
	"build_status_config_target_url" text,
	"buildspec" text,
	"git_clone_depth" integer,
	"git_submodules_config_fetch_submodules" boolean,
	"insecure_ssl" boolean,
	"location" text,
	"report_build_status" boolean,
	"source_identifier" text,
	CONSTRAINT aws_codebuild_project_secondary_sources_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (project_cq_id) REFERENCES aws_codebuild_projects(cq_id) ON DELETE CASCADE
);

-- Resource: cognito.identity_pools
CREATE TABLE IF NOT EXISTS "aws_cognito_identity_pools" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"allow_unauthenticated_identities" boolean,
	"id" text,
	"identity_pool_name" text,
	"allow_classic_flow" boolean,
	"developer_provider_name" text,
	"identity_pool_tags" jsonb,
	"open_id_connect_provider_arns" text[],
	"saml_provider_arns" text[],
	"supported_login_providers" jsonb,
	CONSTRAINT aws_cognito_identity_pools_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_cognito_identity_pool_cognito_identity_providers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"identity_pool_cq_id" uuid,
	"identity_pool_id" text,
	"client_id" text,
	"provider_name" text,
	"server_side_token_check" boolean,
	CONSTRAINT aws_cognito_identity_pool_cognito_identity_providers_pk PRIMARY KEY(identity_pool_cq_id,client_id),
	UNIQUE(cq_id),
	FOREIGN KEY (identity_pool_cq_id) REFERENCES aws_cognito_identity_pools(cq_id) ON DELETE CASCADE
);

-- Resource: cognito.user_pools
CREATE TABLE IF NOT EXISTS "aws_cognito_user_pools" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"account_recovery_setting" jsonb,
	"admin_create_user_admin_only" boolean,
	"admin_create_user_invite_email_message" text,
	"admin_create_user_invite_email_subject" text,
	"admin_create_user_invite_sms" text,
	"admin_create_user_config_unused_account_validity_days" integer,
	"alias_attributes" text[],
	"arn" text,
	"auto_verified_attributes" text[],
	"creation_date" timestamp without time zone,
	"custom_domain" text,
	"challenge_required_on_new_device" boolean,
	"device_only_remembered_on_user_prompt" boolean,
	"domain" text,
	"email_configuration_set" text,
	"email_configuration_sending_account" text,
	"email_configuration_from" text,
	"email_configuration_reply_to_address" text,
	"email_configuration_source_arn" text,
	"email_configuration_failure" text,
	"email_verification_message" text,
	"email_verification_subject" text,
	"estimated_number_of_users" integer,
	"id" text,
	"lambda_config_create_auth_challenge" text,
	"lambda_config_custom_email_sender_lambda_arn" text,
	"lambda_config_custom_email_sender_lambda_version" text,
	"lambda_config_custom_message" text,
	"lambda_config_custom_sms_sender_lambda_arn" text,
	"lambda_config_custom_sms_sender_lambda_version" text,
	"lambda_config_define_auth_challenge" text,
	"lambda_config_kms_key_id" text,
	"lambda_config_post_authentication" text,
	"lambda_config_post_confirmation" text,
	"lambda_config_pre_authentication" text,
	"lambda_config_pre_sign_up" text,
	"lambda_config_pre_token_generation" text,
	"lambda_config_user_migration" text,
	"lambda_config_verify_auth_challenge_response" text,
	"last_modified_date" timestamp without time zone,
	"mfa_configuration" text,
	"name" text,
	"policies_password_policy_minimum_length" integer,
	"policies_password_policy_require_lowercase" boolean,
	"policies_password_policy_require_numbers" boolean,
	"policies_password_policy_require_symbols" boolean,
	"policies_password_policy_require_uppercase" boolean,
	"policies_password_policy_temporary_password_validity_days" integer,
	"sms_authentication_message" text,
	"sms_configuration_sns_caller_arn" text,
	"sms_configuration_external_id" text,
	"sms_configuration_failure" text,
	"sms_verification_message" text,
	"status" text,
	"user_pool_add_ons_advanced_security_mode" text,
	"user_pool_tags" jsonb,
	"username_attributes" text[],
	"username_configuration_case_sensitive" boolean,
	"verification_message_template_default_email_option" text,
	"verification_message_template_email_message" text,
	"verification_message_template_email_message_by_link" text,
	"verification_message_template_email_subject" text,
	"verification_message_template_email_subject_by_link" text,
	"verification_message_template_sms_message" text,
	CONSTRAINT aws_cognito_user_pools_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_cognito_user_pool_schema_attributes" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"user_pool_cq_id" uuid,
	"user_pool_id" text,
	"attribute_data_type" text,
	"developer_only_attribute" boolean,
	"mutable" boolean,
	"name" text,
	"number_attribute_constraints_max_value" text,
	"number_attribute_constraints_min_value" text,
	"required" boolean,
	"string_attribute_constraints_max_length" text,
	"string_attribute_constraints_min_length" text,
	CONSTRAINT aws_cognito_user_pool_schema_attributes_pk PRIMARY KEY(user_pool_cq_id,name),
	UNIQUE(cq_id),
	FOREIGN KEY (user_pool_cq_id) REFERENCES aws_cognito_user_pools(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_cognito_user_pool_identity_providers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"user_pool_cq_id" uuid,
	"user_pool_id" text,
	"account_id" text,
	"region" text,
	"attribute_mapping" jsonb,
	"creation_date" timestamp without time zone,
	"idp_identifiers" text[],
	"last_modified_date" timestamp without time zone,
	"provider_details" jsonb,
	"provider_name" text,
	"provider_type" text,
	CONSTRAINT aws_cognito_user_pool_identity_providers_pk PRIMARY KEY(user_pool_cq_id,provider_name),
	UNIQUE(cq_id),
	FOREIGN KEY (user_pool_cq_id) REFERENCES aws_cognito_user_pools(cq_id) ON DELETE CASCADE
);

-- Resource: config.configuration_recorders
CREATE TABLE IF NOT EXISTS "aws_config_configuration_recorders" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"name" text,
	"recording_group_all_supported" boolean,
	"recording_group_include_global_resource_types" boolean,
	"recording_group_resource_types" text[],
	"role_arn" text,
	"status_last_error_code" text,
	"status_last_error_message" text,
	"status_last_start_time" timestamp without time zone,
	"status_last_status" text,
	"status_last_status_change_time" timestamp without time zone,
	"status_last_stop_time" timestamp without time zone,
	"status_recording" boolean,
	CONSTRAINT aws_config_configuration_recorders_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: config.conformance_packs
CREATE TABLE IF NOT EXISTS "aws_config_conformance_packs" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"conformance_pack_id" text,
	"conformance_pack_name" text,
	"conformance_pack_input_parameters" jsonb,
	"created_by" text,
	"delivery_s3_bucket" text,
	"delivery_s3_key_prefix" text,
	"last_update_requested_time" timestamp without time zone,
	CONSTRAINT aws_config_conformance_packs_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: dax.clusters
CREATE TABLE IF NOT EXISTS "aws_dax_clusters" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"tags" jsonb,
	"active_nodes" integer,
	"arn" text,
	"cluster_discovery_endpoint_address" text,
	"cluster_discovery_endpoint_port" integer,
	"cluster_discovery_endpoint_url" text,
	"cluster_endpoint_encryption_type" text,
	"name" text,
	"description" text,
	"iam_role_arn" text,
	"node_ids_to_remove" text[],
	"node_type" text,
	"notification_configuration_topic_arn" text,
	"notification_configuration_topic_status" text,
	"node_ids_to_reboot" text[],
	"parameter_apply_status" text,
	"parameter_group_name" text,
	"preferred_maintenance_window" text,
	"sse_description_status" text,
	"security_groups" jsonb,
	"status" text,
	"subnet_group" text,
	"total_nodes" integer,
	CONSTRAINT aws_dax_clusters_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_dax_cluster_nodes" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_cq_id" uuid,
	"availability_zone" text,
	"endpoint_address" text,
	"endpoint_port" integer,
	"endpoint_url" text,
	"node_create_time" timestamp without time zone,
	"node_id" text,
	"node_status" text,
	"parameter_group_status" text,
	CONSTRAINT aws_dax_cluster_nodes_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_cq_id) REFERENCES aws_dax_clusters(cq_id) ON DELETE CASCADE
);

-- Resource: directconnect.connections
CREATE TABLE IF NOT EXISTS "aws_directconnect_connections" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"aws_device_v2" text,
	"bandwidth" text,
	"id" text,
	"name" text,
	"connection_state" text,
	"encryption_mode" text,
	"has_logical_redundancy" text,
	"jumbo_frame_capable" boolean,
	"lag_id" text,
	"loa_issue_time" timestamp without time zone,
	"location" text,
	"mac_sec_capable" boolean,
	"owner_account" text,
	"partner_name" text,
	"port_encryption_status" text,
	"provider_name" text,
	"tags" jsonb,
	"vlan" integer,
	CONSTRAINT aws_directconnect_connections_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_directconnect_connection_mac_sec_keys" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"connection_cq_id" uuid,
	"connection_id" text,
	"ckn" text,
	"secret_arn" text,
	"start_on" text,
	"state" text,
	CONSTRAINT aws_directconnect_connection_mac_sec_keys_pk PRIMARY KEY(connection_cq_id,secret_arn),
	UNIQUE(cq_id),
	FOREIGN KEY (connection_cq_id) REFERENCES aws_directconnect_connections(cq_id) ON DELETE CASCADE
);

-- Resource: directconnect.gateways
CREATE TABLE IF NOT EXISTS "aws_directconnect_gateways" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"amazon_side_asn" bigint,
	"id" text,
	"name" text,
	"state" text,
	"owner_account" text,
	"state_change_error" text,
	CONSTRAINT aws_directconnect_gateways_pk PRIMARY KEY(account_id,region,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_directconnect_gateway_associations" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"gateway_cq_id" uuid,
	"gateway_id" text,
	"allowed_prefixes_to_direct_connect_gateway" text[],
	"associated_gateway_id" text,
	"associated_gateway_owner_account" text,
	"associated_gateway_region" text,
	"associated_gateway_type" text,
	"association_id" text,
	"association_state" text,
	"direct_connect_gateway_owner_account" text,
	"state_change_error" text,
	"virtual_gateway_id" text,
	"virtual_gateway_owner_account" text,
	"resource_id" text,
	CONSTRAINT aws_directconnect_gateway_associations_pk PRIMARY KEY(gateway_cq_id,association_id),
	UNIQUE(cq_id),
	FOREIGN KEY (gateway_cq_id) REFERENCES aws_directconnect_gateways(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_directconnect_gateway_attachments" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"gateway_cq_id" uuid,
	"gateway_id" text,
	"attachment_state" text,
	"attachment_type" text,
	"state_change_error" text,
	"virtual_interface_id" text,
	"virtual_interface_owner_account" text,
	"virtual_interface_region" text,
	CONSTRAINT aws_directconnect_gateway_attachments_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (gateway_cq_id) REFERENCES aws_directconnect_gateways(cq_id) ON DELETE CASCADE
);

-- Resource: directconnect.lags
CREATE TABLE IF NOT EXISTS "aws_directconnect_lags" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"allows_hosted_connections" boolean,
	"aws_device_v2" text,
	"connection_ids" text[],
	"connections_bandwidth" text,
	"encryption_mode" text,
	"has_logical_redundancy" text,
	"jumbo_frame_capable" boolean,
	"id" text,
	"name" text,
	"state" text,
	"location" text,
	"mac_sec_capable" boolean,
	"minimum_links" integer,
	"number_of_connections" integer,
	"owner_account" text,
	"provider_name" text,
	"tags" jsonb,
	CONSTRAINT aws_directconnect_lags_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_directconnect_lag_mac_sec_keys" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"lag_cq_id" uuid,
	"lag_id" text,
	"ckn" text,
	"secret_arn" text,
	"start_on" text,
	"state" text,
	CONSTRAINT aws_directconnect_lag_mac_sec_keys_pk PRIMARY KEY(lag_cq_id,secret_arn),
	UNIQUE(cq_id),
	FOREIGN KEY (lag_cq_id) REFERENCES aws_directconnect_lags(cq_id) ON DELETE CASCADE
);

-- Resource: directconnect.virtual_gateways
CREATE TABLE IF NOT EXISTS "aws_directconnect_virtual_gateways" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"id" text,
	"state" text,
	CONSTRAINT aws_directconnect_virtual_gateways_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);

-- Resource: directconnect.virtual_interfaces
CREATE TABLE IF NOT EXISTS "aws_directconnect_virtual_interfaces" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"arn" text,
	"address_family" text,
	"amazon_address" text,
	"amazon_side_asn" bigint,
	"asn" integer,
	"auth_key" text,
	"aws_device_v2" text,
	"connection_id" text,
	"customer_address" text,
	"customer_router_config" text,
	"direct_connect_gateway_id" text,
	"jumbo_frame_capable" boolean,
	"location" text,
	"mtu" integer,
	"owner_account" text,
	"region" text,
	"route_filter_prefixes" text[],
	"tags" jsonb,
	"virtual_gateway_id" text,
	"id" text,
	"virtual_interface_name" text,
	"virtual_interface_state" text,
	"virtual_interface_type" text,
	"vlan" integer,
	CONSTRAINT aws_directconnect_virtual_interfaces_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_directconnect_virtual_interface_bgp_peers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"virtual_interface_cq_id" uuid,
	"virtual_interface_id" text,
	"address_family" text,
	"amazon_address" text,
	"asn" integer,
	"auth_key" text,
	"aws_device_v2" text,
	"bgp_peer_id" text,
	"bgp_peer_state" text,
	"bgp_status" text,
	"customer_address" text,
	CONSTRAINT aws_directconnect_virtual_interface_bgp_peers_pk PRIMARY KEY(virtual_interface_cq_id,bgp_peer_id),
	UNIQUE(cq_id),
	FOREIGN KEY (virtual_interface_cq_id) REFERENCES aws_directconnect_virtual_interfaces(cq_id) ON DELETE CASCADE
);

-- Resource: dms.replication_instances
CREATE TABLE IF NOT EXISTS "aws_dms_replication_instances" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"tags" jsonb,
	"allocated_storage" integer,
	"auto_minor_version_upgrade" boolean,
	"availability_zone" text,
	"dns_name_servers" text,
	"engine_version" text,
	"free_until" timestamp without time zone,
	"instance_create_time" timestamp without time zone,
	"kms_key_id" text,
	"multi_az" boolean,
	"pending_modified_values_allocated_storage" integer,
	"pending_modified_values_engine_version" text,
	"pending_modified_values_multi_az" boolean,
	"pending_modified_values_class" text,
	"preferred_maintenance_window" text,
	"publicly_accessible" boolean,
	"arn" text,
	"class" text,
	"identifier" text,
	"private_ip_address" inet,
	"private_ip_addresses" inet[],
	"public_ip_address" inet,
	"public_ip_addresses" inet[],
	"status" text,
	"replication_subnet_group_description" text,
	"replication_subnet_group_identifier" text,
	"replication_subnet_group_subnet_group_status" text,
	"replication_subnet_group_vpc_id" text,
	"secondary_availability_zone" text,
	CONSTRAINT aws_dms_replication_instances_pk PRIMARY KEY(account_id,arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_dms_replication_instance_replication_subnet_group_subnets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"replication_instance_cq_id" uuid,
	"subnet_availability_zone_name" text,
	"subnet_identifier" text,
	"subnet_status" text,
	CONSTRAINT aws_dms_replication_instance_replication_subnet_group_subnet_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (replication_instance_cq_id) REFERENCES aws_dms_replication_instances(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_dms_replication_instance_vpc_security_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"replication_instance_cq_id" uuid,
	"status" text,
	"vpc_security_group_id" text,
	CONSTRAINT aws_dms_replication_instance_vpc_security_groups_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (replication_instance_cq_id) REFERENCES aws_dms_replication_instances(cq_id) ON DELETE CASCADE
);

-- Resource: dynamodb.tables
CREATE TABLE IF NOT EXISTS "aws_dynamodb_tables" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"tags" jsonb,
	"archival_summary" jsonb,
	"attribute_definitions" jsonb,
	"billing_mode_summary" jsonb,
	"creation_date_time" timestamp without time zone,
	"global_table_version" text,
	"item_count" bigint,
	"key_schema" jsonb,
	"latest_stream_arn" text,
	"latest_stream_label" text,
	"provisioned_throughput_last_decrease_date_time" timestamp without time zone,
	"provisioned_throughput_last_increase_date_time" timestamp without time zone,
	"provisioned_throughput_number_of_decreases_today" bigint,
	"provisioned_throughput_read_capacity_units" bigint,
	"provisioned_throughput_write_capacity_units" bigint,
	"restore_summary" jsonb,
	"inaccessible_encryption_date_time" timestamp without time zone,
	"kms_master_key_arn" text,
	"sse_type" text,
	"sse_status" text,
	"stream_specification" jsonb,
	"arn" text,
	"table_class_last_update" timestamp without time zone,
	"table_class" text,
	"id" text,
	"name" text,
	"size_bytes" bigint,
	"status" text,
	CONSTRAINT aws_dynamodb_tables_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_dynamodb_table_global_secondary_indexes" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"table_cq_id" uuid,
	"backfilling" boolean,
	"arn" text,
	"name" text,
	"index_size_bytes" bigint,
	"status" text,
	"item_count" bigint,
	"key_schema" jsonb,
	"projection_non_key_attributes" text[],
	"projection_type" text,
	"provisioned_throughput_last_decrease_date_time" timestamp without time zone,
	"provisioned_throughput_last_increase_date_time" timestamp without time zone,
	"provisioned_throughput_number_of_decreases_today" bigint,
	"provisioned_throughput_read_capacity_units" bigint,
	"provisioned_throughput_write_capacity_units" bigint,
	CONSTRAINT aws_dynamodb_table_global_secondary_indexes_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (table_cq_id) REFERENCES aws_dynamodb_tables(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_dynamodb_table_local_secondary_indexes" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"table_cq_id" uuid,
	"arn" text,
	"name" text,
	"index_size_bytes" bigint,
	"item_count" bigint,
	"key_schema" jsonb,
	"projection_non_key_attributes" text[],
	"projection_type" text,
	CONSTRAINT aws_dynamodb_table_local_secondary_indexes_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (table_cq_id) REFERENCES aws_dynamodb_tables(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_dynamodb_table_replicas" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"table_cq_id" uuid,
	"global_secondary_indexes" jsonb,
	"kms_master_key_id" text,
	"provisioned_throughput_override_read_capacity_units" bigint,
	"region_name" text,
	"replica_inaccessible_date_time" timestamp without time zone,
	"replica_status" text,
	"replica_status_description" text,
	"replica_status_percent_progress" text,
	"summary_last_update_date_time" timestamp without time zone,
	"summary_table_class" text,
	CONSTRAINT aws_dynamodb_table_replicas_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (table_cq_id) REFERENCES aws_dynamodb_tables(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_dynamodb_table_replica_auto_scalings" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"table_cq_id" uuid,
	"global_secondary_indexes" jsonb,
	"region_name" text,
	"read_capacity" jsonb,
	"write_capacity" jsonb,
	"replica_status" text,
	CONSTRAINT aws_dynamodb_table_replica_auto_scalings_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (table_cq_id) REFERENCES aws_dynamodb_tables(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_dynamodb_table_continuous_backups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"table_cq_id" uuid,
	"continuous_backups_status" text,
	"earliest_restorable_date_time" timestamp without time zone,
	"latest_restorable_date_time" timestamp without time zone,
	"point_in_time_recovery_status" text,
	CONSTRAINT aws_dynamodb_table_continuous_backups_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (table_cq_id) REFERENCES aws_dynamodb_tables(cq_id) ON DELETE CASCADE
);

-- Resource: ec2.byoip_cidrs
CREATE TABLE IF NOT EXISTS "aws_ec2_byoip_cidrs" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"cidr" text,
	"description" text,
	"state" text,
	"status_message" text,
	CONSTRAINT aws_ec2_byoip_cidrs_pk PRIMARY KEY(account_id,region,cidr),
	UNIQUE(cq_id)
);

-- Resource: ec2.customer_gateways
CREATE TABLE IF NOT EXISTS "aws_ec2_customer_gateways" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"id" text,
	"bgp_asn" text,
	"certificate_arn" text,
	"arn" text,
	"device_name" text,
	"ip_address" text,
	"state" text,
	"tags" jsonb,
	"type" text,
	CONSTRAINT aws_ec2_customer_gateways_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);

-- Resource: ec2.ebs_snapshots
CREATE TABLE IF NOT EXISTS "aws_ec2_ebs_snapshots" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"create_volume_permissions" jsonb,
	"data_encryption_key_id" text,
	"description" text,
	"encrypted" boolean,
	"kms_key_id" text,
	"outpost_arn" text,
	"owner_alias" text,
	"owner_id" text,
	"progress" text,
	"snapshot_id" text,
	"start_time" timestamp without time zone,
	"state" text,
	"state_message" text,
	"tags" jsonb,
	"volume_id" text,
	"volume_size" integer,
	CONSTRAINT aws_ec2_ebs_snapshots_pk PRIMARY KEY(account_id,snapshot_id),
	UNIQUE(cq_id)
);

-- Resource: ec2.ebs_volumes
CREATE TABLE IF NOT EXISTS "aws_ec2_ebs_volumes" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"id" text,
	"arn" text,
	"availability_zone" text,
	"create_time" timestamp without time zone,
	"encrypted" boolean,
	"fast_restored" boolean,
	"iops" integer,
	"kms_key_id" text,
	"multi_attach_enabled" boolean,
	"outpost_arn" text,
	"size" integer,
	"snapshot_id" text,
	"state" text,
	"tags" jsonb,
	"throughput" integer,
	"volume_type" text,
	CONSTRAINT aws_ec2_ebs_volumes_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_ec2_ebs_volume_attachments" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"ebs_volume_cq_id" uuid,
	"attach_time" timestamp without time zone,
	"delete_on_termination" boolean,
	"device" text,
	"instance_id" text,
	"state" text,
	"volume_id" text,
	CONSTRAINT aws_ec2_ebs_volume_attachments_pk PRIMARY KEY(ebs_volume_cq_id,device),
	UNIQUE(cq_id),
	FOREIGN KEY (ebs_volume_cq_id) REFERENCES aws_ec2_ebs_volumes(cq_id) ON DELETE CASCADE
);

-- Resource: ec2.eips
CREATE TABLE IF NOT EXISTS "aws_ec2_eips" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"allocation_id" text,
	"association_id" text,
	"carrier_ip" inet,
	"customer_owned_ip" inet,
	"customer_owned_ipv4_pool" text,
	"domain" text,
	"instance_id" text,
	"network_border_group" text,
	"network_interface_id" text,
	"network_interface_owner_id" text,
	"private_ip_address" inet,
	"public_ip" inet,
	"public_ipv4_pool" text,
	"tags" jsonb,
	CONSTRAINT aws_ec2_eips_pk PRIMARY KEY(account_id,public_ip),
	UNIQUE(cq_id)
);

-- Resource: ec2.flow_logs
CREATE TABLE IF NOT EXISTS "aws_ec2_flow_logs" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"id" text,
	"creation_time" timestamp without time zone,
	"deliver_logs_error_message" text,
	"deliver_logs_permission_arn" text,
	"deliver_logs_status" text,
	"flow_log_id" text,
	"flow_log_status" text,
	"log_destination" text,
	"log_destination_type" text,
	"log_format" text,
	"log_group_name" text,
	"max_aggregation_interval" integer,
	"resource_id" text,
	"tags" jsonb,
	"traffic_type" text,
	CONSTRAINT aws_ec2_flow_logs_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);

-- Resource: ec2.images
CREATE TABLE IF NOT EXISTS "aws_ec2_images" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"id" text,
	"architecture" text,
	"creation_date" text,
	"description" text,
	"ena_support" boolean,
	"hypervisor" text,
	"image_location" text,
	"image_owner_alias" text,
	"image_type" text,
	"kernel_id" text,
	"name" text,
	"owner_id" text,
	"platform" text,
	"platform_details" text,
	"product_codes" jsonb,
	"public" boolean,
	"ramdisk_id" text,
	"root_device_name" text,
	"root_device_type" text,
	"sriov_net_support" text,
	"state" text,
	"state_reason_code" text,
	"state_reason_message" text,
	"tags" jsonb,
	"usage_operation" text,
	"virtualization_type" text,
	CONSTRAINT aws_ec2_images_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_ec2_image_block_device_mappings" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"image_cq_id" uuid,
	"device_name" text,
	"ebs_delete_on_termination" boolean,
	"ebs_encrypted" boolean,
	"ebs_iops" integer,
	"ebs_kms_key_id" text,
	"ebs_outpost_arn" text,
	"ebs_snapshot_id" text,
	"ebs_throughput" integer,
	"ebs_volume_size" integer,
	"ebs_volume_type" text,
	"no_device" text,
	"virtual_name" text,
	CONSTRAINT aws_ec2_image_block_device_mappings_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (image_cq_id) REFERENCES aws_ec2_images(cq_id) ON DELETE CASCADE
);

-- Resource: ec2.instances
CREATE TABLE IF NOT EXISTS "aws_ec2_instances" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"state_transition_reason_time" timestamp without time zone,
	"ami_launch_index" integer,
	"architecture" text,
	"boot_mode" text,
	"capacity_reservation_id" text,
	"cap_reservation_preference" text,
	"cap_reservation_target_capacity_reservation_id" text,
	"cap_reservation_target_capacity_reservation_rg_arn" text,
	"client_token" text,
	"cpu_options_core_count" integer,
	"cpu_options_threads_per_core" integer,
	"ebs_optimized" boolean,
	"ena_support" boolean,
	"enclave_options_enabled" boolean,
	"hibernation_options_configured" boolean,
	"hypervisor" text,
	"iam_instance_profile_arn" text,
	"iam_instance_profile_id" text,
	"image_id" text,
	"id" text,
	"instance_lifecycle" text,
	"instance_type" text,
	"kernel_id" text,
	"key_name" text,
	"launch_time" timestamp without time zone,
	"licenses" text[],
	"metadata_options_http_endpoint" text,
	"metadata_options_http_protocol_ipv6" text,
	"metadata_options_http_put_response_hop_limit" integer,
	"metadata_options_http_tokens" text,
	"metadata_options_state" text,
	"monitoring_state" text,
	"outpost_arn" text,
	"placement_affinity" text,
	"placement_availability_zone" text,
	"placement_group_name" text,
	"placement_host_id" text,
	"placement_host_resource_group_arn" text,
	"placement_partition_number" integer,
	"placement_spread_domain" text,
	"placement_tenancy" text,
	"platform" text,
	"private_dns_name" text,
	"private_ip_address" text,
	"public_dns_name" text,
	"public_ip_address" text,
	"ramdisk_id" text,
	"root_device_name" text,
	"root_device_type" text,
	"source_dest_check" boolean,
	"spot_instance_request_id" text,
	"sriov_net_support" text,
	"state_code" integer,
	"state_name" text,
	"state_reason_code" text,
	"state_reason_message" text,
	"state_transition_reason" text,
	"subnet_id" text,
	"tags" jsonb,
	"virtualization_type" text,
	"vpc_id" text,
	CONSTRAINT aws_ec2_instances_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_ec2_instance_block_device_mappings" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"instance_cq_id" uuid,
	"device_name" text,
	"ebs_attach_time" timestamp without time zone,
	"ebs_delete_on_termination" boolean,
	"ebs_status" text,
	"ebs_volume_id" text,
	CONSTRAINT aws_ec2_instance_block_device_mappings_pk PRIMARY KEY(instance_cq_id,ebs_volume_id),
	UNIQUE(cq_id),
	FOREIGN KEY (instance_cq_id) REFERENCES aws_ec2_instances(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ec2_instance_elastic_gpu_associations" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"instance_cq_id" uuid,
	"elastic_gpu_association_id" text,
	"elastic_gpu_association_state" text,
	"elastic_gpu_association_time" text,
	"elastic_gpu_id" text,
	CONSTRAINT aws_ec2_instance_elastic_gpu_associations_pk PRIMARY KEY(instance_cq_id,elastic_gpu_association_id),
	UNIQUE(cq_id),
	FOREIGN KEY (instance_cq_id) REFERENCES aws_ec2_instances(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ec2_instance_elastic_inference_accelerator_associations" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"instance_cq_id" uuid,
	"elastic_inference_accelerator_arn" text,
	"elastic_inference_accelerator_association_id" text,
	"elastic_inference_accelerator_association_state" text,
	"elastic_inference_accelerator_association_time" timestamp without time zone,
	CONSTRAINT aws_ec2_instance_elastic_inference_accelerator_associations_pk PRIMARY KEY(instance_cq_id,elastic_inference_accelerator_association_id),
	UNIQUE(cq_id),
	FOREIGN KEY (instance_cq_id) REFERENCES aws_ec2_instances(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ec2_instance_network_interfaces" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"instance_cq_id" uuid,
	"arn" text,
	"association_carrier_ip" text,
	"association_ip_owner_id" text,
	"association_public_dns_name" text,
	"association_public_ip" text,
	"attachment_attach_time" timestamp without time zone,
	"attachment_id" text,
	"attachment_delete_on_termination" boolean,
	"attachment_device_index" integer,
	"attachment_network_card_index" integer,
	"attachment_status" text,
	"description" text,
	"interface_type" text,
	"ipv4_prefixes" text[],
	"ipv6_prefixes" text[],
	"mac_address" text,
	"network_interface_id" text,
	"owner_id" text,
	"private_dns_name" text,
	"private_ip_address" text,
	"source_dest_check" boolean,
	"status" text,
	"subnet_id" text,
	"vpc_id" text,
	CONSTRAINT aws_ec2_instance_network_interfaces_pk PRIMARY KEY(instance_cq_id,network_interface_id),
	UNIQUE(cq_id),
	FOREIGN KEY (instance_cq_id) REFERENCES aws_ec2_instances(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ec2_instance_network_interface_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"instance_network_interface_cq_id" uuid,
	"network_interface_id" text,
	"group_id" text,
	"group_name" text,
	CONSTRAINT aws_ec2_instance_network_interface_groups_pk PRIMARY KEY(instance_network_interface_cq_id,group_id),
	UNIQUE(cq_id),
	FOREIGN KEY (instance_network_interface_cq_id) REFERENCES aws_ec2_instance_network_interfaces(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ec2_instance_network_interface_ipv6_addresses" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"instance_network_interface_cq_id" uuid,
	"ipv6_address" text,
	CONSTRAINT aws_ec2_instance_network_interface_ipv6_addresses_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (instance_network_interface_cq_id) REFERENCES aws_ec2_instance_network_interfaces(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ec2_instance_network_interface_private_ip_addresses" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"instance_network_interface_cq_id" uuid,
	"association_carrier_ip" text,
	"association_ip_owner_id" text,
	"association_public_dns_name" text,
	"association_public_ip" text,
	"is_primary" boolean,
	"private_dns_name" text,
	"private_ip_address" text,
	CONSTRAINT aws_ec2_instance_network_interface_private_ip_addresses_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (instance_network_interface_cq_id) REFERENCES aws_ec2_instance_network_interfaces(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ec2_instance_product_codes" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"instance_cq_id" uuid,
	"product_code_id" text,
	"product_code_type" text,
	CONSTRAINT aws_ec2_instance_product_codes_pk PRIMARY KEY(instance_cq_id,product_code_id),
	UNIQUE(cq_id),
	FOREIGN KEY (instance_cq_id) REFERENCES aws_ec2_instances(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ec2_instance_security_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"instance_cq_id" uuid,
	"group_id" text,
	"group_name" text,
	CONSTRAINT aws_ec2_instance_security_groups_pk PRIMARY KEY(instance_cq_id,group_id),
	UNIQUE(cq_id),
	FOREIGN KEY (instance_cq_id) REFERENCES aws_ec2_instances(cq_id) ON DELETE CASCADE
);

-- Resource: ec2.internet_gateways
CREATE TABLE IF NOT EXISTS "aws_ec2_internet_gateways" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"id" text,
	"owner_id" text,
	"tags" jsonb,
	CONSTRAINT aws_ec2_internet_gateways_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_ec2_internet_gateway_attachments" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"internet_gateway_cq_id" uuid,
	"state" text,
	"vpc_id" text,
	CONSTRAINT aws_ec2_internet_gateway_attachments_pk PRIMARY KEY(internet_gateway_cq_id,vpc_id),
	UNIQUE(cq_id),
	FOREIGN KEY (internet_gateway_cq_id) REFERENCES aws_ec2_internet_gateways(cq_id) ON DELETE CASCADE
);

-- Resource: ec2.nat_gateways
CREATE TABLE IF NOT EXISTS "aws_ec2_nat_gateways" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"id" text,
	"create_time" timestamp without time zone,
	"delete_time" timestamp without time zone,
	"failure_code" text,
	"failure_message" text,
	"provisioned_bandwidth_provision_time" timestamp without time zone,
	"provisioned_bandwidth_provisioned" text,
	"provisioned_bandwidth_request_time" timestamp without time zone,
	"provisioned_bandwidth_requested" text,
	"provisioned_bandwidth_status" text,
	"state" text,
	"subnet_id" text,
	"tags" jsonb,
	"vpc_id" text,
	CONSTRAINT aws_ec2_nat_gateways_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_ec2_nat_gateway_addresses" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"nat_gateway_cq_id" uuid,
	"allocation_id" text,
	"network_interface_id" text,
	"private_ip" text,
	"public_ip" text,
	CONSTRAINT aws_ec2_nat_gateway_addresses_pk PRIMARY KEY(nat_gateway_cq_id,allocation_id,network_interface_id),
	UNIQUE(cq_id),
	FOREIGN KEY (nat_gateway_cq_id) REFERENCES aws_ec2_nat_gateways(cq_id) ON DELETE CASCADE
);

-- Resource: ec2.network_acls
CREATE TABLE IF NOT EXISTS "aws_ec2_network_acls" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"is_default" boolean,
	"id" text,
	"owner_id" text,
	"tags" jsonb,
	"vpc_id" text,
	CONSTRAINT aws_ec2_network_acls_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_ec2_network_acl_associations" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"network_acl_cq_id" uuid,
	"network_acl_association_id" text,
	"subnet_id" text,
	CONSTRAINT aws_ec2_network_acl_associations_pk PRIMARY KEY(network_acl_cq_id,network_acl_association_id),
	UNIQUE(cq_id),
	FOREIGN KEY (network_acl_cq_id) REFERENCES aws_ec2_network_acls(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ec2_network_acl_entries" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"network_acl_cq_id" uuid,
	"cidr_block" text,
	"egress" boolean,
	"icmp_type_code" integer,
	"icmp_type_code_type" integer,
	"ipv6_cidr_block" text,
	"port_range_from" integer,
	"port_range_to" integer,
	"protocol" text,
	"rule_action" text,
	"rule_number" integer,
	CONSTRAINT aws_ec2_network_acl_entries_pk PRIMARY KEY(network_acl_cq_id,egress,rule_number),
	UNIQUE(cq_id),
	FOREIGN KEY (network_acl_cq_id) REFERENCES aws_ec2_network_acls(cq_id) ON DELETE CASCADE
);

-- Resource: ec2.regional_config
CREATE TABLE IF NOT EXISTS "aws_ec2_regional_config" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"ebs_encryption_enabled_by_default" boolean,
	"ebs_default_kms_key_id" text,
	CONSTRAINT aws_ec2_regional_config_pk PRIMARY KEY(account_id,region),
	UNIQUE(cq_id)
);

-- Resource: ec2.route_tables
CREATE TABLE IF NOT EXISTS "aws_ec2_route_tables" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"owner_id" text,
	"id" text,
	"tags" jsonb,
	"vpc_id" text,
	CONSTRAINT aws_ec2_route_tables_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_ec2_route_table_associations" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"route_table_cq_id" uuid,
	"id" text,
	"association_state" text,
	"association_state_status_message" text,
	"gateway_id" text,
	"main" boolean,
	"subnet_id" text,
	CONSTRAINT aws_ec2_route_table_associations_pk PRIMARY KEY(route_table_cq_id,id),
	UNIQUE(cq_id),
	FOREIGN KEY (route_table_cq_id) REFERENCES aws_ec2_route_tables(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ec2_route_table_propagating_vgws" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"route_table_cq_id" uuid,
	"gateway_id" text,
	CONSTRAINT aws_ec2_route_table_propagating_vgws_pk PRIMARY KEY(route_table_cq_id,gateway_id),
	UNIQUE(cq_id),
	FOREIGN KEY (route_table_cq_id) REFERENCES aws_ec2_route_tables(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ec2_route_table_routes" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"route_table_cq_id" uuid,
	"carrier_gateway_id" text,
	"destination_cidr_block" text,
	"destination_ipv6_cidr_block" text,
	"destination_prefix_list_id" text,
	"egress_only_internet_gateway_id" text,
	"gateway_id" text,
	"instance_id" text,
	"instance_owner_id" text,
	"local_gateway_id" text,
	"nat_gateway_id" text,
	"network_interface_id" text,
	"origin" text,
	"state" text,
	"transit_gateway_id" text,
	"vpc_peering_connection_id" text,
	CONSTRAINT aws_ec2_route_table_routes_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (route_table_cq_id) REFERENCES aws_ec2_route_tables(cq_id) ON DELETE CASCADE
);

-- Resource: ec2.security_groups
CREATE TABLE IF NOT EXISTS "aws_ec2_security_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"description" text,
	"id" text,
	"group_name" text,
	"owner_id" text,
	"tags" jsonb,
	"vpc_id" text,
	CONSTRAINT aws_ec2_security_groups_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_ec2_security_group_ip_permissions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"security_group_cq_id" uuid,
	"from_port" integer,
	"ip_protocol" text,
	"to_port" integer,
	"permission_type" text,
	CONSTRAINT aws_ec2_security_group_ip_permissions_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (security_group_cq_id) REFERENCES aws_ec2_security_groups(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ec2_security_group_ip_permission_ip_ranges" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"security_group_ip_permission_cq_id" uuid,
	"cidr" text,
	"description" text,
	"cidr_type" text,
	CONSTRAINT aws_ec2_security_group_ip_permission_ip_ranges_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (security_group_ip_permission_cq_id) REFERENCES aws_ec2_security_group_ip_permissions(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ec2_security_group_ip_permission_prefix_list_ids" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"security_group_ip_permission_cq_id" uuid,
	"description" text,
	"prefix_list_id" text,
	CONSTRAINT aws_ec2_security_group_ip_permission_prefix_list_ids_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (security_group_ip_permission_cq_id) REFERENCES aws_ec2_security_group_ip_permissions(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ec2_security_group_ip_permission_user_id_group_pairs" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"security_group_ip_permission_cq_id" uuid,
	"description" text,
	"group_id" text,
	"group_name" text,
	"peering_status" text,
	"user_id" text,
	"vpc_id" text,
	"vpc_peering_connection_id" text,
	CONSTRAINT aws_ec2_security_group_ip_permission_user_id_group_pairs_pk PRIMARY KEY(security_group_ip_permission_cq_id,group_id,user_id),
	UNIQUE(cq_id),
	FOREIGN KEY (security_group_ip_permission_cq_id) REFERENCES aws_ec2_security_group_ip_permissions(cq_id) ON DELETE CASCADE
);

-- Resource: ec2.subnets
CREATE TABLE IF NOT EXISTS "aws_ec2_subnets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"assign_ipv6_address_on_creation" boolean,
	"availability_zone" text,
	"availability_zone_id" text,
	"available_ip_address_count" integer,
	"cidr_block" text,
	"customer_owned_ipv4_pool" text,
	"default_for_az" boolean,
	"map_customer_owned_ip_on_launch" boolean,
	"map_public_ip_on_launch" boolean,
	"outpost_arn" text,
	"owner_id" text,
	"state" text,
	"arn" text,
	"id" text,
	"tags" jsonb,
	"vpc_id" text,
	CONSTRAINT aws_ec2_subnets_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_ec2_subnet_ipv6_cidr_block_association_sets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"subnet_cq_id" uuid,
	"association_id" text,
	"ipv6_cidr_block" text,
	"ipv6_cidr_block_state" text,
	"ipv6_cidr_block_state_status_message" text,
	CONSTRAINT aws_ec2_subnet_ipv6_cidr_block_association_sets_pk PRIMARY KEY(subnet_cq_id,ipv6_cidr_block),
	UNIQUE(cq_id),
	FOREIGN KEY (subnet_cq_id) REFERENCES aws_ec2_subnets(cq_id) ON DELETE CASCADE
);

-- Resource: ec2.transit_gateways
CREATE TABLE IF NOT EXISTS "aws_ec2_transit_gateways" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"amazon_side_asn" bigint,
	"association_default_route_table_id" text,
	"auto_accept_shared_attachments" text,
	"creation_time" timestamp without time zone,
	"default_route_table_association" text,
	"default_route_table_propagation" text,
	"description" text,
	"dns_support" text,
	"multicast_support" text,
	"owner_id" text,
	"propagation_default_route_table_id" text,
	"state" text,
	"tags" jsonb,
	"arn" text,
	"transit_gateway_cidr_blocks" text[],
	"id" text,
	"vpn_ecmp_support" text,
	CONSTRAINT aws_ec2_transit_gateways_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_ec2_transit_gateway_attachments" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"transit_gateway_cq_id" uuid,
	"association_state" text,
	"association_route_table_id" text,
	"creation_time" timestamp without time zone,
	"resource_id" text,
	"resource_owner_id" text,
	"resource_type" text,
	"state" text,
	"tags" jsonb,
	"transit_gateway_owner_id" text,
	CONSTRAINT aws_ec2_transit_gateway_attachments_pk PRIMARY KEY(transit_gateway_cq_id,resource_id),
	UNIQUE(cq_id),
	FOREIGN KEY (transit_gateway_cq_id) REFERENCES aws_ec2_transit_gateways(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ec2_transit_gateway_route_tables" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"transit_gateway_cq_id" uuid,
	"creation_time" timestamp without time zone,
	"default_association_route_table" boolean,
	"default_propagation_route_table" boolean,
	"state" text,
	"tags" jsonb,
	"transit_gateway_route_table_id" text,
	CONSTRAINT aws_ec2_transit_gateway_route_tables_pk PRIMARY KEY(transit_gateway_cq_id,transit_gateway_route_table_id),
	UNIQUE(cq_id),
	FOREIGN KEY (transit_gateway_cq_id) REFERENCES aws_ec2_transit_gateways(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ec2_transit_gateway_vpc_attachments" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"transit_gateway_cq_id" uuid,
	"creation_time" timestamp without time zone,
	"appliance_mode_support" text,
	"dns_support" text,
	"ipv6_support" text,
	"state" text,
	"tags" jsonb,
	"transit_gateway_attachment_id" text,
	"vpc_id" text,
	"vpc_owner_id" text,
	CONSTRAINT aws_ec2_transit_gateway_vpc_attachments_pk PRIMARY KEY(transit_gateway_cq_id,vpc_id),
	UNIQUE(cq_id),
	FOREIGN KEY (transit_gateway_cq_id) REFERENCES aws_ec2_transit_gateways(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ec2_transit_gateway_peering_attachments" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"transit_gateway_cq_id" uuid,
	"accepter_owner_id" text,
	"accepter_region" text,
	"accepter_transit_gateway_id" text,
	"creation_time" timestamp without time zone,
	"requester_owner_id" text,
	"requester_region" text,
	"requester_transit_gateway_id" text,
	"state" text,
	"status_code" text,
	"status_message" text,
	"tags" jsonb,
	"transit_gateway_attachment_id" text,
	CONSTRAINT aws_ec2_transit_gateway_peering_attachments_pk PRIMARY KEY(transit_gateway_cq_id,transit_gateway_attachment_id),
	UNIQUE(cq_id),
	FOREIGN KEY (transit_gateway_cq_id) REFERENCES aws_ec2_transit_gateways(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ec2_transit_gateway_multicast_domains" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"transit_gateway_cq_id" uuid,
	"creation_time" timestamp without time zone,
	"auto_accept_shared_associations" text,
	"igmpv2_support" text,
	"static_sources_support" text,
	"owner_id" text,
	"state" text,
	"tags" jsonb,
	"transit_gateway_multicast_domain_arn" text,
	"transit_gateway_multicast_domain_id" text,
	CONSTRAINT aws_ec2_transit_gateway_multicast_domains_pk PRIMARY KEY(transit_gateway_cq_id,transit_gateway_multicast_domain_id),
	UNIQUE(cq_id),
	FOREIGN KEY (transit_gateway_cq_id) REFERENCES aws_ec2_transit_gateways(cq_id) ON DELETE CASCADE
);

-- Resource: ec2.vpc_endpoints
CREATE TABLE IF NOT EXISTS "aws_ec2_vpc_endpoints" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"creation_timestamp" timestamp without time zone,
	"last_error_code" text,
	"last_error_message" text,
	"network_interface_ids" text[],
	"owner_id" text,
	"policy_document" text,
	"private_dns_enabled" boolean,
	"requester_managed" boolean,
	"route_table_ids" text[],
	"service_name" text,
	"state" text,
	"subnet_ids" text[],
	"tags" jsonb,
	"id" text,
	"vpc_endpoint_type" text,
	"vpc_id" text,
	CONSTRAINT aws_ec2_vpc_endpoints_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_ec2_vpc_endpoint_dns_entries" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"vpc_endpoint_cq_id" uuid,
	"dns_name" text,
	"hosted_zone_id" text,
	CONSTRAINT aws_ec2_vpc_endpoint_dns_entries_pk PRIMARY KEY(vpc_endpoint_cq_id,dns_name),
	UNIQUE(cq_id),
	FOREIGN KEY (vpc_endpoint_cq_id) REFERENCES aws_ec2_vpc_endpoints(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ec2_vpc_endpoint_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"vpc_endpoint_cq_id" uuid,
	"group_id" text,
	"group_name" text,
	CONSTRAINT aws_ec2_vpc_endpoint_groups_pk PRIMARY KEY(vpc_endpoint_cq_id,group_id),
	UNIQUE(cq_id),
	FOREIGN KEY (vpc_endpoint_cq_id) REFERENCES aws_ec2_vpc_endpoints(cq_id) ON DELETE CASCADE
);

-- Resource: ec2.vpc_peering_connections
CREATE TABLE IF NOT EXISTS "aws_ec2_vpc_peering_connections" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"accepter_cidr_block" text,
	"accepter_cidr_block_set" text[],
	"accepter_ipv6_cidr_block_set" text[],
	"accepter_owner_id" text,
	"accepter_allow_dns_resolution_from_remote_vpc" boolean,
	"accepter_allow_egress_local_classic_link_to_remote_vpc" boolean,
	"accepter_allow_egress_local_vpc_to_remote_classic_link" boolean,
	"accepter_vpc_region" text,
	"accepter_vpc_id" text,
	"expiration_time" timestamp without time zone,
	"requester_cidr_block" text,
	"requester_cidr_block_set" text[],
	"requester_ipv6_cidr_block_set" text[],
	"requester_owner_id" text,
	"requester_allow_dns_resolution_from_remote_vpc" boolean,
	"requester_allow_egress_local_classic_link_to_remote_vpc" boolean,
	"requester_allow_egress_local_vpc_to_remote_classic_link" boolean,
	"requester_vpc_region" text,
	"requester_vpc_id" text,
	"status_code" text,
	"status_message" text,
	"tags" jsonb,
	"id" text,
	CONSTRAINT aws_ec2_vpc_peering_connections_pk PRIMARY KEY(account_id,region,id),
	UNIQUE(cq_id)
);

-- Resource: ec2.vpcs
CREATE TABLE IF NOT EXISTS "aws_ec2_vpcs" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"cidr_block" text,
	"dhcp_options_id" text,
	"instance_tenancy" text,
	"is_default" boolean,
	"owner_id" text,
	"state" text,
	"tags" jsonb,
	"id" text,
	CONSTRAINT aws_ec2_vpcs_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_ec2_vpc_cidr_block_association_sets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"vpc_cq_id" uuid,
	"association_id" text,
	"cidr_block" text,
	"cidr_block_state" text,
	"cidr_block_state_status_message" text,
	CONSTRAINT aws_ec2_vpc_cidr_block_association_sets_pk PRIMARY KEY(vpc_cq_id,association_id),
	UNIQUE(cq_id),
	FOREIGN KEY (vpc_cq_id) REFERENCES aws_ec2_vpcs(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ec2_vpc_ipv6_cidr_block_association_sets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"vpc_cq_id" uuid,
	"association_id" text,
	"ipv6_cidr_block" text,
	"ipv6_cidr_block_state" text,
	"ipv6_cidr_block_state_status_message" text,
	"ipv6_pool" text,
	"network_border_group" text,
	CONSTRAINT aws_ec2_vpc_ipv6_cidr_block_association_sets_pk PRIMARY KEY(vpc_cq_id,association_id),
	UNIQUE(cq_id),
	FOREIGN KEY (vpc_cq_id) REFERENCES aws_ec2_vpcs(cq_id) ON DELETE CASCADE
);

-- Resource: ec2.vpn_gateways
CREATE TABLE IF NOT EXISTS "aws_ec2_vpn_gateways" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"amazon_side_asn" bigint,
	"availability_zone" text,
	"state" text,
	"tags" jsonb,
	"type" text,
	"id" text,
	CONSTRAINT aws_ec2_vpn_gateways_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_ec2_vpc_attachment" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"vpn_gateway_cq_id" uuid,
	"state" text,
	"vpc_id" text,
	CONSTRAINT aws_ec2_vpc_attachment_pk PRIMARY KEY(vpn_gateway_cq_id,vpc_id),
	UNIQUE(cq_id),
	FOREIGN KEY (vpn_gateway_cq_id) REFERENCES aws_ec2_vpn_gateways(cq_id) ON DELETE CASCADE
);

-- Resource: ecr.repositories
CREATE TABLE IF NOT EXISTS "aws_ecr_repositories" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"created_at" timestamp without time zone,
	"encryption_configuration_encryption_type" text,
	"encryption_configuration_kms_key" text,
	"image_scanning_configuration_scan_on_push" boolean,
	"image_tag_mutability" text,
	"registry_id" text,
	"arn" text,
	"name" text,
	"uri" text,
	CONSTRAINT aws_ecr_repositories_pk PRIMARY KEY(account_id,arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_ecr_repository_images" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"repository_cq_id" uuid,
	"account_id" text,
	"region" text,
	"artifact_media_type" text,
	"image_digest" text,
	"image_manifest_media_type" text,
	"image_pushed_at" timestamp without time zone,
	"image_scan_findings_summary_finding_severity_counts" jsonb,
	"image_scan_findings_summary_image_scan_completed_at" timestamp without time zone,
	"image_scan_findings_summary_vulnerability_source_updated_at" timestamp without time zone,
	"image_scan_status_description" text,
	"image_scan_status" text,
	"image_size_in_bytes" bigint,
	"image_tags" text[],
	"registry_id" text,
	"repository_name" text,
	CONSTRAINT aws_ecr_repository_images_pk PRIMARY KEY(repository_cq_id,image_digest),
	UNIQUE(cq_id),
	FOREIGN KEY (repository_cq_id) REFERENCES aws_ecr_repositories(cq_id) ON DELETE CASCADE
);

-- Resource: ecs.clusters
CREATE TABLE IF NOT EXISTS "aws_ecs_clusters" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"active_services_count" integer,
	"attachments_status" text,
	"capacity_providers" text[],
	"arn" text,
	"name" text,
	"execute_config_kms_key_id" text,
	"execute_config_logs_cloud_watch_encryption_enabled" boolean,
	"execute_config_log_cloud_watch_log_group_name" text,
	"execute_config_log_s3_bucket_name" text,
	"execute_config_log_s3_encryption_enabled" boolean,
	"execute_config_log_s3_key_prefix" text,
	"execute_config_logging" text,
	"default_capacity_provider_strategy" jsonb,
	"pending_tasks_count" integer,
	"registered_container_instances_count" integer,
	"running_tasks_count" integer,
	"settings" jsonb,
	"statistics" jsonb,
	"status" text,
	"tags" jsonb,
	CONSTRAINT aws_ecs_clusters_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_ecs_cluster_attachments" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_cq_id" uuid,
	"details" jsonb,
	"id" text,
	"status" text,
	"type" text,
	CONSTRAINT aws_ecs_cluster_attachments_pk PRIMARY KEY(cluster_cq_id,id),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_cq_id) REFERENCES aws_ecs_clusters(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ecs_cluster_services" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_cq_id" uuid,
	"capacity_provider_strategy" jsonb,
	"cluster_arn" text,
	"created_at" timestamp without time zone,
	"created_by" text,
	"deployment_configuration_deployment_circuit_breaker_enable" boolean,
	"deployment_configuration_deployment_circuit_breaker_rollback" boolean,
	"deployment_configuration_maximum_percent" integer,
	"deployment_configuration_minimum_healthy_percent" integer,
	"deployment_controller_type" text,
	"desired_count" integer,
	"enable_ecs_managed_tags" boolean,
	"enable_execute_command" boolean,
	"health_check_grace_period_seconds" integer,
	"launch_type" text,
	"network_configuration_awsvpc_configuration_subnets" text[],
	"network_configuration_awsvpc_configuration_assign_public_ip" text,
	"network_configuration_awsvpc_configuration_security_groups" text[],
	"pending_count" integer,
	"placement_constraints" jsonb,
	"placement_strategy" jsonb,
	"platform_version" text,
	"propagate_tags" text,
	"role_arn" text,
	"running_count" integer,
	"scheduling_strategy" text,
	"arn" text,
	"name" text,
	"status" text,
	"tags" jsonb,
	"task_definition" text,
	CONSTRAINT aws_ecs_cluster_services_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_cq_id) REFERENCES aws_ecs_clusters(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ecs_cluster_service_deployments" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_service_cq_id" uuid,
	"capacity_provider_strategy" jsonb,
	"created_at" timestamp without time zone,
	"desired_count" integer,
	"failed_tasks" integer,
	"id" text,
	"launch_type" text,
	"network_configuration_awsvpc_configuration_subnets" text[],
	"network_configuration_awsvpc_configuration_assign_public_ip" text,
	"network_configuration_awsvpc_configuration_security_groups" text[],
	"pending_count" integer,
	"platform_version" text,
	"rollout_state" text,
	"rollout_state_reason" text,
	"running_count" integer,
	"status" text,
	"task_definition" text,
	"updated_at" timestamp without time zone,
	CONSTRAINT aws_ecs_cluster_service_deployments_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_service_cq_id) REFERENCES aws_ecs_cluster_services(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ecs_cluster_service_events" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_service_cq_id" uuid,
	"created_at" timestamp without time zone,
	"id" text,
	"message" text,
	CONSTRAINT aws_ecs_cluster_service_events_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_service_cq_id) REFERENCES aws_ecs_cluster_services(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ecs_cluster_service_load_balancers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_service_cq_id" uuid,
	"container_name" text,
	"container_port" integer,
	"load_balancer_name" text,
	"target_group_arn" text,
	CONSTRAINT aws_ecs_cluster_service_load_balancers_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_service_cq_id) REFERENCES aws_ecs_cluster_services(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ecs_cluster_service_service_registries" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_service_cq_id" uuid,
	"container_name" text,
	"container_port" integer,
	"port" integer,
	"registry_arn" text,
	CONSTRAINT aws_ecs_cluster_service_service_registries_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_service_cq_id) REFERENCES aws_ecs_cluster_services(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ecs_cluster_service_task_sets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_service_cq_id" uuid,
	"capacity_provider_strategy" jsonb,
	"cluster_arn" text,
	"computed_desired_count" integer,
	"created_at" timestamp without time zone,
	"external_id" text,
	"id" text,
	"launch_type" text,
	"network_configuration_awsvpc_configuration_subnets" text[],
	"network_configuration_awsvpc_configuration_assign_public_ip" text,
	"network_configuration_awsvpc_configuration_security_groups" text[],
	"pending_count" integer,
	"platform_version" text,
	"running_count" integer,
	"scale_unit" text,
	"scale_value" float,
	"service_arn" text,
	"stability_status" text,
	"stability_status_at" timestamp without time zone,
	"started_by" text,
	"status" text,
	"tags" jsonb,
	"task_definition" text,
	"arn" text,
	"updated_at" timestamp without time zone,
	CONSTRAINT aws_ecs_cluster_service_task_sets_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_service_cq_id) REFERENCES aws_ecs_cluster_services(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ecs_cluster_service_task_set_load_balancers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_service_task_set_cq_id" uuid,
	"container_name" text,
	"container_port" integer,
	"load_balancer_name" text,
	"target_group_arn" text,
	CONSTRAINT aws_ecs_cluster_service_task_set_load_balancers_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_service_task_set_cq_id) REFERENCES aws_ecs_cluster_service_task_sets(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ecs_cluster_service_task_set_service_registries" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_service_task_set_cq_id" uuid,
	"container_name" text,
	"container_port" integer,
	"port" integer,
	"arn" text,
	CONSTRAINT aws_ecs_cluster_service_task_set_service_registries_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_service_task_set_cq_id) REFERENCES aws_ecs_cluster_service_task_sets(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ecs_cluster_container_instances" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_cq_id" uuid,
	"agent_connected" boolean,
	"agent_update_status" text,
	"capacity_provider_name" text,
	"container_instance_arn" text,
	"ec2_instance_id" text,
	"pending_tasks_count" integer,
	"registered_at" timestamp without time zone,
	"running_tasks_count" integer,
	"status" text,
	"status_reason" text,
	"tags" jsonb,
	"version" bigint,
	"version_info_agent_hash" text,
	"version_info_agent_version" text,
	"version_info_docker_version" text,
	CONSTRAINT aws_ecs_cluster_container_instances_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_cq_id) REFERENCES aws_ecs_clusters(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ecs_cluster_container_instance_attachments" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_container_instance_cq_id" uuid,
	"details" jsonb,
	"id" text,
	"status" text,
	"type" text,
	CONSTRAINT aws_ecs_cluster_container_instance_attachments_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_container_instance_cq_id) REFERENCES aws_ecs_cluster_container_instances(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ecs_cluster_container_instance_attributes" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_container_instance_cq_id" uuid,
	"name" text,
	"target_id" text,
	"target_type" text,
	"value" text,
	CONSTRAINT aws_ecs_cluster_container_instance_attributes_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_container_instance_cq_id) REFERENCES aws_ecs_cluster_container_instances(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ecs_cluster_container_instance_registered_resources" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_container_instance_cq_id" uuid,
	"double_value" float,
	"integer_value" integer,
	"long_value" bigint,
	"name" text,
	"string_set_value" text[],
	"type" text,
	CONSTRAINT aws_ecs_cluster_container_instance_registered_resources_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_container_instance_cq_id) REFERENCES aws_ecs_cluster_container_instances(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ecs_cluster_container_instance_remaining_resources" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_container_instance_cq_id" uuid,
	"double_value" float,
	"integer_value" integer,
	"long_value" bigint,
	"name" text,
	"string_set_value" text[],
	"type" text,
	CONSTRAINT aws_ecs_cluster_container_instance_remaining_resources_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_container_instance_cq_id) REFERENCES aws_ecs_cluster_container_instances(cq_id) ON DELETE CASCADE
);

-- Resource: ecs.task_definitions
CREATE TABLE IF NOT EXISTS "aws_ecs_task_definitions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"tags" jsonb,
	"compatibilities" text[],
	"cpu" text,
	"deregistered_at" timestamp without time zone,
	"execution_role_arn" text,
	"family" text,
	"inference_accelerators" jsonb,
	"ipc_mode" text,
	"memory" text,
	"network_mode" text,
	"pid_mode" text,
	"placement_constraints" jsonb,
	"proxy_configuration_container_name" text,
	"proxy_configuration_properties" jsonb,
	"proxy_configuration_type" text,
	"registered_at" timestamp without time zone,
	"registered_by" text,
	"requires_attributes" jsonb,
	"requires_compatibilities" text[],
	"revision" integer,
	"status" text,
	"arn" text,
	"task_role_arn" text,
	CONSTRAINT aws_ecs_task_definitions_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_ecs_task_definition_container_definitions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"task_definition_cq_id" uuid,
	"command" text[],
	"cpu" integer,
	"depends_on" jsonb,
	"disable_networking" boolean,
	"dns_search_domains" text[],
	"dns_servers" text[],
	"docker_labels" jsonb,
	"docker_security_options" text[],
	"entry_point" text[],
	"environment" jsonb,
	"environment_files" jsonb,
	"essential" boolean,
	"extra_hosts" jsonb,
	"firelens_configuration_type" text,
	"firelens_configuration_options" jsonb,
	"health_check_command" text[],
	"health_check_interval" integer,
	"health_check_retries" integer,
	"health_check_start_period" integer,
	"health_check_timeout" integer,
	"hostname" text,
	"image" text,
	"interactive" boolean,
	"links" text[],
	"linux_parameters_capabilities_add" text[],
	"linux_parameters_capabilities_drop" text[],
	"linux_parameters_devices" jsonb,
	"linux_parameters_init_process_enabled" boolean,
	"linux_parameters_max_swap" integer,
	"linux_parameters_shared_memory_size" integer,
	"linux_parameters_swappiness" integer,
	"linux_parameters_tmpfs" jsonb,
	"log_configuration_log_driver" text,
	"log_configuration_options" jsonb,
	"log_configuration_secret_options" jsonb,
	"memory" integer,
	"memory_reservation" integer,
	"mount_points" jsonb,
	"name" text,
	"port_mappings" jsonb,
	"privileged" boolean,
	"pseudo_terminal" boolean,
	"readonly_root_filesystem" boolean,
	"repository_credentials_parameter" text,
	"resource_requirements" jsonb,
	"secrets" jsonb,
	"start_timeout" integer,
	"stop_timeout" integer,
	"system_controls" jsonb,
	"ulimits" jsonb,
	"user" text,
	"volumes_from" jsonb,
	"working_directory" text,
	CONSTRAINT aws_ecs_task_definition_container_definitions_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (task_definition_cq_id) REFERENCES aws_ecs_task_definitions(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_ecs_task_definition_volumes" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"task_definition_cq_id" uuid,
	"docker_autoprovision" boolean,
	"docker_driver" text,
	"docker_driver_opts" jsonb,
	"docker_labels" jsonb,
	"docker_scope" text,
	"efs_file_system_id" text,
	"efs_authorization_config_access_point_id" text,
	"efs_authorization_config_iam" text,
	"efs_root_directory" text,
	"efs_volume_configuration_transit_encryption" text,
	"efs_transit_encryption_port" integer,
	"fsx_wfs_authorization_config_credentials_parameter" text,
	"fsx_wfs_authorization_config_domain" text,
	"fsx_wfs_file_system_id" text,
	"fsx_wfs_root_directory" text,
	"host_source_path" text,
	"name" text,
	CONSTRAINT aws_ecs_task_definition_volumes_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (task_definition_cq_id) REFERENCES aws_ecs_task_definitions(cq_id) ON DELETE CASCADE
);

-- Resource: efs.filesystems
CREATE TABLE IF NOT EXISTS "aws_efs_filesystems" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"creation_time" timestamp without time zone,
	"creation_token" text,
	"id" text,
	"life_cycle_state" text,
	"number_of_mount_targets" integer,
	"owner_id" text,
	"performance_mode" text,
	"size_in_bytes_value" bigint,
	"size_in_bytes_timestamp" timestamp without time zone,
	"size_in_bytes_value_in_ia" bigint,
	"size_in_bytes_value_in_standard" bigint,
	"tags" jsonb,
	"availability_zone_id" text,
	"availability_zone_name" text,
	"encrypted" boolean,
	"arn" text,
	"kms_key_id" text,
	"name" text,
	"provisioned_throughput_in_mibps" float,
	"throughput_mode" text,
	CONSTRAINT aws_efs_filesystems_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);

-- Resource: eks.clusters
CREATE TABLE IF NOT EXISTS "aws_eks_clusters" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"certificate_authority_data" text,
	"client_request_token" text,
	"created_at" timestamp without time zone,
	"endpoint" text,
	"identity_oidc_issuer" text,
	"kubernetes_network_config_service_ipv4_cidr" text,
	"name" text,
	"platform_version" text,
	"resources_vpc_config_cluster_security_group_id" text,
	"resources_vpc_config_endpoint_private_access" boolean,
	"resources_vpc_config_endpoint_public_access" boolean,
	"resources_vpc_config_public_access_cidrs" text[],
	"resources_vpc_config_security_group_ids" text[],
	"resources_vpc_config_subnet_ids" text[],
	"resources_vpc_config_vpc_id" text,
	"role_arn" text,
	"status" text,
	"tags" jsonb,
	"version" text,
	CONSTRAINT aws_eks_clusters_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_eks_cluster_encryption_configs" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_cq_id" uuid,
	"provider_key_arn" text,
	"resources" text[],
	CONSTRAINT aws_eks_cluster_encryption_configs_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_cq_id) REFERENCES aws_eks_clusters(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_eks_cluster_loggings" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_cq_id" uuid,
	"enabled" boolean,
	"types" text[],
	CONSTRAINT aws_eks_cluster_loggings_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_cq_id) REFERENCES aws_eks_clusters(cq_id) ON DELETE CASCADE
);

-- Resource: elasticbeanstalk.applications
CREATE TABLE IF NOT EXISTS "aws_elasticbeanstalk_applications" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"name" text,
	"configuration_templates" text[],
	"date_created" timestamp without time zone,
	"date_updated" timestamp without time zone,
	"description" text,
	"resource_lifecycle_config_service_role" text,
	"max_age_rule_enabled" boolean,
	"max_age_rule_delete_source_from_s3" boolean,
	"max_age_rule_max_age_in_days" integer,
	"max_count_rule_enabled" boolean,
	"max_count_rule_delete_source_from_s3" boolean,
	"max_count_rule_max_count" integer,
	"versions" text[],
	CONSTRAINT aws_elasticbeanstalk_applications_pk PRIMARY KEY(arn,date_created),
	UNIQUE(cq_id)
);

-- Resource: elasticbeanstalk.environments
CREATE TABLE IF NOT EXISTS "aws_elasticbeanstalk_environments" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"tags" jsonb,
	"abortable_operation_in_progress" boolean,
	"application_name" text,
	"cname" text,
	"date_created" timestamp without time zone,
	"date_updated" timestamp without time zone,
	"description" text,
	"endpoint_url" text,
	"arn" text,
	"id" text,
	"name" text,
	"health" text,
	"health_status" text,
	"operations_role" text,
	"platform_arn" text,
	"load_balancer_domain" text,
	"listeners" jsonb,
	"load_balancer_name" text,
	"solution_stack_name" text,
	"status" text,
	"template_name" text,
	"tier_name" text,
	"tier_type" text,
	"tier_version" text,
	"version_label" text,
	CONSTRAINT aws_elasticbeanstalk_environments_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_elasticbeanstalk_configuration_settings" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"environment_cq_id" uuid,
	"application_name" text,
	"application_arn" text,
	"date_created" timestamp without time zone,
	"date_updated" timestamp without time zone,
	"deployment_status" text,
	"description" text,
	"environment_name" text,
	"platform_arn" text,
	"solution_stack_name" text,
	"template_name" text,
	CONSTRAINT aws_elasticbeanstalk_configuration_settings_pk PRIMARY KEY(environment_cq_id,application_arn),
	UNIQUE(cq_id),
	FOREIGN KEY (environment_cq_id) REFERENCES aws_elasticbeanstalk_environments(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_elasticbeanstalk_configuration_setting_options" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"configuration_setting_cq_id" uuid,
	"namespace" text,
	"option_name" text,
	"resource_name" text,
	"value" text,
	CONSTRAINT aws_elasticbeanstalk_configuration_setting_options_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (configuration_setting_cq_id) REFERENCES aws_elasticbeanstalk_configuration_settings(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_elasticbeanstalk_configuration_options" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"environment_cq_id" uuid,
	"application_arn" text,
	"name" text,
	"namespace" text,
	"change_severity" text,
	"default_value" text,
	"max_length" integer,
	"max_value" integer,
	"min_value" integer,
	"regex_label" text,
	"regex_pattern" text,
	"user_defined" boolean,
	"value_options" text[],
	"value_type" text,
	CONSTRAINT aws_elasticbeanstalk_configuration_options_pk PRIMARY KEY(environment_cq_id,application_arn,name,namespace),
	UNIQUE(cq_id),
	FOREIGN KEY (environment_cq_id) REFERENCES aws_elasticbeanstalk_environments(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_elasticbeanstalk_environment_links" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"environment_cq_id" uuid,
	"environment_name" text,
	"link_name" text,
	CONSTRAINT aws_elasticbeanstalk_environment_links_pk PRIMARY KEY(environment_cq_id,link_name),
	UNIQUE(cq_id),
	FOREIGN KEY (environment_cq_id) REFERENCES aws_elasticbeanstalk_environments(cq_id) ON DELETE CASCADE
);

-- Resource: elasticsearch.domains
CREATE TABLE IF NOT EXISTS "aws_elasticsearch_domains" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"tags" jsonb,
	"arn" text,
	"id" text,
	"name" text,
	"cluster_cold_storage_options_enabled" boolean,
	"cluster_dedicated_master_count" integer,
	"cluster_dedicated_master_enabled" boolean,
	"cluster_dedicated_master_type" text,
	"cluster_instance_count" integer,
	"cluster_instance_type" text,
	"cluster_warm_count" integer,
	"cluster_warm_enabled" boolean,
	"cluster_warm_type" text,
	"cluster_zone_awareness_config_availability_zone_count" integer,
	"cluster_zone_awareness_enabled" boolean,
	"access_policies" text,
	"advanced_options" jsonb,
	"advanced_security_enabled" boolean,
	"advanced_security_internal_user_database_enabled" boolean,
	"advanced_security_saml_enabled" boolean,
	"advanced_security_saml_idp_entity_id" text,
	"advanced_security_saml_roles_key" text,
	"advanced_security_options_saml_options_roles_key" text,
	"advanced_security_saml_session_timeout_minutes" integer,
	"advanced_security_saml_subject_key" text,
	"auto_tune_error_message" text,
	"auto_tune_options_state" text,
	"cognito_enabled" boolean,
	"cognito_identity_pool_id" text,
	"cognito_role_arn" text,
	"cognito_user_pool_id" text,
	"created" boolean,
	"deleted" boolean,
	"domain_endpoint_custom" text,
	"domain_endpoint_custom_certificate_arn" text,
	"domain_endpoint_custom_enabled" boolean,
	"domain_endpoint_enforce_https" boolean,
	"domain_endpoint_tls_security_policy" text,
	"ebs_enabled" boolean,
	"ebs_iops" integer,
	"ebs_volume_size" integer,
	"ebs_volume_type" text,
	"elasticsearch_version" text,
	"encryption_at_rest_enabled" boolean,
	"encryption_at_rest_kms_key_id" text,
	"endpoint" text,
	"endpoints" jsonb,
	"log_publishing_options" jsonb,
	"node_to_node_encryption_enabled" boolean,
	"processing" boolean,
	"service_software_automated_update_date" timestamp without time zone,
	"service_software_cancellable" boolean,
	"service_software_current_version" text,
	"service_software_description" text,
	"service_software_new_version" text,
	"service_software_optional_deployment" boolean,
	"service_software_update_available" boolean,
	"service_software_update_status" text,
	"snapshot_options_automated_snapshot_start_hour" integer,
	"upgrade_processing" boolean,
	"vpc_availability_zones" text[],
	"vpc_security_group_ids" text[],
	"vpc_subnet_ids" text[],
	"vpc_vpc_id" text,
	CONSTRAINT aws_elasticsearch_domains_pk PRIMARY KEY(account_id,region,id),
	UNIQUE(cq_id)
);

-- Resource: elbv1.load_balancers
CREATE TABLE IF NOT EXISTS "aws_elbv1_load_balancers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"attributes_access_log_enabled" boolean,
	"attributes_access_log_s3_bucket_name" text,
	"attributes_access_log_s3_bucket_prefix" text,
	"attributes_access_log_emit_interval" integer,
	"attributes_connection_settings_idle_timeout" integer,
	"attributes_cross_zone_load_balancing_enabled" boolean,
	"attributes_connection_draining_enabled" boolean,
	"attributes_connection_draining_timeout" integer,
	"attributes_additional_attributes" jsonb,
	"tags" jsonb,
	"availability_zones" text[],
	"canonical_hosted_zone_name" text,
	"canonical_hosted_zone_name_id" text,
	"created_time" timestamp without time zone,
	"dns_name" text,
	"health_check_healthy_threshold" integer,
	"health_check_interval" integer,
	"health_check_target" text,
	"health_check_timeout" integer,
	"health_check_unhealthy_threshold" integer,
	"instances" text[],
	"name" text,
	"other_policies" text[],
	"scheme" text,
	"security_groups" text[],
	"source_security_group_name" text,
	"source_security_group_owner_alias" text,
	"subnets" text[],
	"vpc_id" text,
	CONSTRAINT aws_elbv1_load_balancers_pk PRIMARY KEY(account_id,region,name),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_elbv1_load_balancer_backend_server_descriptions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"load_balancer_cq_id" uuid,
	"name" text,
	"instance_port" integer,
	"policy_names" text[],
	CONSTRAINT aws_elbv1_load_balancer_backend_server_descriptions_pk PRIMARY KEY(load_balancer_cq_id,instance_port),
	UNIQUE(cq_id),
	FOREIGN KEY (load_balancer_cq_id) REFERENCES aws_elbv1_load_balancers(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_elbv1_load_balancer_listeners" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"load_balancer_cq_id" uuid,
	"load_balance_name" text,
	"listener_instance_port" integer,
	"listener_load_balancer_port" integer,
	"listener_protocol" text,
	"listener_instance_protocol" text,
	"listener_ssl_certificate_id" text,
	"policy_names" text[],
	CONSTRAINT aws_elbv1_load_balancer_listeners_pk PRIMARY KEY(load_balancer_cq_id,listener_instance_port,listener_load_balancer_port),
	UNIQUE(cq_id),
	FOREIGN KEY (load_balancer_cq_id) REFERENCES aws_elbv1_load_balancers(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_elbv1_load_balancer_policies_app_cookie_stickiness" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"load_balancer_cq_id" uuid,
	"load_balance_name" text,
	"cookie_name" text,
	"policy_name" text,
	CONSTRAINT aws_elbv1_load_balancer_policies_app_cookie_stickiness_pk PRIMARY KEY(load_balancer_cq_id,cookie_name,policy_name),
	UNIQUE(cq_id),
	FOREIGN KEY (load_balancer_cq_id) REFERENCES aws_elbv1_load_balancers(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_elbv1_load_balancer_policies_lb_cookie_stickiness" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"load_balancer_cq_id" uuid,
	"load_balance_name" text,
	"cookie_expiration_period" bigint,
	"policy_name" text,
	CONSTRAINT aws_elbv1_load_balancer_policies_lb_cookie_stickiness_pk PRIMARY KEY(load_balancer_cq_id,policy_name),
	UNIQUE(cq_id),
	FOREIGN KEY (load_balancer_cq_id) REFERENCES aws_elbv1_load_balancers(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_elbv1_load_balancer_policies" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"load_balancer_cq_id" uuid,
	"load_balance_name" text,
	"policy_attribute_descriptions" jsonb,
	"policy_name" text,
	"policy_type_name" text,
	CONSTRAINT aws_elbv1_load_balancer_policies_pk PRIMARY KEY(load_balancer_cq_id,policy_name),
	UNIQUE(cq_id),
	FOREIGN KEY (load_balancer_cq_id) REFERENCES aws_elbv1_load_balancers(cq_id) ON DELETE CASCADE
);

-- Resource: elbv2.load_balancers
CREATE TABLE IF NOT EXISTS "aws_elbv2_load_balancers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"web_acl_arn" text,
	"tags" jsonb,
	"canonical_hosted_zone_id" text,
	"created_time" timestamp without time zone,
	"customer_owned_ipv4_pool" text,
	"dns_name" text,
	"ip_address_type" text,
	"arn" text,
	"name" text,
	"scheme" text,
	"security_groups" text[],
	"state_code" text,
	"state_reason" text,
	"type" text,
	"vpc_id" text,
	CONSTRAINT aws_elbv2_load_balancers_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_elbv2_listeners" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"load_balancer_cq_id" uuid,
	"tags" jsonb,
	"alpn_policy" text[],
	"arn" text,
	"load_balancer_arn" text,
	"port" integer,
	"protocol" text,
	"ssl_policy" text,
	CONSTRAINT aws_elbv2_listeners_pk PRIMARY KEY(arn),
	UNIQUE(cq_id),
	FOREIGN KEY (load_balancer_cq_id) REFERENCES aws_elbv2_load_balancers(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_elbv2_listener_certificates" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"listener_cq_id" uuid,
	"certificate_arn" text,
	"is_default" boolean,
	CONSTRAINT aws_elbv2_listener_certificates_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (listener_cq_id) REFERENCES aws_elbv2_listeners(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_elbv2_listener_default_actions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"listener_cq_id" uuid,
	"type" text,
	"auth_cognito_user_pool_arn" text,
	"auth_cognito_user_pool_client_id" text,
	"auth_cognito_user_pool_domain" text,
	"auth_cognito_authentication_request_extra_params" jsonb,
	"auth_cognito_on_unauthenticated_request" text,
	"auth_cognito_scope" text,
	"auth_cognito_session_cookie_name" text,
	"auth_cognito_session_timeout" bigint,
	"auth_oidc_authorization_endpoint" text,
	"auth_oidc_client_id" text,
	"auth_oidc_issuer" text,
	"auth_oidc_token_endpoint" text,
	"auth_oidc_user_info_endpoint" text,
	"auth_oidc_authentication_request_extra_params" jsonb,
	"auth_oidc_client_secret" text,
	"auth_oidc_on_unauthenticated_request" text,
	"auth_oidc_scope" text,
	"auth_oidc_session_cookie_name" text,
	"auth_oidc_session_timeout" bigint,
	"auth_oidc_use_existing_client_secret" boolean,
	"fixed_response_config_status_code" text,
	"fixed_response_config_content_type" text,
	"fixed_response_config_message_body" text,
	"forward_config_target_group_stickiness_config_duration_seconds" integer,
	"forward_config_target_group_stickiness_config_enabled" boolean,
	"order" integer,
	"redirect_config_status_code" text,
	"redirect_config_host" text,
	"redirect_config_path" text,
	"redirect_config_port" text,
	"redirect_config_protocol" text,
	"redirect_config_query" text,
	"target_group_arn" text,
	CONSTRAINT aws_elbv2_listener_default_actions_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (listener_cq_id) REFERENCES aws_elbv2_listeners(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_elbv2_listener_default_action_forward_config_target_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"listener_default_action_cq_id" uuid,
	"target_group_arn" text,
	"weight" integer,
	CONSTRAINT aws_elbv2_listener_default_action_forward_config_target_grou_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (listener_default_action_cq_id) REFERENCES aws_elbv2_listener_default_actions(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_elbv2_load_balancer_availability_zones" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"load_balancer_cq_id" uuid,
	"load_balance_name" text,
	"outpost_id" text,
	"subnet_id" text,
	"zone_name" text,
	CONSTRAINT aws_elbv2_load_balancer_availability_zones_pk PRIMARY KEY(load_balancer_cq_id,zone_name),
	UNIQUE(cq_id),
	FOREIGN KEY (load_balancer_cq_id) REFERENCES aws_elbv2_load_balancers(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_elbv2_load_balancer_availability_zone_addresses" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"load_balancer_availability_zone_cq_id" uuid,
	"zone_name" text,
	"allocation_id" text,
	"ipv6_address" text,
	"ip_address" text,
	"private_ipv4_address" text,
	CONSTRAINT aws_elbv2_load_balancer_availability_zone_addresses_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (load_balancer_availability_zone_cq_id) REFERENCES aws_elbv2_load_balancer_availability_zones(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_elbv2_load_balancer_attributes" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"load_balancer_cq_id" uuid,
	"access_logs_s3_enabled" boolean,
	"access_logs_s3_bucket" text,
	"access_logs_s3_prefix" text,
	"deletion_protection" boolean,
	"idle_timeout" integer,
	"routing_http_desync_mitigation_mode" text,
	"routing_http_drop_invalid_header_fields" boolean,
	"routing_http_xamzntls_enabled" boolean,
	"routing_http_xff_client_port" boolean,
	"routing_http2" boolean,
	"waf_fail_open" boolean,
	"load_balancing_cross_zone" boolean,
	CONSTRAINT aws_elbv2_load_balancer_attributes_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (load_balancer_cq_id) REFERENCES aws_elbv2_load_balancers(cq_id) ON DELETE CASCADE
);

-- Resource: elbv2.target_groups
CREATE TABLE IF NOT EXISTS "aws_elbv2_target_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"tags" jsonb,
	"health_check_enabled" boolean,
	"health_check_interval_seconds" integer,
	"health_check_path" text,
	"health_check_port" text,
	"health_check_protocol" text,
	"health_check_timeout_seconds" integer,
	"healthy_threshold_count" integer,
	"load_balancer_arns" text[],
	"matcher_grpc_code" text,
	"matcher_http_code" text,
	"port" integer,
	"protocol" text,
	"protocol_version" text,
	"arn" text,
	"name" text,
	"target_type" text,
	"unhealthy_threshold_count" integer,
	"vpc_id" text,
	CONSTRAINT aws_elbv2_target_groups_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: emr.block_public_access_configs
CREATE TABLE IF NOT EXISTS "aws_emr_block_public_access_configs" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"block_public_security_group_rules" boolean,
	"classification" text,
	"configurations" jsonb,
	"properties" jsonb,
	"created_by_arn" text,
	"creation_date_time" timestamp without time zone,
	CONSTRAINT aws_emr_block_public_access_configs_pk PRIMARY KEY(account_id,region),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_emr_block_public_access_config_port_ranges" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"block_public_access_config_cq_id" uuid,
	"min_range" integer,
	"max_range" integer,
	CONSTRAINT aws_emr_block_public_access_config_port_ranges_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (block_public_access_config_cq_id) REFERENCES aws_emr_block_public_access_configs(cq_id) ON DELETE CASCADE
);

-- Resource: emr.clusters
CREATE TABLE IF NOT EXISTS "aws_emr_clusters" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"applications" jsonb,
	"auto_scaling_role" text,
	"auto_terminate" boolean,
	"arn" text,
	"configurations" jsonb,
	"custom_ami_id" text,
	"ebs_root_volume_size" integer,
	"ec2_instance_attribute_additional_master_security_groups" text[],
	"ec2_instance_attribute_additional_slave_security_groups" text[],
	"ec2_instance_attribute_availability_zone" text,
	"ec2_instance_attribute_key_name" text,
	"ec2_instance_attribute_subnet_id" text,
	"ec2_instance_attribute_emr_managed_master_security_group" text,
	"ec2_instance_attribute_emr_managed_slave_security_group" text,
	"ec2_instance_attribute_iam_instance_profile" text,
	"ec2_instance_attribute_requested_availability_zones" text[],
	"ec2_instance_attribute_requested_subnet_ids" text[],
	"ec2_instance_attribute_service_access_security_group" text,
	"id" text,
	"instance_collection_type" text,
	"kerberos_kdc_admin_password" text,
	"kerberos_realm" text,
	"kerberos_ad_domain_join_password" text,
	"kerberos_ad_domain_join_user" text,
	"kerberos_cross_realm_trust_principal_password" text,
	"log_encryption_kms_key_id" text,
	"log_uri" text,
	"master_public_dns_name" text,
	"name" text,
	"normalized_instance_hours" integer,
	"outpost_arn" text,
	"placement_groups" jsonb,
	"release_label" text,
	"repo_upgrade_on_boot" text,
	"requested_ami_version" text,
	"running_ami_version" text,
	"scale_down_behavior" text,
	"security_configuration" text,
	"service_role" text,
	"state" text,
	"state_change_reason_code" text,
	"state_change_reason_message" text,
	"creation_date_time" timestamp without time zone,
	"end_date_time" timestamp without time zone,
	"ready_date_time" timestamp without time zone,
	"step_concurrency_level" integer,
	"tags" jsonb,
	"termination_protected" boolean,
	"visible_to_all_users" boolean,
	CONSTRAINT aws_emr_clusters_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: fsx.backups
CREATE TABLE IF NOT EXISTS "aws_fsx_backups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"id" text,
	"creation_time" timestamp without time zone,
	"lifecycle" text,
	"type" text,
	"directory_information_active_directory_id" text,
	"directory_information_domain_name" text,
	"failure_details_message" text,
	"kms_key_id" text,
	"progress_percent" integer,
	"arn" text,
	"tags" jsonb,
	CONSTRAINT aws_fsx_backups_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);

-- Resource: guardduty.detectors
CREATE TABLE IF NOT EXISTS "aws_guardduty_detectors" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"id" text,
	"service_role" text,
	"status" text,
	"created_at" timestamp without time zone,
	"data_sources_cloud_trail_status" text,
	"data_sources_dns_logs_status" text,
	"data_sources_flow_logs_status" text,
	"data_sources_s3_logs_status" text,
	"finding_publishing_frequency" text,
	"tags" jsonb,
	"updated_at" timestamp without time zone,
	CONSTRAINT aws_guardduty_detectors_pk PRIMARY KEY(account_id,region,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_guardduty_detector_members" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"detector_cq_id" uuid,
	"account_id" text,
	"email" text,
	"master_id" text,
	"relationship_status" text,
	"updated_at" timestamp without time zone,
	"detector_id" text,
	"invited_at" timestamp without time zone,
	CONSTRAINT aws_guardduty_detector_members_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (detector_cq_id) REFERENCES aws_guardduty_detectors(cq_id) ON DELETE CASCADE
);

-- Resource: iam.accounts
CREATE TABLE IF NOT EXISTS "aws_accounts" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"users" integer,
	"users_quota" integer,
	"groups" integer,
	"groups_quota" integer,
	"server_certificates" integer,
	"server_certificates_quota" integer,
	"user_policy_size_quota" integer,
	"group_policy_size_quota" integer,
	"groups_per_user_quota" integer,
	"signing_certificates_per_user_quota" integer,
	"access_keys_per_user_quota" integer,
	"mfa_devices" integer,
	"mfa_devices_in_use" integer,
	"account_mfa_enabled" boolean,
	"account_access_keys_present" boolean,
	"account_signing_certificates_present" boolean,
	"attached_policies_per_group_quota" integer,
	"policies" integer,
	"policies_quota" integer,
	"policy_size_quota" integer,
	"policy_versions_in_use" integer,
	"policy_versions_in_use_quota" integer,
	"versions_per_policy_quota" integer,
	"global_endpoint_token_version" integer,
	"aliases" text[],
	CONSTRAINT aws_accounts_pk PRIMARY KEY(account_id),
	UNIQUE(cq_id)
);

-- Resource: iam.groups
CREATE TABLE IF NOT EXISTS "aws_iam_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"policies" jsonb,
	"arn" text,
	"create_date" timestamp without time zone,
	"id" text,
	"name" text,
	"path" text,
	CONSTRAINT aws_iam_groups_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_iam_group_policies" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"group_cq_id" uuid,
	"group_id" text,
	"group_name" text,
	"policy_document" jsonb,
	"policy_name" text,
	CONSTRAINT aws_iam_group_policies_pk PRIMARY KEY(group_cq_id,policy_name),
	UNIQUE(cq_id),
	FOREIGN KEY (group_cq_id) REFERENCES aws_iam_groups(cq_id) ON DELETE CASCADE
);

-- Resource: iam.openid_connect_identity_providers
CREATE TABLE IF NOT EXISTS "aws_iam_openid_connect_identity_providers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"arn" text,
	"client_id_list" text[],
	"create_date" timestamp without time zone,
	"tags" jsonb,
	"thumbprint_list" text[],
	"url" text,
	CONSTRAINT aws_iam_openid_connect_identity_providers_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: iam.password_policies
CREATE TABLE IF NOT EXISTS "aws_iam_password_policies" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"allow_users_to_change_password" boolean,
	"expire_passwords" boolean,
	"hard_expiry" boolean,
	"max_password_age" integer,
	"minimum_password_length" integer,
	"password_reuse_prevention" integer,
	"require_lowercase_characters" boolean,
	"require_numbers" boolean,
	"require_symbols" boolean,
	"require_uppercase_characters" boolean,
	"policy_exists" boolean,
	CONSTRAINT aws_iam_password_policies_pk PRIMARY KEY(account_id),
	UNIQUE(cq_id)
);

-- Resource: iam.policies
CREATE TABLE IF NOT EXISTS "aws_iam_policies" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"arn" text,
	"attachment_count" integer,
	"create_date" timestamp without time zone,
	"default_version_id" text,
	"description" text,
	"is_attachable" boolean,
	"path" text,
	"permissions_boundary_usage_count" integer,
	"id" text,
	"name" text,
	"update_date" timestamp without time zone,
	CONSTRAINT aws_iam_policies_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_iam_policy_versions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"policy_cq_id" uuid,
	"policy_id" text,
	"create_date" timestamp without time zone,
	"document" jsonb,
	"is_default_version" boolean,
	"version_id" text,
	CONSTRAINT aws_iam_policy_versions_pk PRIMARY KEY(policy_cq_id,version_id),
	UNIQUE(cq_id),
	FOREIGN KEY (policy_cq_id) REFERENCES aws_iam_policies(cq_id) ON DELETE CASCADE
);

-- Resource: iam.roles
CREATE TABLE IF NOT EXISTS "aws_iam_roles" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"policies" jsonb,
	"arn" text,
	"create_date" timestamp without time zone,
	"path" text,
	"id" text,
	"name" text,
	"assume_role_policy_document" jsonb,
	"description" text,
	"max_session_duration" integer,
	"permissions_boundary_arn" text,
	"permissions_boundary_type" text,
	"role_last_used_last_used_date" timestamp without time zone,
	"role_last_used_region" text,
	"tags" jsonb,
	CONSTRAINT aws_iam_roles_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_iam_role_policies" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"role_cq_id" uuid,
	"role_id" text,
	"account_id" text,
	"policy_document" jsonb,
	"policy_name" text,
	"role_name" text,
	CONSTRAINT aws_iam_role_policies_pk PRIMARY KEY(role_cq_id,policy_name),
	UNIQUE(cq_id),
	FOREIGN KEY (role_cq_id) REFERENCES aws_iam_roles(cq_id) ON DELETE CASCADE
);

-- Resource: iam.saml_identity_providers
CREATE TABLE IF NOT EXISTS "aws_iam_saml_identity_providers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"arn" text,
	"create_date" timestamp without time zone,
	"saml_metadata_document" text,
	"tags" jsonb,
	"valid_until" timestamp without time zone,
	CONSTRAINT aws_iam_saml_identity_providers_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: iam.server_certificates
CREATE TABLE IF NOT EXISTS "aws_iam_server_certificates" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"id" text,
	"arn" text,
	"path" text,
	"name" text,
	"expiration" timestamp without time zone,
	"upload_date" timestamp without time zone,
	CONSTRAINT aws_iam_server_certificates_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);

-- Resource: iam.users
CREATE TABLE IF NOT EXISTS "aws_iam_users" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"id" text,
	"password_last_used" timestamp without time zone,
	"arn" text,
	"password_enabled" boolean,
	"password_status" text,
	"password_last_changed" timestamp without time zone,
	"password_next_rotation" timestamp without time zone,
	"mfa_active" boolean,
	"create_date" timestamp without time zone,
	"path" text,
	"permissions_boundary_arn" text,
	"permissions_boundary_type" text,
	"tags" jsonb,
	"user_id" text,
	"user_name" text,
	"access_key_1_active" boolean,
	"access_key_1_last_rotated" timestamp without time zone,
	"access_key_2_active" boolean,
	"access_key_2_last_rotated" timestamp without time zone,
	"cert_1_active" boolean,
	"cert_1_last_rotated" timestamp without time zone,
	"cert_2_active" boolean,
	"cert_2_last_rotated" timestamp without time zone,
	CONSTRAINT aws_iam_users_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_iam_user_access_keys" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"user_cq_id" uuid,
	"user_id" text,
	"access_key_id" text,
	"create_date" timestamp without time zone,
	"status" text,
	"last_used" timestamp without time zone,
	"last_rotated" timestamp without time zone,
	"last_used_service_name" text,
	CONSTRAINT aws_iam_user_access_keys_pk PRIMARY KEY(user_cq_id,access_key_id),
	UNIQUE(cq_id),
	FOREIGN KEY (user_cq_id) REFERENCES aws_iam_users(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_iam_user_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"user_cq_id" uuid,
	"user_id" text,
	"group_arn" text,
	"create_date" timestamp without time zone,
	"group_id" text,
	"group_name" text,
	"path" text,
	CONSTRAINT aws_iam_user_groups_pk PRIMARY KEY(user_cq_id,group_id),
	UNIQUE(cq_id),
	FOREIGN KEY (user_cq_id) REFERENCES aws_iam_users(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_iam_user_attached_policies" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"user_cq_id" uuid,
	"user_id" text,
	"policy_arn" text,
	"policy_name" text,
	CONSTRAINT aws_iam_user_attached_policies_pk PRIMARY KEY(user_cq_id,policy_name),
	UNIQUE(cq_id),
	FOREIGN KEY (user_cq_id) REFERENCES aws_iam_users(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_iam_user_policies" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"user_cq_id" uuid,
	"account_id" text,
	"user_id" text,
	"policy_document" jsonb,
	"policy_name" text,
	"user_name" text,
	CONSTRAINT aws_iam_user_policies_pk PRIMARY KEY(user_cq_id,policy_name),
	UNIQUE(cq_id),
	FOREIGN KEY (user_cq_id) REFERENCES aws_iam_users(cq_id) ON DELETE CASCADE
);

-- Resource: iam.virtual_mfa_devices
CREATE TABLE IF NOT EXISTS "aws_iam_virtual_mfa_devices" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"serial_number" text,
	"base32_string_seed" bytea,
	"enable_date" timestamp without time zone,
	"qr_code_png" bytea,
	"tags" jsonb,
	"user_arn" text,
	"user_create_date" timestamp without time zone,
	"user_path" text,
	"user_id" text,
	"user_name" text,
	"user_password_last_used" timestamp without time zone,
	"user_permissions_boundary_permissions_boundary_arn" text,
	"user_permissions_boundary_permissions_boundary_type" text,
	"user_tags" jsonb,
	CONSTRAINT aws_iam_virtual_mfa_devices_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id)
);

-- Resource: iot.billing_groups
CREATE TABLE IF NOT EXISTS "aws_iot_billing_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"things_in_group" text[],
	"tags" jsonb,
	"arn" text,
	"id" text,
	"creation_date" timestamp without time zone,
	"name" text,
	"description" text,
	"version" bigint,
	CONSTRAINT aws_iot_billing_groups_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: iot.ca_certificates
CREATE TABLE IF NOT EXISTS "aws_iot_ca_certificates" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"certificates" text[],
	"auto_registration_status" text,
	"arn" text,
	"id" text,
	"pem" text,
	"creation_date" timestamp without time zone,
	"customer_version" integer,
	"generation_id" text,
	"last_modified_date" timestamp without time zone,
	"owned_by" text,
	"status" text,
	"validity_not_after" timestamp without time zone,
	"validity_not_before" timestamp without time zone,
	CONSTRAINT aws_iot_ca_certificates_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: iot.certificates
CREATE TABLE IF NOT EXISTS "aws_iot_certificates" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"policies" text[],
	"ca_certificate_id" text,
	"arn" text,
	"id" text,
	"mode" text,
	"pem" text,
	"creation_date" timestamp without time zone,
	"customer_version" integer,
	"generation_id" text,
	"last_modified_date" timestamp without time zone,
	"owned_by" text,
	"previous_owned_by" text,
	"status" text,
	"transfer_data_accept_date" timestamp without time zone,
	"transfer_data_reject_date" timestamp without time zone,
	"transfer_data_reject_reason" text,
	"transfer_data_transfer_date" timestamp without time zone,
	"transfer_data_transfer_message" text,
	"validity_not_after" timestamp without time zone,
	"validity_not_before" timestamp without time zone,
	CONSTRAINT aws_iot_certificates_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: iot.policies
CREATE TABLE IF NOT EXISTS "aws_iot_policies" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"tags" jsonb,
	"creation_date" timestamp without time zone,
	"default_version_id" text,
	"generation_id" text,
	"last_modified_date" timestamp without time zone,
	"arn" text,
	"document" text,
	"name" text,
	CONSTRAINT aws_iot_policies_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: iot.streams
CREATE TABLE IF NOT EXISTS "aws_iot_streams" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"created_at" timestamp without time zone,
	"description" text,
	"last_updated_at" timestamp without time zone,
	"role_arn" text,
	"arn" text,
	"id" text,
	"version" integer,
	CONSTRAINT aws_iot_streams_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_iot_stream_files" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"stream_cq_id" uuid,
	"file_id" integer,
	"s3_location_bucket" text,
	"s3_location_key" text,
	"s3_location_version" text,
	CONSTRAINT aws_iot_stream_files_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (stream_cq_id) REFERENCES aws_iot_streams(cq_id) ON DELETE CASCADE
);

-- Resource: iot.thing_groups
CREATE TABLE IF NOT EXISTS "aws_iot_thing_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"things_in_group" text[],
	"policies" text[],
	"tags" jsonb,
	"index_name" text,
	"query_string" text,
	"query_version" text,
	"status" text,
	"arn" text,
	"id" text,
	"creation_date" timestamp without time zone,
	"parent_group_name" text,
	"root_to_parent_thing_groups" jsonb,
	"name" text,
	"attribute_payload_attributes" jsonb,
	"attribute_payload_merge" boolean,
	"thing_group_description" text,
	"version" bigint,
	CONSTRAINT aws_iot_thing_groups_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: iot.thing_types
CREATE TABLE IF NOT EXISTS "aws_iot_thing_types" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"tags" jsonb,
	"arn" text,
	"creation_date" timestamp without time zone,
	"deprecated" boolean,
	"deprecation_date" timestamp without time zone,
	"name" text,
	"searchable_attributes" text[],
	"description" text,
	CONSTRAINT aws_iot_thing_types_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: iot.things
CREATE TABLE IF NOT EXISTS "aws_iot_things" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"principals" text[],
	"attributes" jsonb,
	"arn" text,
	"name" text,
	"type_name" text,
	"version" bigint,
	CONSTRAINT aws_iot_things_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: iot.topic_rules
CREATE TABLE IF NOT EXISTS "aws_iot_topic_rules" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"tags" jsonb,
	"aws_iot_sql_version" text,
	"created_at" timestamp without time zone,
	"description" text,
	"error_action_cloudwatch_alarm_name" text,
	"error_action_cloudwatch_alarm_role_arn" text,
	"error_action_cloudwatch_alarm_state_reason" text,
	"error_action_cloudwatch_alarm_state_value" text,
	"error_action_cloudwatch_logs_log_group_name" text,
	"error_action_cloudwatch_logs_role_arn" text,
	"error_action_cloudwatch_metric_metric_name" text,
	"error_action_cloudwatch_metric_metric_namespace" text,
	"error_action_cloudwatch_metric_unit" text,
	"error_action_cloudwatch_metric_value" text,
	"error_action_cloudwatch_metric_role_arn" text,
	"error_action_cloudwatch_metric_timestamp" text,
	"error_action_dynamo_db_hash_key_field" text,
	"error_action_dynamo_db_hash_key_value" text,
	"error_action_dynamo_db_role_arn" text,
	"error_action_dynamo_db_table_name" text,
	"error_action_dynamo_db_hash_key_type" text,
	"error_action_dynamo_db_operation" text,
	"error_action_dynamo_db_payload_field" text,
	"error_action_dynamo_db_range_key_field" text,
	"error_action_dynamo_db_range_key_type" text,
	"error_action_dynamo_db_range_key_value" text,
	"error_action_dynamo_db_v2_put_item_table_name" text,
	"error_action_dynamo_db_v2_role_arn" text,
	"error_action_elasticsearch_endpoint" text,
	"error_action_elasticsearch_id" text,
	"error_action_elasticsearch_index" text,
	"error_action_elasticsearch_role_arn" text,
	"error_action_elasticsearch_type" text,
	"error_action_firehose_delivery_stream_name" text,
	"error_action_firehose_role_arn" text,
	"error_action_firehose_batch_mode" boolean,
	"error_action_firehose_separator" text,
	"error_action_http_url" text,
	"error_action_http_auth_sigv4_role_arn" text,
	"error_action_http_auth_sigv4_service_name" text,
	"error_action_http_auth_sigv4_signing_region" text,
	"error_action_http_confirmation_url" text,
	"error_action_http_headers" jsonb,
	"error_action_iot_analytics_batch_mode" boolean,
	"error_action_iot_analytics_channel_arn" text,
	"error_action_iot_analytics_channel_name" text,
	"error_action_iot_analytics_role_arn" text,
	"error_action_iot_events_input_name" text,
	"error_action_iot_events_role_arn" text,
	"error_action_iot_events_batch_mode" boolean,
	"error_action_iot_events_message_id" text,
	"error_action_iot_site_wise" jsonb,
	"error_action_kafka_client_properties" jsonb,
	"error_action_kafka_destination_arn" text,
	"error_action_kafka_topic" text,
	"error_action_kafka_key" text,
	"error_action_kafka_partition" text,
	"error_action_kinesis_role_arn" text,
	"error_action_kinesis_stream_name" text,
	"error_action_kinesis_partition_key" text,
	"error_action_lambda_function_arn" text,
	"error_action_open_search_endpoint" text,
	"error_action_open_search_id" text,
	"error_action_open_search_index" text,
	"error_action_open_search_role_arn" text,
	"error_action_open_search_type" text,
	"error_action_republish_role_arn" text,
	"error_action_republish_topic" text,
	"error_action_republish_qos" integer,
	"error_action_s3_bucket_name" text,
	"error_action_s3_key" text,
	"error_action_s3_role_arn" text,
	"error_action_s3_canned_acl" text,
	"error_action_salesforce_token" text,
	"error_action_salesforce_url" text,
	"error_action_sns_role_arn" text,
	"error_action_sns_target_arn" text,
	"error_action_sns_message_format" text,
	"error_action_sqs_queue_url" text,
	"error_action_sqs_role_arn" text,
	"error_action_sqs_use_base64" boolean,
	"error_action_step_functions_role_arn" text,
	"error_action_step_functions_state_machine_name" text,
	"error_action_step_functions_execution_name_prefix" text,
	"error_action_timestream_database_name" text,
	"error_action_timestream_dimensions" jsonb,
	"error_action_timestream_role_arn" text,
	"error_action_timestream_table_name" text,
	"error_action_timestream_timestamp_unit" text,
	"error_action_timestream_timestamp_value" text,
	"rule_disabled" boolean,
	"rule_name" text,
	"sql" text,
	"arn" text,
	CONSTRAINT aws_iot_topic_rules_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_iot_topic_rule_actions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"topic_rule_cq_id" uuid,
	"cloudwatch_alarm_alarm_name" text,
	"cloudwatch_alarm_role_arn" text,
	"cloudwatch_alarm_state_reason" text,
	"cloudwatch_alarm_state_value" text,
	"cloudwatch_logs_log_group_name" text,
	"cloudwatch_logs_role_arn" text,
	"cloudwatch_metric_metric_name" text,
	"cloudwatch_metric_metric_namespace" text,
	"cloudwatch_metric_metric_unit" text,
	"cloudwatch_metric_metric_value" text,
	"cloudwatch_metric_role_arn" text,
	"cloudwatch_metric_metric_timestamp" text,
	"dynamo_db_hash_key_field" text,
	"dynamo_db_hash_key_value" text,
	"dynamo_db_role_arn" text,
	"dynamo_db_table_name" text,
	"dynamo_db_hash_key_type" text,
	"dynamo_db_operation" text,
	"dynamo_db_payload_field" text,
	"dynamo_db_range_key_field" text,
	"dynamo_db_range_key_type" text,
	"dynamo_db_range_key_value" text,
	"dynamo_db_v2_put_item_table_name" text,
	"dynamo_db_v2_role_arn" text,
	"elasticsearch_endpoint" text,
	"elasticsearch_id" text,
	"elasticsearch_index" text,
	"elasticsearch_role_arn" text,
	"elasticsearch_type" text,
	"firehose_delivery_stream_name" text,
	"firehose_role_arn" text,
	"firehose_batch_mode" boolean,
	"firehose_separator" text,
	"http_url" text,
	"http_auth_sigv4_role_arn" text,
	"http_auth_sigv4_service_name" text,
	"http_auth_sigv4_signing_region" text,
	"http_confirmation_url" text,
	"http_headers" jsonb,
	"iot_analytics_batch_mode" boolean,
	"iot_analytics_channel_arn" text,
	"iot_analytics_channel_name" text,
	"iot_analytics_role_arn" text,
	"iot_events_input_name" text,
	"iot_events_role_arn" text,
	"iot_events_batch_mode" boolean,
	"iot_events_message_id" text,
	"iot_site_wise" jsonb,
	"kafka_client_properties" jsonb,
	"kafka_destination_arn" text,
	"kafka_topic" text,
	"kafka_key" text,
	"kafka_partition" text,
	"kinesis_role_arn" text,
	"kinesis_stream_name" text,
	"kinesis_partition_key" text,
	"lambda_function_arn" text,
	"open_search_endpoint" text,
	"open_search_id" text,
	"open_search_index" text,
	"open_search_role_arn" text,
	"open_search_type" text,
	"republish_role_arn" text,
	"republish_topic" text,
	"republish_qos" integer,
	"s3_bucket_name" text,
	"s3_key" text,
	"s3_role_arn" text,
	"s3_canned_acl" text,
	"salesforce_token" text,
	"salesforce_url" text,
	"sns_role_arn" text,
	"sns_target_arn" text,
	"sns_message_format" text,
	"sqs_queue_url" text,
	"sqs_role_arn" text,
	"sqs_use_base64" boolean,
	"step_functions_role_arn" text,
	"step_functions_state_machine_name" text,
	"step_functions_execution_name_prefix" text,
	"timestream_database_name" text,
	"timestream_dimensions" jsonb,
	"timestream_role_arn" text,
	"timestream_table_name" text,
	"timestream_timestamp_unit" text,
	"timestream_timestamp_value" text,
	CONSTRAINT aws_iot_topic_rule_actions_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (topic_rule_cq_id) REFERENCES aws_iot_topic_rules(cq_id) ON DELETE CASCADE
);

-- Resource: kms.keys
CREATE TABLE IF NOT EXISTS "aws_kms_keys" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"tags" jsonb,
	"region" text,
	"rotation_enabled" boolean,
	"cloud_hsm_cluster_id" text,
	"creation_date" timestamp without time zone,
	"custom_key_store_id" text,
	"customer_master_key_spec" text,
	"deletion_date" timestamp without time zone,
	"description" text,
	"enabled" boolean,
	"encryption_algorithms" text[],
	"expiration_model" text,
	"manager" text,
	"key_state" text,
	"key_usage" text,
	"origin" text,
	"signing_algorithms" text[],
	"valid_to" timestamp without time zone,
	"arn" text,
	"id" text,
	CONSTRAINT aws_kms_keys_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: lambda.functions
CREATE TABLE IF NOT EXISTS "aws_lambda_functions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"policy_document" jsonb,
	"policy_revision_id" text,
	"code_signing_allowed_publishers_version_arns" text[],
	"code_signing_config_arn" text,
	"code_signing_config_id" text,
	"code_signing_policies_untrusted_artifact_on_deployment" text,
	"code_signing_description" text,
	"code_signing_last_modified" timestamp without time zone,
	"code_image_uri" text,
	"code_location" text,
	"code_repository_type" text,
	"code_resolved_image_uri" text,
	"concurrency_reserved_concurrent_executions" integer,
	"code_sha256" text,
	"code_size" bigint,
	"dead_letter_config_target_arn" text,
	"description" text,
	"environment_error_code" text,
	"environment_error_message" text,
	"environment_variables" jsonb,
	"arn" text,
	"name" text,
	"handler" text,
	"error_code" text,
	"error_message" text,
	"image_config_command" text[],
	"image_config_entry_point" text[],
	"image_config_working_directory" text,
	"kms_key_arn" text,
	"last_modified" text,
	"last_update_status" text,
	"last_update_status_reason" text,
	"last_update_status_reason_code" text,
	"master_arn" text,
	"memory_size" integer,
	"package_type" text,
	"revision_id" text,
	"role" text,
	"runtime" text,
	"signing_job_arn" text,
	"signing_profile_version_arn" text,
	"state" text,
	"state_reason" text,
	"state_reason_code" text,
	"timeout" integer,
	"tracing_config_mode" text,
	"version" text,
	"vpc_config_security_group_ids" text[],
	"vpc_config_subnet_ids" text[],
	"vpc_config_vpc_id" text,
	"tags" jsonb,
	CONSTRAINT aws_lambda_functions_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_lambda_function_file_system_configs" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"function_cq_id" uuid,
	"function_arn" text,
	"arn" text,
	"local_mount_path" text,
	CONSTRAINT aws_lambda_function_file_system_configs_pk PRIMARY KEY(function_cq_id,arn),
	UNIQUE(cq_id),
	FOREIGN KEY (function_cq_id) REFERENCES aws_lambda_functions(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_lambda_function_layers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"function_cq_id" uuid,
	"function_arn" text,
	"arn" text,
	"code_size" bigint,
	"signing_job_arn" text,
	"signing_profile_version_arn" text,
	CONSTRAINT aws_lambda_function_layers_pk PRIMARY KEY(function_cq_id,arn),
	UNIQUE(cq_id),
	FOREIGN KEY (function_cq_id) REFERENCES aws_lambda_functions(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_lambda_function_aliases" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"function_cq_id" uuid,
	"function_arn" text,
	"arn" text,
	"description" text,
	"function_version" text,
	"name" text,
	"revision_id" text,
	"routing_config_additional_version_weights" jsonb,
	CONSTRAINT aws_lambda_function_aliases_pk PRIMARY KEY(function_cq_id,arn),
	UNIQUE(cq_id),
	FOREIGN KEY (function_cq_id) REFERENCES aws_lambda_functions(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_lambda_function_event_invoke_configs" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"function_cq_id" uuid,
	"on_failure_destination" text,
	"on_success_destination" text,
	"function_arn" text,
	"last_modified" timestamp without time zone,
	"maximum_event_age_in_seconds" integer,
	"maximum_retry_attempts" integer,
	CONSTRAINT aws_lambda_function_event_invoke_configs_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (function_cq_id) REFERENCES aws_lambda_functions(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_lambda_function_versions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"function_cq_id" uuid,
	"code_sha256" text,
	"code_size" bigint,
	"dead_letter_config_target_arn" text,
	"description" text,
	"environment_error_error_code" text,
	"environment_error_message" text,
	"environment_variables" jsonb,
	"function_arn" text,
	"function_name" text,
	"handler" text,
	"error_code" text,
	"error_message" text,
	"image_config_command" text[],
	"image_config_entry_point" text[],
	"image_config_working_directory" text,
	"kms_key_arn" text,
	"last_modified" text,
	"last_update_status" text,
	"last_update_status_reason" text,
	"last_update_status_reason_code" text,
	"master_arn" text,
	"memory_size" integer,
	"package_type" text,
	"revision_id" text,
	"role" text,
	"runtime" text,
	"signing_job_arn" text,
	"signing_profile_version_arn" text,
	"state" text,
	"state_reason" text,
	"state_reason_code" text,
	"timeout" integer,
	"tracing_config_mode" text,
	"version" text,
	"vpc_config_security_group_ids" text[],
	"vpc_config_subnet_ids" text[],
	"vpc_config_vpc_id" text,
	CONSTRAINT aws_lambda_function_versions_pk PRIMARY KEY(function_cq_id,version),
	UNIQUE(cq_id),
	FOREIGN KEY (function_cq_id) REFERENCES aws_lambda_functions(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_lambda_function_version_file_system_configs" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"function_version_cq_id" uuid,
	"arn" text,
	"local_mount_path" text,
	CONSTRAINT aws_lambda_function_version_file_system_configs_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (function_version_cq_id) REFERENCES aws_lambda_function_versions(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_lambda_function_version_layers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"function_version_cq_id" uuid,
	"arn" text,
	"code_size" bigint,
	"signing_job_arn" text,
	"signing_profile_version_arn" text,
	CONSTRAINT aws_lambda_function_version_layers_pk PRIMARY KEY(function_version_cq_id,arn),
	UNIQUE(cq_id),
	FOREIGN KEY (function_version_cq_id) REFERENCES aws_lambda_function_versions(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_lambda_function_concurrency_configs" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"function_cq_id" uuid,
	"allocated_provisioned_concurrent_executions" integer,
	"available_provisioned_concurrent_executions" integer,
	"function_arn" text,
	"last_modified" text,
	"requested_provisioned_concurrent_executions" integer,
	"status" text,
	"status_reason" text,
	CONSTRAINT aws_lambda_function_concurrency_configs_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (function_cq_id) REFERENCES aws_lambda_functions(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_lambda_function_event_source_mappings" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"function_cq_id" uuid,
	"batch_size" integer,
	"bisect_batch_on_function_error" boolean,
	"on_failure_destination" text,
	"on_success_destination" text,
	"event_source_arn" text,
	"function_arn" text,
	"function_response_types" text[],
	"last_modified" timestamp without time zone,
	"last_processing_result" text,
	"maximum_batching_window_in_seconds" integer,
	"maximum_record_age_in_seconds" integer,
	"maximum_retry_attempts" integer,
	"parallelization_factor" integer,
	"queues" text[],
	"self_managed_event_source_endpoints" jsonb,
	"starting_position" text,
	"starting_position_timestamp" timestamp without time zone,
	"state" text,
	"state_transition_reason" text,
	"topics" text[],
	"tumbling_window_in_seconds" integer,
	"uuid" text,
	"source_access_configurations" jsonb,
	CONSTRAINT aws_lambda_function_event_source_mappings_pk PRIMARY KEY(function_cq_id,uuid),
	UNIQUE(cq_id),
	FOREIGN KEY (function_cq_id) REFERENCES aws_lambda_functions(cq_id) ON DELETE CASCADE
);

-- Resource: lambda.layers
CREATE TABLE IF NOT EXISTS "aws_lambda_layers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"latest_matching_version_compatible_runtimes" text[],
	"latest_matching_version_created_date" text,
	"latest_matching_version_description" text,
	"latest_matching_version_layer_version_arn" text,
	"latest_matching_version_license_info" text,
	"latest_matching_version" bigint,
	"arn" text,
	"name" text,
	CONSTRAINT aws_lambda_layers_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_lambda_layer_versions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"layer_cq_id" uuid,
	"compatible_runtimes" text[],
	"created_date" text,
	"description" text,
	"layer_version_arn" text,
	"license_info" text,
	"version" bigint,
	CONSTRAINT aws_lambda_layer_versions_pk PRIMARY KEY(layer_cq_id,version),
	UNIQUE(cq_id),
	FOREIGN KEY (layer_cq_id) REFERENCES aws_lambda_layers(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_lambda_layer_version_policies" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"layer_version_cq_id" uuid,
	"layer_version" bigint,
	"policy" text,
	"revision_id" text,
	CONSTRAINT aws_lambda_layer_version_policies_pk PRIMARY KEY(layer_version_cq_id,revision_id),
	UNIQUE(cq_id),
	FOREIGN KEY (layer_version_cq_id) REFERENCES aws_lambda_layer_versions(cq_id) ON DELETE CASCADE
);

-- Resource: lambda.runtimes
CREATE TABLE IF NOT EXISTS "aws_lambda_runtimes" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"name" text,
	CONSTRAINT aws_lambda_runtimes_pk PRIMARY KEY(name),
	UNIQUE(cq_id)
);

-- Resource: mq.brokers
CREATE TABLE IF NOT EXISTS "aws_mq_brokers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"authentication_strategy" text,
	"auto_minor_version_upgrade" boolean,
	"arn" text,
	"broker_id" text,
	"broker_instances" jsonb,
	"broker_name" text,
	"broker_state" text,
	"created" timestamp without time zone,
	"deployment_mode" text,
	"encryption_options_use_aws_owned_key" boolean,
	"encryption_options_kms_key_id" text,
	"engine_type" text,
	"engine_version" text,
	"host_instance_type" text,
	"ldap_server_metadata" jsonb,
	"logs" jsonb,
	"maintenance_window_start_time" jsonb,
	"pending_authentication_strategy" text,
	"pending_engine_version" text,
	"pending_host_instance_type" text,
	"pending_ldap_server_metadata" jsonb,
	"pending_security_groups" text[],
	"publicly_accessible" boolean,
	"security_groups" text[],
	"storage_type" text,
	"subnet_ids" text[],
	"tags" jsonb,
	CONSTRAINT aws_mq_brokers_pk PRIMARY KEY(account_id,broker_id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_mq_broker_configurations" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"broker_cq_id" uuid,
	"account_id" text,
	"region" text,
	"arn" text,
	"authentication_strategy" text,
	"created" timestamp without time zone,
	"description" text,
	"engine_type" text,
	"engine_version" text,
	"id" text,
	"latest_revision_created" timestamp without time zone,
	"latest_revision_description" text,
	"latest_revision" integer,
	"name" text,
	"tags" jsonb,
	CONSTRAINT aws_mq_broker_configurations_pk PRIMARY KEY(broker_cq_id,id),
	UNIQUE(cq_id),
	FOREIGN KEY (broker_cq_id) REFERENCES aws_mq_brokers(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_mq_broker_users" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"broker_cq_id" uuid,
	"account_id" text,
	"region" text,
	"console_access" boolean,
	"groups" text[],
	"pending" jsonb,
	"username" text,
	CONSTRAINT aws_mq_broker_users_pk PRIMARY KEY(broker_cq_id,username),
	UNIQUE(cq_id),
	FOREIGN KEY (broker_cq_id) REFERENCES aws_mq_brokers(cq_id) ON DELETE CASCADE
);

-- Resource: organizations.accounts
CREATE TABLE IF NOT EXISTS "aws_organizations_accounts" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"arn" text,
	"email" text,
	"id" text,
	"joined_method" text,
	"joined_timestamp" timestamp without time zone,
	"name" text,
	"status" text,
	CONSTRAINT aws_organizations_accounts_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);

-- Resource: rds.certificates
CREATE TABLE IF NOT EXISTS "aws_rds_certificates" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"certificate_identifier" text,
	"certificate_type" text,
	"customer_override" boolean,
	"customer_override_valid_till" timestamp without time zone,
	"thumbprint" text,
	"valid_from" timestamp without time zone,
	"valid_till" timestamp without time zone,
	CONSTRAINT aws_rds_certificates_pk PRIMARY KEY(account_id,thumbprint),
	UNIQUE(cq_id)
);

-- Resource: rds.cluster_parameter_groups
CREATE TABLE IF NOT EXISTS "aws_rds_cluster_parameter_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"name" text,
	"family" text,
	"description" text,
	"tags" jsonb,
	CONSTRAINT aws_rds_cluster_parameter_groups_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_rds_cluster_parameters" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_parameter_group_cq_id" uuid,
	"allowed_values" text,
	"apply_method" text,
	"apply_type" text,
	"data_type" text,
	"description" text,
	"is_modifiable" boolean,
	"minimum_engine_version" text,
	"parameter_name" text,
	"parameter_value" text,
	"source" text,
	"supported_engine_modes" text[],
	CONSTRAINT aws_rds_cluster_parameters_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_parameter_group_cq_id) REFERENCES aws_rds_cluster_parameter_groups(cq_id) ON DELETE CASCADE
);

-- Resource: rds.cluster_snapshots
CREATE TABLE IF NOT EXISTS "aws_rds_cluster_snapshots" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"allocated_storage" integer,
	"availability_zones" text[],
	"cluster_create_time" timestamp without time zone,
	"db_cluster_identifier" text,
	"arn" text,
	"db_cluster_snapshot_identifier" text,
	"engine" text,
	"engine_mode" text,
	"engine_version" text,
	"iam_database_authentication_enabled" boolean,
	"kms_key_id" text,
	"license_model" text,
	"master_username" text,
	"percent_progress" integer,
	"port" integer,
	"snapshot_create_time" timestamp without time zone,
	"snapshot_type" text,
	"source_db_cluster_snapshot_arn" text,
	"status" text,
	"storage_encrypted" boolean,
	"vpc_id" text,
	"tags" jsonb,
	"attributes" jsonb,
	CONSTRAINT aws_rds_cluster_snapshots_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: rds.clusters
CREATE TABLE IF NOT EXISTS "aws_rds_clusters" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"activity_stream_kinesis_stream_name" text,
	"activity_stream_kms_key_id" text,
	"activity_stream_mode" text,
	"activity_stream_status" text,
	"allocated_storage" integer,
	"availability_zones" text[],
	"backtrack_consumed_change_records" bigint,
	"backtrack_window" bigint,
	"backup_retention_period" integer,
	"capacity" integer,
	"character_set_name" text,
	"clone_group_id" text,
	"cluster_create_time" timestamp without time zone,
	"copy_tags_to_snapshot" boolean,
	"cross_account_clone" boolean,
	"custom_endpoints" text[],
	"arn" text,
	"db_cluster_identifier" text,
	"db_cluster_parameter_group" text,
	"db_cluster_option_group_memberships" jsonb,
	"db_subnet_group" text,
	"database_name" text,
	"id" text,
	"deletion_protection" boolean,
	"earliest_backtrack_time" timestamp without time zone,
	"earliest_restorable_time" timestamp without time zone,
	"enabled_cloudwatch_logs_exports" text[],
	"endpoint" text,
	"engine" text,
	"engine_mode" text,
	"engine_version" text,
	"global_write_forwarding_requested" boolean,
	"global_write_forwarding_status" text,
	"hosted_zone_id" text,
	"http_endpoint_enabled" boolean,
	"iam_database_authentication_enabled" boolean,
	"kms_key_id" text,
	"latest_restorable_time" timestamp without time zone,
	"master_username" text,
	"multi_az" boolean,
	"pending_modified_values_db_cluster_identifier" text,
	"pending_modified_values_engine_version" text,
	"pending_modified_values_iam_database_authentication_enabled" boolean,
	"pending_modified_values_master_user_password" text,
	"pending_cloudwatch_logs_types_to_disable" text[],
	"pending_cloudwatch_logs_types_to_enable" text[],
	"percent_progress" text,
	"port" integer,
	"preferred_backup_window" text,
	"preferred_maintenance_window" text,
	"read_replica_identifiers" text[],
	"reader_endpoint" text,
	"replication_source_identifier" text,
	"scaling_configuration_info_auto_pause" boolean,
	"scaling_configuration_info_max_capacity" integer,
	"scaling_configuration_info_min_capacity" integer,
	"scaling_configuration_info_seconds_until_auto_pause" integer,
	"scaling_configuration_info_timeout_action" text,
	"status" text,
	"storage_encrypted" boolean,
	"tags" jsonb,
	CONSTRAINT aws_rds_clusters_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_rds_cluster_associated_roles" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_cq_id" uuid,
	"feature_name" text,
	"role_arn" text,
	"status" text,
	CONSTRAINT aws_rds_cluster_associated_roles_pk PRIMARY KEY(cluster_cq_id,role_arn),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_cq_id) REFERENCES aws_rds_clusters(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_rds_cluster_db_cluster_members" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_cq_id" uuid,
	"db_cluster_parameter_group_status" text,
	"db_instance_identifier" text,
	"is_cluster_writer" boolean,
	"promotion_tier" integer,
	CONSTRAINT aws_rds_cluster_db_cluster_members_pk PRIMARY KEY(cluster_cq_id,db_instance_identifier),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_cq_id) REFERENCES aws_rds_clusters(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_rds_cluster_domain_memberships" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_cq_id" uuid,
	"domain" text,
	"fqdn" text,
	"iam_role_name" text,
	"status" text,
	CONSTRAINT aws_rds_cluster_domain_memberships_pk PRIMARY KEY(cluster_cq_id,domain),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_cq_id) REFERENCES aws_rds_clusters(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_rds_cluster_vpc_security_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_cq_id" uuid,
	"status" text,
	"vpc_security_group_id" text,
	CONSTRAINT aws_rds_cluster_vpc_security_groups_pk PRIMARY KEY(cluster_cq_id,vpc_security_group_id),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_cq_id) REFERENCES aws_rds_clusters(cq_id) ON DELETE CASCADE
);

-- Resource: rds.db_parameter_groups
CREATE TABLE IF NOT EXISTS "aws_rds_db_parameter_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"family" text,
	"name" text,
	"description" text,
	"tags" jsonb,
	CONSTRAINT aws_rds_db_parameter_groups_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_rds_db_parameters" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"db_parameter_group_cq_id" uuid,
	"allowed_values" text,
	"apply_method" text,
	"apply_type" text,
	"data_type" text,
	"description" text,
	"is_modifiable" boolean,
	"minimum_engine_version" text,
	"parameter_name" text,
	"parameter_value" text,
	"source" text,
	"supported_engine_modes" text[],
	CONSTRAINT aws_rds_db_parameters_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (db_parameter_group_cq_id) REFERENCES aws_rds_db_parameter_groups(cq_id) ON DELETE CASCADE
);

-- Resource: rds.db_security_groups
CREATE TABLE IF NOT EXISTS "aws_rds_db_security_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"description" text,
	"name" text,
	"ec2_security_groups" jsonb,
	"ip_ranges" jsonb,
	"owner_id" text,
	"vpc_id" text,
	"tags" jsonb,
	CONSTRAINT aws_rds_db_security_groups_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: rds.db_snapshots
CREATE TABLE IF NOT EXISTS "aws_rds_db_snapshots" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"allocated_storage" integer,
	"availability_zone" text,
	"db_instance_identifier" text,
	"arn" text,
	"db_snapshot_identifier" text,
	"dbi_resource_id" text,
	"encrypted" boolean,
	"engine" text,
	"engine_version" text,
	"iam_database_authentication_enabled" boolean,
	"instance_create_time" timestamp without time zone,
	"iops" integer,
	"kms_key_id" text,
	"license_model" text,
	"master_username" text,
	"option_group_name" text,
	"percent_progress" integer,
	"port" integer,
	"processor_features" jsonb,
	"snapshot_create_time" timestamp without time zone,
	"snapshot_type" text,
	"source_db_snapshot_identifier" text,
	"source_region" text,
	"status" text,
	"storage_type" text,
	"tde_credential_arn" text,
	"timezone" text,
	"vpc_id" text,
	"tags" jsonb,
	"attributes" jsonb,
	CONSTRAINT aws_rds_db_snapshots_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: rds.db_subnet_groups
CREATE TABLE IF NOT EXISTS "aws_rds_subnet_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"description" text,
	"name" text,
	"status" text,
	"vpc_id" text,
	CONSTRAINT aws_rds_subnet_groups_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_rds_subnet_group_subnets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"subnet_group_cq_id" uuid,
	"subnet_availability_zone_name" text,
	"subnet_identifier" text,
	"subnet_outpost_arn" text,
	"subnet_status" text,
	CONSTRAINT aws_rds_subnet_group_subnets_pk PRIMARY KEY(subnet_group_cq_id,subnet_identifier),
	UNIQUE(cq_id),
	FOREIGN KEY (subnet_group_cq_id) REFERENCES aws_rds_subnet_groups(cq_id) ON DELETE CASCADE
);

-- Resource: rds.event_subscriptions
CREATE TABLE IF NOT EXISTS "aws_rds_event_subscriptions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"cust_subscription_id" text,
	"customer_aws_id" text,
	"enabled" boolean,
	"event_categories_list" text[],
	"arn" text,
	"sns_topic_arn" text,
	"source_ids_list" text[],
	"source_type" text,
	"status" text,
	"subscription_creation_time" text,
	"tags" jsonb,
	CONSTRAINT aws_rds_event_subscriptions_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: rds.instances
CREATE TABLE IF NOT EXISTS "aws_rds_instances" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"allocated_storage" integer,
	"auto_minor_version_upgrade" boolean,
	"availability_zone" text,
	"aws_backup_recovery_point_arn" text,
	"backup_retention_period" integer,
	"ca_certificate_identifier" text,
	"character_set_name" text,
	"copy_tags_to_snapshot" boolean,
	"customer_owned_ip_enabled" boolean,
	"cluster_identifier" text,
	"arn" text,
	"db_instance_class" text,
	"user_instance_id" text,
	"db_instance_status" text,
	"db_name" text,
	"subnet_group_arn" text,
	"subnet_group_description" text,
	"subnet_group_name" text,
	"subnet_group_subnet_group_status" text,
	"subnet_group_vpc_id" text,
	"instance_port" integer,
	"id" text,
	"deletion_protection" boolean,
	"enabled_cloudwatch_logs_exports" text[],
	"endpoint_address" text,
	"endpoint_hosted_zone_id" text,
	"endpoint_port" integer,
	"engine" text,
	"engine_version" text,
	"enhanced_monitoring_resource_arn" text,
	"iam_database_authentication_enabled" boolean,
	"instance_create_time" timestamp without time zone,
	"iops" integer,
	"kms_key_id" text,
	"latest_restorable_time" timestamp without time zone,
	"license_model" text,
	"listener_endpoint_address" text,
	"listener_endpoint_hosted_zone_id" text,
	"listener_endpoint_port" integer,
	"master_username" text,
	"max_allocated_storage" integer,
	"monitoring_interval" integer,
	"monitoring_role_arn" text,
	"multi_az" boolean,
	"nchar_character_set_name" text,
	"pending_modified_values_allocated_storage" integer,
	"pending_modified_values_backup_retention_period" integer,
	"pending_modified_values_ca_certificate_identifier" text,
	"pending_modified_values_db_instance_class" text,
	"pending_modified_values_db_instance_identifier" text,
	"pending_modified_values_db_subnet_group_name" text,
	"pending_modified_values_engine_version" text,
	"pending_modified_values_iam_database_authentication_enabled" boolean,
	"pending_modified_values_iops" integer,
	"pending_modified_values_license_model" text,
	"pending_modified_values_master_user_password" text,
	"pending_modified_values_multi_az" boolean,
	"pending_cloudwatch_logs_types_to_disable" text[],
	"pending_cloudwatch_logs_types_to_enable" text[],
	"pending_modified_values_port" integer,
	"pending_modified_values_processor_features" jsonb,
	"pending_modified_values_storage_type" text,
	"performance_insights_enabled" boolean,
	"performance_insights_kms_key_id" text,
	"performance_insights_retention_period" integer,
	"preferred_backup_window" text,
	"preferred_maintenance_window" text,
	"processor_features" jsonb,
	"promotion_tier" integer,
	"publicly_accessible" boolean,
	"read_replica_db_cluster_identifiers" text[],
	"read_replica_db_instance_identifiers" text[],
	"read_replica_source_db_instance_identifier" text,
	"replica_mode" text,
	"secondary_availability_zone" text,
	"storage_encrypted" boolean,
	"storage_type" text,
	"tags" jsonb,
	"tde_credential_arn" text,
	"timezone" text,
	"status_infos" jsonb,
	CONSTRAINT aws_rds_instances_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_rds_instance_associated_roles" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"instance_cq_id" uuid,
	"instance_id" text,
	"feature_name" text,
	"role_arn" text,
	"status" text,
	CONSTRAINT aws_rds_instance_associated_roles_pk PRIMARY KEY(instance_cq_id,role_arn),
	UNIQUE(cq_id),
	FOREIGN KEY (instance_cq_id) REFERENCES aws_rds_instances(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_rds_instance_db_instance_automated_backups_replications" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"instance_cq_id" uuid,
	"instance_id" text,
	"db_instance_automated_backups_arn" text,
	CONSTRAINT aws_rds_instance_db_instance_automated_backups_replications_pk PRIMARY KEY(instance_cq_id,db_instance_automated_backups_arn),
	UNIQUE(cq_id),
	FOREIGN KEY (instance_cq_id) REFERENCES aws_rds_instances(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_rds_instance_db_parameter_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"instance_cq_id" uuid,
	"instance_id" text,
	"db_parameter_group_name" text,
	"parameter_apply_status" text,
	CONSTRAINT aws_rds_instance_db_parameter_groups_pk PRIMARY KEY(instance_cq_id,db_parameter_group_name),
	UNIQUE(cq_id),
	FOREIGN KEY (instance_cq_id) REFERENCES aws_rds_instances(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_rds_instance_db_security_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"instance_cq_id" uuid,
	"instance_id" text,
	"db_security_group_name" text,
	"status" text,
	CONSTRAINT aws_rds_instance_db_security_groups_pk PRIMARY KEY(instance_cq_id,db_security_group_name),
	UNIQUE(cq_id),
	FOREIGN KEY (instance_cq_id) REFERENCES aws_rds_instances(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_rds_instance_db_subnet_group_subnets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"instance_cq_id" uuid,
	"instance_id" text,
	"subnet_availability_zone_name" text,
	"subnet_identifier" text,
	"subnet_outpost_arn" text,
	"subnet_status" text,
	CONSTRAINT aws_rds_instance_db_subnet_group_subnets_pk PRIMARY KEY(instance_cq_id,subnet_identifier),
	UNIQUE(cq_id),
	FOREIGN KEY (instance_cq_id) REFERENCES aws_rds_instances(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_rds_instance_domain_memberships" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"instance_cq_id" uuid,
	"instance_id" text,
	"domain" text,
	"fqdn" text,
	"iam_role_name" text,
	"status" text,
	CONSTRAINT aws_rds_instance_domain_memberships_pk PRIMARY KEY(instance_cq_id,domain),
	UNIQUE(cq_id),
	FOREIGN KEY (instance_cq_id) REFERENCES aws_rds_instances(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_rds_instance_option_group_memberships" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"instance_cq_id" uuid,
	"option_group_name" text,
	"status" text,
	CONSTRAINT aws_rds_instance_option_group_memberships_pk PRIMARY KEY(instance_cq_id,option_group_name),
	UNIQUE(cq_id),
	FOREIGN KEY (instance_cq_id) REFERENCES aws_rds_instances(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_rds_instance_vpc_security_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"instance_cq_id" uuid,
	"instance_id" text,
	"status" text,
	"vpc_security_group_id" text,
	CONSTRAINT aws_rds_instance_vpc_security_groups_pk PRIMARY KEY(instance_cq_id,vpc_security_group_id),
	UNIQUE(cq_id),
	FOREIGN KEY (instance_cq_id) REFERENCES aws_rds_instances(cq_id) ON DELETE CASCADE
);

-- Resource: redshift.clusters
CREATE TABLE IF NOT EXISTS "aws_redshift_clusters" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"allow_version_upgrade" boolean,
	"automated_snapshot_retention_period" integer,
	"availability_zone" text,
	"availability_zone_relocation_status" text,
	"cluster_availability_status" text,
	"cluster_create_time" timestamp without time zone,
	"id" text,
	"cluster_namespace_arn" text,
	"cluster_public_key" text,
	"cluster_revision_number" text,
	"cluster_snapshot_copy_status_destination_region" text,
	"cluster_snapshot_copy_status_manual_snapshot_retention_period" integer,
	"cluster_snapshot_copy_status_retention_period" bigint,
	"cluster_snapshot_copy_status_snapshot_copy_grant_name" text,
	"cluster_status" text,
	"cluster_subnet_group_name" text,
	"cluster_version" text,
	"db_name" text,
	"data_transfer_progress_current_rate_in_mega_bytes_per_second" float,
	"data_transfer_progress_data_transferred_in_mega_bytes" bigint,
	"data_transfer_progress_elapsed_time_in_seconds" bigint,
	"data_transfer_progress_estimated_time_to_completion_in_seconds" bigint,
	"data_transfer_progress_status" text,
	"data_transfer_progress_total_data_in_mega_bytes" bigint,
	"elastic_ip_status_elastic_ip" text,
	"elastic_ip_status" text,
	"elastic_resize_number_of_node_options" text,
	"encrypted" boolean,
	"endpoint_address" text,
	"endpoint_port" integer,
	"enhanced_vpc_routing" boolean,
	"expected_next_snapshot_schedule_time" timestamp without time zone,
	"expected_next_snapshot_schedule_time_status" text,
	"hsm_status_hsm_client_certificate_identifier" text,
	"hsm_status_hsm_configuration_identifier" text,
	"hsm_status" text,
	"kms_key_id" text,
	"maintenance_track_name" text,
	"manual_snapshot_retention_period" integer,
	"master_username" text,
	"modify_status" text,
	"next_maintenance_window_start_time" timestamp without time zone,
	"node_type" text,
	"number_of_nodes" integer,
	"pending_actions" text[],
	"pending_modified_values_automated_snapshot_retention_period" integer,
	"pending_modified_values_cluster_identifier" text,
	"pending_modified_values_cluster_type" text,
	"pending_modified_values_cluster_version" text,
	"pending_modified_values_encryption_type" text,
	"pending_modified_values_enhanced_vpc_routing" boolean,
	"pending_modified_values_maintenance_track_name" text,
	"pending_modified_values_master_user_password" text,
	"pending_modified_values_node_type" text,
	"pending_modified_values_number_of_nodes" integer,
	"pending_modified_values_publicly_accessible" boolean,
	"preferred_maintenance_window" text,
	"publicly_accessible" boolean,
	"resize_info_allow_cancel_resize" boolean,
	"resize_info_resize_type" text,
	"restore_status_current_restore_rate_in_mega_bytes_per_second" float,
	"restore_status_elapsed_time_in_seconds" bigint,
	"restore_status_estimated_time_to_completion_in_seconds" bigint,
	"restore_status_progress_in_mega_bytes" bigint,
	"restore_status_snapshot_size_in_mega_bytes" bigint,
	"restore_status" text,
	"snapshot_schedule_identifier" text,
	"snapshot_schedule_state" text,
	"tags" jsonb,
	"total_storage_capacity_in_mega_bytes" bigint,
	"vpc_id" text,
	"logging_status" jsonb,
	CONSTRAINT aws_redshift_clusters_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_redshift_cluster_nodes" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_cq_id" uuid,
	"node_role" text,
	"private_ip_address" text,
	"public_ip_address" text,
	CONSTRAINT aws_redshift_cluster_nodes_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_cq_id) REFERENCES aws_redshift_clusters(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_redshift_cluster_parameter_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_cq_id" uuid,
	"parameter_apply_status" text,
	"parameter_group_name" text,
	CONSTRAINT aws_redshift_cluster_parameter_groups_pk PRIMARY KEY(cluster_cq_id,parameter_group_name),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_cq_id) REFERENCES aws_redshift_clusters(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_redshift_cluster_parameters" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_parameter_group_cq_id" uuid,
	"allowed_values" text,
	"apply_type" text,
	"data_type" text,
	"description" text,
	"is_modifiable" boolean,
	"minimum_engine_version" text,
	"parameter_name" text,
	"parameter_value" text,
	"source" text,
	CONSTRAINT aws_redshift_cluster_parameters_pk PRIMARY KEY(cluster_parameter_group_cq_id,parameter_name),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_parameter_group_cq_id) REFERENCES aws_redshift_cluster_parameter_groups(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_redshift_cluster_parameter_group_status_lists" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_parameter_group_cq_id" uuid,
	"parameter_apply_error_description" text,
	"parameter_apply_status" text,
	"parameter_name" text,
	CONSTRAINT aws_redshift_cluster_parameter_group_status_lists_pk PRIMARY KEY(cluster_parameter_group_cq_id,parameter_name),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_parameter_group_cq_id) REFERENCES aws_redshift_cluster_parameter_groups(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_redshift_cluster_security_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_cq_id" uuid,
	"cluster_security_group_name" text,
	"status" text,
	CONSTRAINT aws_redshift_cluster_security_groups_pk PRIMARY KEY(cluster_cq_id,cluster_security_group_name),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_cq_id) REFERENCES aws_redshift_clusters(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_redshift_cluster_deferred_maintenance_windows" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_cq_id" uuid,
	"defer_maintenance_end_time" timestamp without time zone,
	"defer_maintenance_identifier" text,
	"defer_maintenance_start_time" timestamp without time zone,
	CONSTRAINT aws_redshift_cluster_deferred_maintenance_windows_pk PRIMARY KEY(cluster_cq_id,defer_maintenance_identifier),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_cq_id) REFERENCES aws_redshift_clusters(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_redshift_cluster_endpoint_vpc_endpoints" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_cq_id" uuid,
	"vpc_endpoint_id" text,
	"vpc_id" text,
	CONSTRAINT aws_redshift_cluster_endpoint_vpc_endpoints_pk PRIMARY KEY(cluster_cq_id,vpc_endpoint_id),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_cq_id) REFERENCES aws_redshift_clusters(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_redshift_cluster_endpoint_vpc_endpoint_network_interfaces" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_endpoint_vpc_endpoint_cq_id" uuid,
	"availability_zone" text,
	"network_interface_id" text,
	"private_ip_address" text,
	"subnet_id" text,
	CONSTRAINT aws_redshift_cluster_endpoint_vpc_endpoint_network_interface_pk PRIMARY KEY(cluster_endpoint_vpc_endpoint_cq_id,network_interface_id),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_endpoint_vpc_endpoint_cq_id) REFERENCES aws_redshift_cluster_endpoint_vpc_endpoints(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_redshift_cluster_iam_roles" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_cq_id" uuid,
	"apply_status" text,
	"iam_role_arn" text,
	CONSTRAINT aws_redshift_cluster_iam_roles_pk PRIMARY KEY(cluster_cq_id,iam_role_arn),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_cq_id) REFERENCES aws_redshift_clusters(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_redshift_cluster_vpc_security_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cluster_cq_id" uuid,
	"status" text,
	"vpc_security_group_id" text,
	CONSTRAINT aws_redshift_cluster_vpc_security_groups_pk PRIMARY KEY(cluster_cq_id,vpc_security_group_id),
	UNIQUE(cq_id),
	FOREIGN KEY (cluster_cq_id) REFERENCES aws_redshift_clusters(cq_id) ON DELETE CASCADE
);

-- Resource: redshift.subnet_groups
CREATE TABLE IF NOT EXISTS "aws_redshift_subnet_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"cluster_subnet_group_name" text,
	"description" text,
	"subnet_group_status" text,
	"tags" jsonb,
	"vpc_id" text,
	CONSTRAINT aws_redshift_subnet_groups_pk PRIMARY KEY(account_id,region,cluster_subnet_group_name),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_redshift_subnet_group_subnets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"subnet_group_cq_id" uuid,
	"subnet_availability_zone_name" text,
	"subnet_availability_zone_supported_platforms" text[],
	"subnet_identifier" text,
	"subnet_status" text,
	CONSTRAINT aws_redshift_subnet_group_subnets_pk PRIMARY KEY(subnet_group_cq_id,subnet_identifier),
	UNIQUE(cq_id),
	FOREIGN KEY (subnet_group_cq_id) REFERENCES aws_redshift_subnet_groups(cq_id) ON DELETE CASCADE
);

-- Resource: route53.domains
CREATE TABLE IF NOT EXISTS "aws_route53_domains" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"admin_contact_address_line1" text,
	"admin_contact_address_line2" text,
	"admin_contact_city" text,
	"admin_contact_type" text,
	"admin_contact_country_code" text,
	"admin_contact_email" text,
	"admin_contact_fax" text,
	"admin_contact_first_name" text,
	"admin_contact_last_name" text,
	"admin_contact_organization_name" text,
	"admin_contact_phone_number" text,
	"admin_contact_state" text,
	"admin_contact_zip_code" text,
	"admin_contact_extra_params" jsonb,
	"domain_name" text,
	"registrant_contact_address_line1" text,
	"registrant_contact_address_line2" text,
	"registrant_contact_city" text,
	"registrant_contact_type" text,
	"registrant_contact_country_code" text,
	"registrant_contact_email" text,
	"registrant_contact_fax" text,
	"registrant_contact_first_name" text,
	"registrant_contact_last_name" text,
	"registrant_contact_organization_name" text,
	"registrant_contact_phone_number" text,
	"registrant_contact_state" text,
	"registrant_contact_zip_code" text,
	"registrant_contact_extra_params" jsonb,
	"tech_contact_address_line1" text,
	"tech_contact_address_line2" text,
	"tech_contact_city" text,
	"tech_contact_type" text,
	"tech_contact_country_code" text,
	"tech_contact_email" text,
	"tech_contact_fax" text,
	"tech_contact_first_name" text,
	"tech_contact_last_name" text,
	"tech_contact_organization_name" text,
	"tech_contact_phone_number" text,
	"tech_contact_state" text,
	"tech_contact_zip_code" text,
	"tech_contact_extra_params" jsonb,
	"abuse_contact_email" text,
	"abuse_contact_phone" text,
	"admin_privacy" boolean,
	"auto_renew" boolean,
	"creation_date" timestamp without time zone,
	"dns_sec" text,
	"expiration_date" timestamp without time zone,
	"registrant_privacy" boolean,
	"registrar_name" text,
	"registrar_url" text,
	"registry_domain_id" text,
	"reseller" text,
	"status_list" text[],
	"tech_privacy" boolean,
	"updated_date" timestamp without time zone,
	"who_is_server" text,
	"tags" jsonb,
	CONSTRAINT aws_route53_domains_pk PRIMARY KEY(account_id,domain_name),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_route53_domain_nameservers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"domain_cq_id" uuid,
	"name" text,
	"glue_ips" text[],
	CONSTRAINT aws_route53_domain_nameservers_pk PRIMARY KEY(domain_cq_id,name),
	UNIQUE(cq_id),
	FOREIGN KEY (domain_cq_id) REFERENCES aws_route53_domains(cq_id) ON DELETE CASCADE
);

-- Resource: route53.health_checks
CREATE TABLE IF NOT EXISTS "aws_route53_health_checks" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"cloud_watch_alarm_configuration_dimensions" jsonb,
	"tags" jsonb,
	"caller_reference" text,
	"type" text,
	"alarm_identifier_name" text,
	"alarm_identifier_region" text,
	"child_health_checks" text[],
	"disabled" boolean,
	"enable_sni" boolean,
	"failure_threshold" integer,
	"fully_qualified_domain_name" text,
	"health_threshold" integer,
	"ip_address" text,
	"insufficient_data_health_status" text,
	"inverted" boolean,
	"measure_latency" boolean,
	"port" integer,
	"regions" text[],
	"request_interval" integer,
	"resource_path" text,
	"search_string" text,
	"health_check_version" bigint,
	"id" text,
	"cloud_watch_alarm_config_comparison_operator" text,
	"cloud_watch_alarm_config_evaluation_periods" integer,
	"cloud_watch_alarm_config_metric_name" text,
	"cloud_watch_alarm_config_namespace" text,
	"cloud_watch_alarm_config_period" integer,
	"cloud_watch_alarm_config_statistic" text,
	"cloud_watch_alarm_config_threshold" float,
	"linked_service_description" text,
	"linked_service_service_principal" text,
	"arn" text,
	CONSTRAINT aws_route53_health_checks_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);

-- Resource: route53.hosted_zones
CREATE TABLE IF NOT EXISTS "aws_route53_hosted_zones" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"tags" jsonb,
	"arn" text,
	"delegation_set_id" text,
	"caller_reference" text,
	"id" text,
	"name" text,
	"config_comment" text,
	"config_private_zone" boolean,
	"linked_service_description" text,
	"linked_service_principal" text,
	"resource_record_set_count" bigint,
	CONSTRAINT aws_route53_hosted_zones_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_route53_hosted_zone_query_logging_configs" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"hosted_zone_cq_id" uuid,
	"cloud_watch_logs_log_group_arn" text,
	"id" text,
	"arn" text,
	CONSTRAINT aws_route53_hosted_zone_query_logging_configs_pk PRIMARY KEY(hosted_zone_cq_id,id),
	UNIQUE(cq_id),
	FOREIGN KEY (hosted_zone_cq_id) REFERENCES aws_route53_hosted_zones(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_route53_hosted_zone_resource_record_sets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"hosted_zone_cq_id" uuid,
	"resource_records" text[],
	"name" text,
	"type" text,
	"dns_name" text,
	"evaluate_target_health" boolean,
	"failover" text,
	"geo_location_continent_code" text,
	"geo_location_country_code" text,
	"geo_location_subdivision_code" text,
	"health_check_id" text,
	"multi_value_answer" boolean,
	"region" text,
	"set_identifier" text,
	"ttl" bigint,
	"traffic_policy_instance_id" text,
	"weight" bigint,
	CONSTRAINT aws_route53_hosted_zone_resource_record_sets_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (hosted_zone_cq_id) REFERENCES aws_route53_hosted_zones(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_route53_hosted_zone_traffic_policy_instances" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"hosted_zone_cq_id" uuid,
	"id" text,
	"message" text,
	"name" text,
	"state" text,
	"ttl" bigint,
	"traffic_policy_id" text,
	"traffic_policy_type" text,
	"traffic_policy_version" integer,
	"arn" text,
	CONSTRAINT aws_route53_hosted_zone_traffic_policy_instances_pk PRIMARY KEY(hosted_zone_cq_id,id),
	UNIQUE(cq_id),
	FOREIGN KEY (hosted_zone_cq_id) REFERENCES aws_route53_hosted_zones(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_route53_hosted_zone_vpc_association_authorizations" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"hosted_zone_cq_id" uuid,
	"vpc_id" text,
	"vpc_region" text,
	"vpc_arn" text,
	CONSTRAINT aws_route53_hosted_zone_vpc_association_authorizations_pk PRIMARY KEY(hosted_zone_cq_id,vpc_id),
	UNIQUE(cq_id),
	FOREIGN KEY (hosted_zone_cq_id) REFERENCES aws_route53_hosted_zones(cq_id) ON DELETE CASCADE
);

-- Resource: route53.reusable_delegation_sets
CREATE TABLE IF NOT EXISTS "aws_route53_reusable_delegation_sets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"arn" text,
	"name_servers" text[],
	"caller_reference" text,
	"id" text,
	CONSTRAINT aws_route53_reusable_delegation_sets_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);

-- Resource: route53.traffic_policies
CREATE TABLE IF NOT EXISTS "aws_route53_traffic_policies" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"id" text,
	"latest_version" integer,
	"name" text,
	"traffic_policy_count" integer,
	"type" text,
	"arn" text,
	CONSTRAINT aws_route53_traffic_policies_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_route53_traffic_policy_versions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"traffic_policy_cq_id" uuid,
	"document" jsonb,
	"id" text,
	"name" text,
	"type" text,
	"version" integer,
	"comment" text,
	CONSTRAINT aws_route53_traffic_policy_versions_pk PRIMARY KEY(traffic_policy_cq_id,id),
	UNIQUE(cq_id),
	FOREIGN KEY (traffic_policy_cq_id) REFERENCES aws_route53_traffic_policies(cq_id) ON DELETE CASCADE
);

-- Resource: s3.accounts
CREATE TABLE IF NOT EXISTS "aws_s3_account_config" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"config_exists" boolean,
	"block_public_acls" boolean,
	"block_public_policy" boolean,
	"ignore_public_acls" boolean,
	"restrict_public_buckets" boolean,
	CONSTRAINT aws_s3_account_config_pk PRIMARY KEY(account_id),
	UNIQUE(cq_id)
);

-- Resource: s3.buckets
CREATE TABLE IF NOT EXISTS "aws_s3_buckets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"logging_target_prefix" text,
	"logging_target_bucket" text,
	"versioning_status" text,
	"versioning_mfa_delete" text,
	"policy" jsonb,
	"tags" jsonb,
	"creation_date" timestamp without time zone,
	"name" text,
	"block_public_acls" boolean,
	"block_public_policy" boolean,
	"ignore_public_acls" boolean,
	"restrict_public_buckets" boolean,
	"replication_role" text,
	"arn" text,
	CONSTRAINT aws_s3_buckets_pk PRIMARY KEY(account_id,name),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_s3_bucket_grants" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"bucket_cq_id" uuid,
	"type" text,
	"display_name" text,
	"email_address" text,
	"grantee_id" text,
	"uri" text,
	"permission" text,
	CONSTRAINT aws_s3_bucket_grants_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (bucket_cq_id) REFERENCES aws_s3_buckets(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_s3_bucket_cors_rules" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"bucket_cq_id" uuid,
	"allowed_methods" text[],
	"allowed_origins" text[],
	"allowed_headers" text[],
	"expose_headers" text[],
	"id" text,
	"max_age_seconds" integer,
	CONSTRAINT aws_s3_bucket_cors_rules_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (bucket_cq_id) REFERENCES aws_s3_buckets(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_s3_bucket_encryption_rules" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"bucket_cq_id" uuid,
	"sse_algorithm" text,
	"kms_master_key_id" text,
	"bucket_key_enabled" boolean,
	CONSTRAINT aws_s3_bucket_encryption_rules_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (bucket_cq_id) REFERENCES aws_s3_buckets(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_s3_bucket_replication_rules" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"bucket_cq_id" uuid,
	"destination_bucket" text,
	"destination_access_control_translation_owner" text,
	"destination_account" text,
	"destination_encryption_configuration_replica_kms_key_id" text,
	"destination_metrics_status" text,
	"destination_metrics_event_threshold_minutes" integer,
	"destination_replication_time_status" text,
	"destination_replication_time_minutes" integer,
	"destination_storage_class" text,
	"status" text,
	"delete_marker_replication_status" text,
	"existing_object_replication_status" text,
	"filter" jsonb,
	"id" text,
	"prefix" text,
	"priority" integer,
	"source_replica_modifications_status" text,
	"source_sse_kms_encrypted_objects_status" text,
	CONSTRAINT aws_s3_bucket_replication_rules_pk PRIMARY KEY(bucket_cq_id,id),
	UNIQUE(cq_id),
	FOREIGN KEY (bucket_cq_id) REFERENCES aws_s3_buckets(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_s3_bucket_lifecycles" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"bucket_cq_id" uuid,
	"status" text,
	"abort_incomplete_multipart_upload_days_after_initiation" integer,
	"expiration_date" timestamp without time zone,
	"expiration_days" integer,
	"expiration_expired_object_delete_marker" boolean,
	"filter" jsonb,
	"id" text,
	"noncurrent_version_expiration_days" integer,
	"noncurrent_version_transitions" jsonb,
	"prefix" text,
	"transitions" jsonb,
	CONSTRAINT aws_s3_bucket_lifecycles_pk PRIMARY KEY(bucket_cq_id,id),
	UNIQUE(cq_id),
	FOREIGN KEY (bucket_cq_id) REFERENCES aws_s3_buckets(cq_id) ON DELETE CASCADE
);

-- Resource: sagemaker.endpoint_configurations
CREATE TABLE IF NOT EXISTS "aws_sagemaker_endpoint_configurations" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"kms_key_id" text,
	"data_capture_config" jsonb,
	"tags" jsonb,
	"creation_time" timestamp without time zone,
	"arn" text,
	"name" text,
	CONSTRAINT aws_sagemaker_endpoint_configurations_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_sagemaker_endpoint_configuration_production_variants" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"endpoint_configuration_cq_id" uuid,
	"initial_instance_count" integer,
	"instance_type" text,
	"model_name" text,
	"variant_name" text,
	"accelerator_type" text,
	"core_dump_config_destination_s3_uri" text,
	"core_dump_config_kms_key_id" text,
	"initial_variant_weight" float,
	CONSTRAINT aws_sagemaker_endpoint_configuration_production_variants_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (endpoint_configuration_cq_id) REFERENCES aws_sagemaker_endpoint_configurations(cq_id) ON DELETE CASCADE
);

-- Resource: sagemaker.models
CREATE TABLE IF NOT EXISTS "aws_sagemaker_models" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"enable_network_isolation" boolean,
	"execution_role_arn" text,
	"inference_execution_config" jsonb,
	"primary_container" jsonb,
	"tags" jsonb,
	"creation_time" timestamp without time zone,
	"arn" text,
	"name" text,
	CONSTRAINT aws_sagemaker_models_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_sagemaker_model_containers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"model_cq_id" uuid,
	"container_hostname" text,
	"environment" jsonb,
	"image" text,
	"image_config_repository_access_mode" text,
	"image_config_repository_auth_config_repo_creds_provider_arn" text,
	"mode" text,
	"model_data_url" text,
	"model_package_name" text,
	"multi_model_config_model_cache_setting" text,
	CONSTRAINT aws_sagemaker_model_containers_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (model_cq_id) REFERENCES aws_sagemaker_models(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_sagemaker_model_vpc_config" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"model_cq_id" uuid,
	"security_group_ids" text[],
	"subnets" text[],
	CONSTRAINT aws_sagemaker_model_vpc_config_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (model_cq_id) REFERENCES aws_sagemaker_models(cq_id) ON DELETE CASCADE
);

-- Resource: sagemaker.notebook_instances
CREATE TABLE IF NOT EXISTS "aws_sagemaker_notebook_instances" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"network_interface_id" text,
	"kms_key_id" text,
	"subnet_id" text,
	"volume_size_in_gb" integer,
	"accelerator_types" text[],
	"security_groups" jsonb,
	"direct_internet_access" boolean,
	"tags" jsonb,
	"arn" text,
	"name" text,
	"additional_code_repositories" text[],
	"creation_time" timestamp without time zone,
	"default_code_repository" text,
	"instance_type" text,
	"last_modified_time" timestamp without time zone,
	"notebook_instance_lifecycle_config_name" text,
	"notebook_instance_status" text,
	"url" text,
	CONSTRAINT aws_sagemaker_notebook_instances_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: sagemaker.training_jobs
CREATE TABLE IF NOT EXISTS "aws_sagemaker_training_jobs" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"auto_ml_job_arn" text,
	"billable_time_in_seconds" integer,
	"enable_managed_spot_training" boolean,
	"enable_network_isolation" boolean,
	"enable_inter_container_traffic_encryption" boolean,
	"failure_reason" text,
	"labeling_job_arn" text,
	"last_modified_time" timestamp without time zone,
	"profiling_status" text,
	"role_arn" text,
	"secondary_status" text,
	"training_end_time" timestamp without time zone,
	"training_start_time" timestamp without time zone,
	"training_time_in_seconds" integer,
	"tuning_job_arn" text,
	"checkpoint_config" jsonb,
	"environment" jsonb,
	"experiment_config" jsonb,
	"hyper_parameters" jsonb,
	"model_artifacts" jsonb,
	"output_data_config" jsonb,
	"profiler_config" jsonb,
	"resource_config" jsonb,
	"stopping_condition" jsonb,
	"tensor_board_output_config" jsonb,
	"vpc_config" jsonb,
	"tags" jsonb,
	"creation_time" timestamp without time zone,
	"arn" text,
	"name" text,
	"training_job_status" text,
	"secondary_status_transitions" jsonb,
	"final_metric_data_list" jsonb,
	CONSTRAINT aws_sagemaker_training_jobs_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_sagemaker_training_job_algorithm_specification" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"training_job_cq_id" uuid,
	"training_input_mode" text,
	"algorithm_name" text,
	"enable_sage_maker_metrics_time_series" boolean,
	"metric_definitions" jsonb,
	"training_image" text,
	CONSTRAINT aws_sagemaker_training_job_algorithm_specification_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (training_job_cq_id) REFERENCES aws_sagemaker_training_jobs(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_sagemaker_training_job_debug_hook_config" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"training_job_cq_id" uuid,
	"s3_output_path" text,
	"collection_configurations" jsonb,
	"hook_parameters" jsonb,
	"local_path" text,
	CONSTRAINT aws_sagemaker_training_job_debug_hook_config_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (training_job_cq_id) REFERENCES aws_sagemaker_training_jobs(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_sagemaker_training_job_debug_rule_configurations" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"training_job_cq_id" uuid,
	"rule_configuration_name" text,
	"rule_evaluator_image" text,
	"instance_type" text,
	"local_path" text,
	"rule_parameters" jsonb,
	"s3_output_path" text,
	"volume_size_in_gb" integer,
	CONSTRAINT aws_sagemaker_training_job_debug_rule_configurations_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (training_job_cq_id) REFERENCES aws_sagemaker_training_jobs(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_sagemaker_training_job_debug_rule_evaluation_statuses" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"training_job_cq_id" uuid,
	"last_modified_time" timestamp without time zone,
	"rule_configuration_name" text,
	"rule_evaluation_job_arn" text,
	"rule_evaluation_status" text,
	"status_details" text,
	CONSTRAINT aws_sagemaker_training_job_debug_rule_evaluation_statuses_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (training_job_cq_id) REFERENCES aws_sagemaker_training_jobs(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_sagemaker_training_job_input_data_config" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"training_job_cq_id" uuid,
	"channel_name" text,
	"data_source_file_directory_path" text,
	"data_source_file_system_access_mode" text,
	"data_source_file_system_id" text,
	"data_source_file_system_type" text,
	"data_source_s3_data_type" text,
	"data_source_s3_uri" text,
	"data_source_attribute_names" text[],
	"data_source_s3_data_distribution_type" text,
	"compression_type" text,
	"content_type" text,
	"input_mode" text,
	"record_wrapper_type" text,
	"shuffle_config_seed" bigint,
	CONSTRAINT aws_sagemaker_training_job_input_data_config_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (training_job_cq_id) REFERENCES aws_sagemaker_training_jobs(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_sagemaker_training_job_profiler_rule_configurations" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"training_job_cq_id" uuid,
	"rule_configuration_name" text,
	"rule_evaluator_image" text,
	"instance_type" text,
	"local_path" text,
	"rule_parameters" jsonb,
	"s3_output_path" text,
	"volume_size_in_gb" integer,
	CONSTRAINT aws_sagemaker_training_job_profiler_rule_configurations_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (training_job_cq_id) REFERENCES aws_sagemaker_training_jobs(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_sagemaker_training_job_profiler_rule_evaluation_statuses" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"training_job_cq_id" uuid,
	"last_modified_time" timestamp without time zone,
	"rule_configuration_name" text,
	"rule_evaluation_job_arn" text,
	"rule_evaluation_status" text,
	"status_details" text,
	CONSTRAINT aws_sagemaker_training_job_profiler_rule_evaluation_statuses_pk PRIMARY KEY(cq_id),
	UNIQUE(cq_id),
	FOREIGN KEY (training_job_cq_id) REFERENCES aws_sagemaker_training_jobs(cq_id) ON DELETE CASCADE
);

-- Resource: secretsmanager.secrets
CREATE TABLE IF NOT EXISTS "aws_secretsmanager_secrets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"policy" jsonb,
	"replication_status" jsonb,
	"arn" text,
	"created_date" timestamp without time zone,
	"deleted_date" timestamp without time zone,
	"description" text,
	"kms_key_id" text,
	"last_accessed_date" timestamp without time zone,
	"last_changed_date" timestamp without time zone,
	"last_rotated_date" timestamp without time zone,
	"name" text,
	"owning_service" text,
	"primary_region" text,
	"rotation_enabled" boolean,
	"rotation_lambda_arn" text,
	"rotation_rules_automatically_after_days" bigint,
	"secret_versions_to_stages" jsonb,
	"tags" jsonb,
	CONSTRAINT aws_secretsmanager_secrets_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: sns.subscriptions
CREATE TABLE IF NOT EXISTS "aws_sns_subscriptions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"endpoint" text,
	"owner" text,
	"protocol" text,
	"arn" text,
	"topic_arn" text,
	CONSTRAINT aws_sns_subscriptions_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: sns.topics
CREATE TABLE IF NOT EXISTS "aws_sns_topics" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"owner" text,
	"policy" jsonb,
	"delivery_policy" jsonb,
	"display_name" text,
	"subscriptions_confirmed" bigint,
	"subscriptions_deleted" bigint,
	"subscriptions_pending" bigint,
	"effective_delivery_policy" jsonb,
	"fifo_topic" boolean,
	"content_based_deduplication" boolean,
	"kms_master_key_id" text,
	"arn" text,
	CONSTRAINT aws_sns_topics_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: sqs.queues
CREATE TABLE IF NOT EXISTS "aws_sqs_queues" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"url" text,
	"policy" jsonb,
	"visibility_timeout" integer,
	"maximum_message_size" integer,
	"message_retention_period" integer,
	"approximate_number_of_messages" integer,
	"approximate_number_of_messages_not_visible" integer,
	"created_timestamp" integer,
	"last_modified_timestamp" integer,
	"arn" text,
	"approximate_number_of_messages_delayed" integer,
	"delay_seconds" integer,
	"receive_message_wait_time_seconds" integer,
	"redrive_policy" jsonb,
	"fifo_queue" boolean,
	"content_based_deduplication" boolean,
	"kms_master_key_id" text,
	"kms_data_key_reuse_period_seconds" integer,
	"deduplication_scope" text,
	"fifo_throughput_limit" text,
	"redrive_allow_policy" jsonb,
	"tags" jsonb,
	"unknown_fields" jsonb,
	CONSTRAINT aws_sqs_queues_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: ssm.documents
CREATE TABLE IF NOT EXISTS "aws_ssm_documents" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"approved_version" text,
	"attachments_information" jsonb,
	"author" text,
	"created_date" timestamp without time zone,
	"default_version" text,
	"description" text,
	"display_name" text,
	"document_format" text,
	"document_type" text,
	"document_version" text,
	"hash" text,
	"hash_type" text,
	"latest_version" text,
	"name" text,
	"owner" text,
	"parameters" jsonb,
	"pending_review_version" text,
	"platform_types" text[],
	"requires" jsonb,
	"review_status" text,
	"schema_version" text,
	"sha1" text,
	"status" text,
	"status_information" text,
	"target_type" text,
	"version_name" text,
	"review_information" jsonb,
	"tags" jsonb,
	"account_ids" text[],
	"account_sharing_info_list" jsonb,
	CONSTRAINT aws_ssm_documents_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);

-- Resource: ssm.instances
CREATE TABLE IF NOT EXISTS "aws_ssm_instances" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"arn" text,
	"activation_id" text,
	"agent_version" text,
	"association_overview_detailed_status" text,
	"association_instance_status_aggregated_count" jsonb,
	"association_status" text,
	"computer_name" text,
	"ip_address" inet,
	"iam_role" text,
	"instance_id" text,
	"is_latest_version" boolean,
	"last_association_execution_date" timestamp without time zone,
	"last_ping_date_time" timestamp without time zone,
	"last_successful_association_execution_date" timestamp without time zone,
	"name" text,
	"ping_status" text,
	"platform_name" text,
	"platform_type" text,
	"platform_version" text,
	"registration_date" timestamp without time zone,
	"resource_type" text,
	CONSTRAINT aws_ssm_instances_pk PRIMARY KEY(arn),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_ssm_instance_compliance_items" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"instance_cq_id" uuid,
	"compliance_type" text,
	"details" jsonb,
	"execution_summary_execution_time" timestamp without time zone,
	"execution_summary_execution_id" text,
	"execution_summary_execution_type" text,
	"id" text,
	"resource_id" text,
	"resource_type" text,
	"severity" text,
	"status" text,
	"title" text,
	CONSTRAINT aws_ssm_instance_compliance_items_pk PRIMARY KEY(instance_cq_id,resource_id,id),
	UNIQUE(cq_id),
	FOREIGN KEY (instance_cq_id) REFERENCES aws_ssm_instances(cq_id) ON DELETE CASCADE
);

-- Resource: waf.rule_groups
CREATE TABLE IF NOT EXISTS "aws_waf_rule_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"arn" text,
	"rule_ids" text[],
	"tags" jsonb,
	"id" text,
	"metric_name" text,
	"name" text,
	CONSTRAINT aws_waf_rule_groups_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);

-- Resource: waf.rules
CREATE TABLE IF NOT EXISTS "aws_waf_rules" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"arn" text,
	"tags" jsonb,
	"id" text,
	"metric_name" text,
	"name" text,
	CONSTRAINT aws_waf_rules_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_waf_rule_predicates" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"rule_cq_id" uuid,
	"data_id" text,
	"negated" boolean,
	"type" text,
	CONSTRAINT aws_waf_rule_predicates_pk PRIMARY KEY(rule_cq_id,data_id),
	UNIQUE(cq_id),
	FOREIGN KEY (rule_cq_id) REFERENCES aws_waf_rules(cq_id) ON DELETE CASCADE
);

-- Resource: waf.subscribed_rule_groups
CREATE TABLE IF NOT EXISTS "aws_waf_subscribed_rule_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"metric_name" text,
	"name" text,
	"rule_group_id" text,
	CONSTRAINT aws_waf_subscribed_rule_groups_pk PRIMARY KEY(account_id,rule_group_id),
	UNIQUE(cq_id)
);

-- Resource: waf.web_acls
CREATE TABLE IF NOT EXISTS "aws_waf_web_acls" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"tags" jsonb,
	"default_action_type" text,
	"id" text,
	"metric_name" text,
	"name" text,
	"arn" text,
	"logging_configuration" text[],
	CONSTRAINT aws_waf_web_acls_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_waf_web_acl_rules" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"web_acl_cq_id" uuid,
	"priority" integer,
	"rule_id" text,
	"action_type" text,
	"excluded_rules" text[],
	"override_action_type" text,
	"type" text,
	CONSTRAINT aws_waf_web_acl_rules_pk PRIMARY KEY(web_acl_cq_id,rule_id),
	UNIQUE(cq_id),
	FOREIGN KEY (web_acl_cq_id) REFERENCES aws_waf_web_acls(cq_id) ON DELETE CASCADE
);

-- Resource: wafv2.managed_rule_groups
CREATE TABLE IF NOT EXISTS "aws_wafv2_managed_rule_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"available_labels" text[],
	"consumed_labels" text[],
	"capacity" bigint,
	"label_namespace" text,
	"rules" jsonb,
	"description" text,
	"name" text,
	"vendor_name" text,
	CONSTRAINT aws_wafv2_managed_rule_groups_pk PRIMARY KEY(account_id,region,vendor_name,name),
	UNIQUE(cq_id)
);

-- Resource: wafv2.rule_groups
CREATE TABLE IF NOT EXISTS "aws_wafv2_rule_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"tags" jsonb,
	"policy" jsonb,
	"arn" text,
	"capacity" bigint,
	"id" text,
	"name" text,
	"visibility_config_cloud_watch_metrics_enabled" boolean,
	"visibility_config_metric_name" text,
	"visibility_config_sampled_requests_enabled" boolean,
	"custom_response_bodies" jsonb,
	"description" text,
	"label_namespace" text,
	"rules" jsonb,
	"available_labels" text[],
	"consumed_labels" text[],
	CONSTRAINT aws_wafv2_rule_groups_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);

-- Resource: wafv2.web_acls
CREATE TABLE IF NOT EXISTS "aws_wafv2_web_acls" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"account_id" text,
	"region" text,
	"resources_for_web_acl" text[],
	"tags" jsonb,
	"arn" text,
	"default_action" jsonb,
	"id" text,
	"name" text,
	"visibility_config_cloud_watch_metrics_enabled" boolean,
	"visibility_config_metric_name" text,
	"visibility_config_sampled_requests_enabled" boolean,
	"capacity" bigint,
	"custom_response_bodies" jsonb,
	"description" text,
	"label_namespace" text,
	"managed_by_firewall_manager" boolean,
	"logging_configuration" text[],
	CONSTRAINT aws_wafv2_web_acls_pk PRIMARY KEY(account_id,id),
	UNIQUE(cq_id)
);
CREATE TABLE IF NOT EXISTS "aws_wafv2_web_acl_rules" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"web_acl_cq_id" uuid,
	"name" text,
	"priority" integer,
	"statement" jsonb,
	"visibility_config_cloud_watch_metrics_enabled" boolean,
	"visibility_config_metric_name" text,
	"visibility_config_sampled_requests_enabled" boolean,
	"action" jsonb,
	"override_action" jsonb,
	"labels" text[],
	CONSTRAINT aws_wafv2_web_acl_rules_pk PRIMARY KEY(web_acl_cq_id,name),
	UNIQUE(cq_id),
	FOREIGN KEY (web_acl_cq_id) REFERENCES aws_wafv2_web_acls(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_wafv2_web_acl_post_process_firewall_manager_rule_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"web_acl_cq_id" uuid,
	"statement" jsonb,
	"name" text,
	"override_action" jsonb,
	"priority" integer,
	"visibility_config_cloud_watch_metrics_enabled" boolean,
	"visibility_config_metric_name" text,
	"visibility_config_sampled_requests_enabled" boolean,
	CONSTRAINT aws_wafv2_web_acl_post_process_firewall_manager_rule_groups_pk PRIMARY KEY(web_acl_cq_id,name),
	UNIQUE(cq_id),
	FOREIGN KEY (web_acl_cq_id) REFERENCES aws_wafv2_web_acls(cq_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS "aws_wafv2_web_acl_pre_process_firewall_manager_rule_groups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"web_acl_cq_id" uuid,
	"statement" jsonb,
	"name" text,
	"override_action" jsonb,
	"priority" integer,
	"visibility_config_cloud_watch_metrics_enabled" boolean,
	"visibility_config_metric_name" text,
	"visibility_config_sampled_requests_enabled" boolean,
	CONSTRAINT aws_wafv2_web_acl_pre_process_firewall_manager_rule_groups_pk PRIMARY KEY(web_acl_cq_id,name),
	UNIQUE(cq_id),
	FOREIGN KEY (web_acl_cq_id) REFERENCES aws_wafv2_web_acls(cq_id) ON DELETE CASCADE
);
