// Code generated by internal/generators/main.go; DO NOT EDIT.

package eks

import (
	"context"
	"encoding/json"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudcontrol"
	"github.com/cloudquery/cq-provider-aws/client"
	"github.com/cloudquery/cq-provider-sdk/provider/diag"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"
	"golang.org/x/sync/errgroup"
)

func Aws_eks_cluster() *schema.Table {
  return &schema.Table{
    Name: "cloudcontrol_aws_eks_cluster",
    Description: "aws_eks_cluster",
    Resolver: fetchaws_eks_cluster,
    Multiplex: client.ServiceAccountRegionMultiplexer(""),
    DeleteFilter: client.DeleteAccountRegionFilter,
    Columns: []schema.Column {
    	{
				Name: "account_id",
				Type: schema.TypeString,
			},
      {
				Name: "region",
				Type: schema.TypeString,
			},
      
      {
        Name: "Name",
        Description: `The unique name to give to your cluster.`,
        Type: schema.TypeString,
      },
      {
        Name: "Arn",
        Description: `The ARN of the cluster, such as arn:aws:eks:us-west-2:666666666666:cluster/prod.`,
        Type: schema.TypeString,
      },
      {
        Name: "ClusterSecurityGroupId",
        Description: `The cluster security group that was created by Amazon EKS for the cluster. Managed node groups use this security group for control plane to data plane communication.`,
        Type: schema.TypeString,
      },
      {
        Name: "OpenIdConnectIssuerUrl",
        Description: `The issuer URL for the cluster's OIDC identity provider, such as https://oidc.eks.us-west-2.amazonaws.com/id/EXAMPLED539D4633E53DE1B716D3041E. If you need to remove https:// from this output value, you can include the following code in your template.`,
        Type: schema.TypeString,
      },
      {
        Name: "EncryptionConfig",
        Description: ``,
        Type: schema.TypeJSON,
      },
      {
        Name: "KubernetesNetworkConfig",
        Description: `The Kubernetes network configuration for the cluster.`,
        Type: schema.TypeJSON,
      },
      {
        Name: "Logging",
        Description: `Enable exporting the Kubernetes control plane logs for your cluster to CloudWatch Logs based on log types. By default, cluster control plane logs aren't exported to CloudWatch Logs.`,
        Type: schema.TypeJSON,
      },
      {
        Name: "Version",
        Description: `The desired Kubernetes version for your cluster. If you don't specify a value here, the latest version available in Amazon EKS is used.`,
        Type: schema.TypeString,
      },
      {
        Name: "Tags",
        Description: `An array of key-value pairs to apply to this resource.`,
        Type: schema.TypeJSON,
      },
      {
        Name: "ResourcesVpcConfig",
        Description: `An object representing the VPC configuration to use for an Amazon EKS cluster.`,
        Type: schema.TypeJSON,
      },
      {
        Name: "RoleArn",
        Description: `The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations on your behalf.`,
        Type: schema.TypeString,
      },
      {
        Name: "Endpoint",
        Description: `The endpoint for your Kubernetes API server, such as https://5E1D0CEXAMPLEA591B746AFC5AB30262.yl4.us-west-2.eks.amazonaws.com.`,
        Type: schema.TypeString,
      },
      {
        Name: "CertificateAuthorityData",
        Description: `The certificate-authority-data for your cluster.`,
        Type: schema.TypeString,
      },
      {
        Name: "EncryptionConfigKeyArn",
        Description: `Amazon Resource Name (ARN) or alias of the customer master key (CMK).`,
        Type: schema.TypeString,
      },
    },
  }
}


func fetchaws_eks_cluster(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
  config := cloudcontrol.ListResourcesInput{
		TypeName:   aws.String("AWS::EKS::Cluster"),
		MaxResults: aws.Int32(100),
	}
	c := meta.(*client.Client)
  svc := cloudcontrol.NewFromConfig(c.AWSCfg.Copy(), func(o *cloudcontrol.Options) {
		o.Region = c.Region
	})
	for {
		listResources, err := svc.ListResources(ctx, &config)
		if err != nil {
			return diag.WrapError(err)
		}
		// batchResults := make([]map[string]interface{}, len(listResources.ResourceDescriptions))
		errGroup, ctx := errgroup.WithContext(ctx)
		for _, item := range listResources.ResourceDescriptions {
			// i := i
			it := item
			errGroup.Go(func() error {
				r, err := svc.GetResource(ctx, &cloudcontrol.GetResourceInput{
					Identifier: it.Identifier,
					TypeName:   aws.String("AWS::EKS::Cluster"),
				})
				if err != nil {
					return diag.WrapError(err)
				}
				var resourceJson map[string]interface{}
				if err := json.Unmarshal([]byte(*r.ResourceDescription.Properties), &resourceJson); err != nil {
					return diag.WrapError(err)
				}
				resourceJson["Arn"] = *it.Identifier
				resourceJson["account_id"] = c.AccountID
        resourceJson["region"] = c.Region
				res <- resourceJson
				return nil
			})
		}
		if err := errGroup.Wait(); err != nil {
			return diag.WrapError(err)
		}
		// res <- batchResults
		if aws.ToString(listResources.NextToken) == "" {
			break
		}
		config.NextToken = listResources.NextToken
	}

	return nil
}
