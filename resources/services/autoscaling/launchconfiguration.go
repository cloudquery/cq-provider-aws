// Code generated by internal/generators/main.go; DO NOT EDIT.

package autoscaling

import (
	"context"
	"encoding/json"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudcontrol"
	"github.com/cloudquery/cq-provider-aws/client"
	"github.com/cloudquery/cq-provider-sdk/provider/diag"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"
	"golang.org/x/sync/errgroup"
)

func Aws_autoscaling_launchconfiguration() *schema.Table {
  return &schema.Table{
    Name: "cloudcontrol_aws_autoscaling_launchconfiguration",
    Description: "aws_autoscaling_launchconfiguration",
    Resolver: fetchaws_autoscaling_launchconfiguration,
    Multiplex: client.ServiceAccountRegionMultiplexer(""),
    DeleteFilter: client.DeleteAccountRegionFilter,
    Columns: []schema.Column {
    	{
				Name: "account_id",
				Type: schema.TypeString,
			},
      {
				Name: "region",
				Type: schema.TypeString,
			},
      
      {
        Name: "ClassicLinkVPCId",
        Description: `The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to.`,
        Type: schema.TypeString,
      },
      {
        Name: "LaunchConfigurationName",
        Description: `The name of the launch configuration. This name must be unique per Region per account.`,
        Type: schema.TypeString,
      },
      {
        Name: "SecurityGroups",
        Description: `A list that contains the security groups to assign to the instances in the Auto Scaling group.`,
        Type: schema.TypeJSON,
      },
      {
        Name: "SpotPrice",
        Description: `The maximum hourly price you are willing to pay for any Spot Instances launched to fulfill the request.`,
        Type: schema.TypeString,
      },
      {
        Name: "ImageId",
        Description: `Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration.`,
        Type: schema.TypeString,
      },
      {
        Name: "InstanceId",
        Description: `The ID of the Amazon EC2 instance you want to use to create the launch configuration.`,
        Type: schema.TypeString,
      },
      {
        Name: "KernelId",
        Description: `Provides the ID of the kernel associated with the EC2 AMI.`,
        Type: schema.TypeString,
      },
      {
        Name: "KeyName",
        Description: `Provides the name of the EC2 key pair.`,
        Type: schema.TypeString,
      },
      {
        Name: "PlacementTenancy",
        Description: `The tenancy of the instance, either default or dedicated.`,
        Type: schema.TypeString,
      },
      {
        Name: "AssociatePublicIpAddress",
        Description: `For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances.`,
        Type: schema.TypeBool,
      },
      {
        Name: "BlockDeviceMappings",
        Description: `Specifies how block devices are exposed to the instance. You can specify virtual devices and EBS volumes.`,
        Type: schema.TypeJSON,
      },
      {
        Name: "IamInstanceProfile",
        Description: `Provides the name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.`,
        Type: schema.TypeString,
      },
      {
        Name: "RamDiskId",
        Description: `The ID of the RAM disk to select.`,
        Type: schema.TypeString,
      },
      {
        Name: "UserData",
        Description: `The Base64-encoded user data to make available to the launched EC2 instances.`,
        Type: schema.TypeString,
      },
      {
        Name: "ClassicLinkVPCSecurityGroups",
        Description: `The IDs of one or more security groups for the VPC that you specified in the ClassicLinkVPCId property.`,
        Type: schema.TypeJSON,
      },
      {
        Name: "EbsOptimized",
        Description: `Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false).`,
        Type: schema.TypeBool,
      },
      {
        Name: "InstanceMonitoring",
        Description: `Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring.`,
        Type: schema.TypeBool,
      },
      {
        Name: "InstanceType",
        Description: `Specifies the instance type of the EC2 instance.`,
        Type: schema.TypeString,
      },
      {
        Name: "MetadataOptions",
        Description: `The metadata options for the instances.`,
        Type: schema.TypeJSON,
      },
    },
  }
}


func fetchaws_autoscaling_launchconfiguration(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
  config := cloudcontrol.ListResourcesInput{
		TypeName:   aws.String("AWS::AutoScaling::LaunchConfiguration"),
		MaxResults: aws.Int32(100),
	}
	c := meta.(*client.Client)
  svc := cloudcontrol.NewFromConfig(c.AWSCfg.Copy(), func(o *cloudcontrol.Options) {
		o.Region = c.Region
	})
	for {
		listResources, err := svc.ListResources(ctx, &config)
		if err != nil {
			return diag.WrapError(err)
		}
		// batchResults := make([]map[string]interface{}, len(listResources.ResourceDescriptions))
		errGroup, ctx := errgroup.WithContext(ctx)
		for _, item := range listResources.ResourceDescriptions {
			// i := i
			it := item
			errGroup.Go(func() error {
				r, err := svc.GetResource(ctx, &cloudcontrol.GetResourceInput{
					Identifier: it.Identifier,
					TypeName:   aws.String("AWS::AutoScaling::LaunchConfiguration"),
				})
				if err != nil {
					return diag.WrapError(err)
				}
				var resourceJson map[string]interface{}
				if err := json.Unmarshal([]byte(*r.ResourceDescription.Properties), &resourceJson); err != nil {
					return diag.WrapError(err)
				}
				resourceJson["Arn"] = *it.Identifier
				resourceJson["account_id"] = c.AccountID
        resourceJson["region"] = c.Region
				res <- resourceJson
				return nil
			})
		}
		if err := errGroup.Wait(); err != nil {
			return diag.WrapError(err)
		}
		// res <- batchResults
		if aws.ToString(listResources.NextToken) == "" {
			break
		}
		config.NextToken = listResources.NextToken
	}

	return nil
}
