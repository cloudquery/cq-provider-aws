// Code generated by internal/generators/main.go; DO NOT EDIT.

package ec2

import (
	"context"
	"encoding/json"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudcontrol"
	"github.com/cloudquery/cq-provider-aws/client"
	"github.com/cloudquery/cq-provider-sdk/provider/diag"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"
	"golang.org/x/sync/errgroup"
)

func Aws_ec2_flowlog() *schema.Table {
  return &schema.Table{
    Name: "cloudcontrol_aws_ec2_flowlog",
    Description: "aws_ec2_flowlog",
    Resolver: fetchaws_ec2_flowlog,
    Multiplex: client.ServiceAccountRegionMultiplexer(""),
    DeleteFilter: client.DeleteAccountRegionFilter,
    Columns: []schema.Column {
    	{
				Name: "account_id",
				Type: schema.TypeString,
			},
      {
				Name: "region",
				Type: schema.TypeString,
			},
      
      {
        Name: "MaxAggregationInterval",
        Description: `The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. You can specify 60 seconds (1 minute) or 600 seconds (10 minutes).`,
        Type: schema.TypeFloat,
      },
      {
        Name: "Tags",
        Description: `The tags to apply to the flow logs.`,
        Type: schema.TypeJSON,
      },
      {
        Name: "DestinationOptions",
        Description: ``,
        Type: schema.TypeJSON,
      },
      {
        Name: "Id",
        Description: `The Flow Log ID`,
        Type: schema.TypeString,
      },
      {
        Name: "LogDestinationType",
        Description: `Specifies the type of destination to which the flow log data is to be published. Flow log data can be published to CloudWatch Logs or Amazon S3.`,
        Type: schema.TypeString,
      },
      {
        Name: "LogGroupName",
        Description: `The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs. If you specify LogDestinationType as s3 or kinesis-data-firehose, do not specify DeliverLogsPermissionArn or LogGroupName.`,
        Type: schema.TypeString,
      },
      {
        Name: "ResourceId",
        Description: `The ID of the subnet, network interface, or VPC for which you want to create a flow log.`,
        Type: schema.TypeString,
      },
      {
        Name: "ResourceType",
        Description: `The type of resource for which to create the flow log. For example, if you specified a VPC ID for the ResourceId property, specify VPC for this property.`,
        Type: schema.TypeString,
      },
      {
        Name: "TrafficType",
        Description: `The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.`,
        Type: schema.TypeString,
      },
      {
        Name: "DeliverLogsPermissionArn",
        Description: `The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account. If you specify LogDestinationType as s3 or kinesis-data-firehose, do not specify DeliverLogsPermissionArn or LogGroupName.`,
        Type: schema.TypeString,
      },
      {
        Name: "LogDestination",
        Description: `Specifies the destination to which the flow log data is to be published. Flow log data can be published to a CloudWatch Logs log group, an Amazon S3 bucket, or a Kinesis Firehose stream. The value specified for this parameter depends on the value specified for LogDestinationType.`,
        Type: schema.TypeString,
      },
      {
        Name: "LogFormat",
        Description: `The fields to include in the flow log record, in the order in which they should appear.`,
        Type: schema.TypeString,
      },
    },
  }
}


func fetchaws_ec2_flowlog(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
  config := cloudcontrol.ListResourcesInput{
		TypeName:   aws.String("AWS::EC2::FlowLog"),
		MaxResults: aws.Int32(100),
	}
	c := meta.(*client.Client)
  svc := cloudcontrol.NewFromConfig(c.AWSCfg.Copy(), func(o *cloudcontrol.Options) {
		o.Region = c.Region
	})
	for {
		listResources, err := svc.ListResources(ctx, &config)
		if err != nil {
			return diag.WrapError(err)
		}
		// batchResults := make([]map[string]interface{}, len(listResources.ResourceDescriptions))
		errGroup, ctx := errgroup.WithContext(ctx)
		for _, item := range listResources.ResourceDescriptions {
			// i := i
			it := item
			errGroup.Go(func() error {
				r, err := svc.GetResource(ctx, &cloudcontrol.GetResourceInput{
					Identifier: it.Identifier,
					TypeName:   aws.String("AWS::EC2::FlowLog"),
				})
				if err != nil {
					return diag.WrapError(err)
				}
				var resourceJson map[string]interface{}
				if err := json.Unmarshal([]byte(*r.ResourceDescription.Properties), &resourceJson); err != nil {
					return diag.WrapError(err)
				}
				resourceJson["Arn"] = *it.Identifier
				resourceJson["account_id"] = c.AccountID
        resourceJson["region"] = c.Region
				res <- resourceJson
				return nil
			})
		}
		if err := errGroup.Wait(); err != nil {
			return diag.WrapError(err)
		}
		// res <- batchResults
		if aws.ToString(listResources.NextToken) == "" {
			break
		}
		config.NextToken = listResources.NextToken
	}

	return nil
}
