name: cq_fetch

on:
  schedule:
    - cron: '0 1 * * *' # Run every night on 01:00am UTC
  workflow_dispatch:
  push:
    branches:
      - master
jobs:
  nightly_fetch:
    if: github.event_name != 'schedule' || (github.event_name == 'schedule' && github.repository == 'cloudquery/cq-provider-aws')
    strategy:
      matrix:
        dbversion: [ "postgres:latest" ]
        go: [ "1.17" ]
        platform: [ ubuntu-latest ] # can not run in macOS and windowsOS
    runs-on: ${{ matrix.platform }}
    services:
      postgres:
        image: ${{ matrix.dbversion }}
        env:
          POSTGRES_PASSWORD: pass
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get dependencies
        run: |
          go get -v -t -d ./...

      - name: Build
        run: go build -v .

      - name: Cache CQ
        id: cache-cq-binary
        uses: actions/cache@v2
        with:
          path: cloudquery
          key: ${{ runner.os }}-${{ hashFiles('cloudquery') }}

      - name: Download Cloudquery
        if: steps.cache-cq-binary.cache-hit != 'true'
        run: |
          curl -L https://github.com/cloudquery/cloudquery/releases/latest/download/cloudquery_${OS}_x86_64 -o cloudquery
          chmod a+x cloudquery
        env:
          OS: Linux

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Fetch
        run: |
          rm -rf .cq_reattach
          CQ_PROVIDER_DEBUG=1 go run main.go & while [ ! -f .cq_reattach ]; do sleep 1; done && ./cloudquery fetch --config ./client/testdata/nightly.hcl --enable-console-log --fail-on-error
        env:
          CQ_REATTACH_PROVIDERS: .cq_reattach
          CQ_NO_TELEMETRY: 1

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: ${{ failure() }}
        env:
          SLACK_CHANNEL: oss-tests
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: 'AWS - nightly fetch failed'
          SLACK_TITLE: AWS - nightly fetch failed
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  nightly_assume_role_fetch:
    if: github.event_name != 'schedule' || (github.event_name == 'schedule' && github.repository == 'cloudquery/cq-provider-aws')
    strategy:
      matrix:
        dbversion: [ "postgres:latest" ]
        go: [ "1.17" ]
        platform: [ ubuntu-latest ] # can not run in macOS and windowsOS
    runs-on: ${{ matrix.platform }}
    services:
      postgres:
        image: ${{ matrix.dbversion }}
        env:
          POSTGRES_PASSWORD: pass
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get dependencies
        run: |
          go get -v -t -d ./...


      - name: Build
        run: go build -v .

      - name: Cache CQ
        id: cache-cq-binary
        uses: actions/cache@v2
        with:
          path: cloudquery
          key: ${{ runner.os }}-${{ hashFiles('cloudquery') }}

      - name: Download Cloudquery
        if: steps.cache-cq-binary.cache-hit != 'true'
        run: |
          curl -L https://github.com/cloudquery/cloudquery/releases/latest/download/cloudquery_${OS}_x86_64 -o cloudquery
          chmod a+x cloudquery
        env:
          OS: Linux

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ASSUME_ROLE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ASSUME_ROLE_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Fetch
        run: |
          rm -rf .cq_reattach
          CQ_PROVIDER_DEBUG=1 go run main.go & while [ ! -f .cq_reattach ]; do sleep 1; done && ./cloudquery fetch --config ./client/testdata/assume_role.hcl --enable-console-log --fail-on-error
        env:
          CQ_REATTACH_PROVIDERS: .cq_reattach
          CQ_VAR_ASSUME_ROLE_ACCOUNT_ID: ${{ secrets.CQ_ASSUME_ROLE_ACCOUNT_ID }}
          CQ_VAR_ASSUME_ROLE_ARN: ${{ secrets.CQ_ASSUME_ROLE_ARN }}
          CQ_NO_TELEMETRY: 1

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: ${{ failure() }}
        env:
          SLACK_CHANNEL: oss-tests
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: 'AWS - nightly(AssumeRole) fetch failed'
          SLACK_TITLE: AWS - nightly(AssumeRole) fetch failed
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  nightly_complex_fetch:
    if: github.event_name != 'schedule' || (github.event_name == 'schedule' && github.repository == 'cloudquery/cq-provider-aws')
    strategy:
      matrix:
        dbversion: [ "postgres:latest" ]
        go: [ "1.17" ]
        platform: [ ubuntu-latest ] # can not run in macOS and windowsOS
    runs-on: ${{ matrix.platform }}
    services:
      postgres:
        image: ${{ matrix.dbversion }}
        env:
          POSTGRES_PASSWORD: pass
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get dependencies
        run: |
          go get -v -t -d ./...


      - name: Build
        run: go build -v .

      - name: Cache CQ
        id: cache-cq-binary
        uses: actions/cache@v2
        with:
          path: cloudquery
          key: ${{ runner.os }}-${{ hashFiles('cloudquery') }}

      - name: Download Cloudquery
        if: steps.cache-cq-binary.cache-hit != 'true'
        run: |
          curl -L https://github.com/cloudquery/cloudquery/releases/latest/download/cloudquery_${OS}_x86_64 -o cloudquery
          chmod a+x cloudquery
        env:
          OS: Linux

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ASSUME_ROLE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ASSUME_ROLE_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Fetch
        run: |
          rm -rf .cq_reattach
          echo "[only_us_east_2]\nregion=us-east-2\noutput=json\n[only_us_west_2]\nregion=us-west-2\noutput=json\n" > config
          export AWS_CONFIG_FILE=config
          echo "[only_us_east_2]\naws_access_key_id=$AWS_ACCESS_KEY_ID\naws_secret_access_key=$AWS_SECRET_ACCESS_KEY\n\n[only_us_west_2]\naws_access_key_id=$AWS_ACCESS_KEY_ID\naws_secret_access_key=$AWS_SECRET_ACCESS_KEY\n" > credentials
          export AWS_SHARED_CREDENTIALS_FILE=credentials
          CQ_PROVIDER_DEBUG=1 go run main.go & while [ ! -f .cq_reattach ]; do sleep 1; done && ./cloudquery fetch --config ./client/testdata/assume_role_complex.hcl --enable-console-log --fail-on-error
        env:
          CQ_REATTACH_PROVIDERS: .cq_reattach
          CQ_VAR_ASSUME_ROLE_ACCOUNT_ID: ${{ secrets.CQ_ASSUME_ROLE_ACCOUNT_ID }}
          CQ_VAR_ASSUME_ROLE_ARN: ${{ secrets.CQ_ASSUME_ROLE_ARN }}
          CQ_NO_TELEMETRY: 1

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: ${{ failure() }}
        env:
          SLACK_CHANNEL: oss-tests
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: 'AWS - nightly(AssumeRole) fetch failed'
          SLACK_TITLE: AWS - nightly(AssumeRole) fetch failed
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}