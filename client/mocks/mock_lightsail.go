// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cq-provider-aws/client (interfaces: LightsailClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	lightsail "github.com/aws/aws-sdk-go-v2/service/lightsail"
	gomock "github.com/golang/mock/gomock"
)

// MockLightsailClient is a mock of LightsailClient interface.
type MockLightsailClient struct {
	ctrl     *gomock.Controller
	recorder *MockLightsailClientMockRecorder
}

// MockLightsailClientMockRecorder is the mock recorder for MockLightsailClient.
type MockLightsailClientMockRecorder struct {
	mock *MockLightsailClient
}

// NewMockLightsailClient creates a new mock instance.
func NewMockLightsailClient(ctrl *gomock.Controller) *MockLightsailClient {
	mock := &MockLightsailClient{ctrl: ctrl}
	mock.recorder = &MockLightsailClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLightsailClient) EXPECT() *MockLightsailClientMockRecorder {
	return m.recorder
}

// GetInstances mocks base method.
func (m *MockLightsailClient) GetInstances(arg0 context.Context, arg1 *lightsail.GetInstancesInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstances", varargs...)
	ret0, _ := ret[0].(*lightsail.GetInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstances indicates an expected call of GetInstances.
func (mr *MockLightsailClientMockRecorder) GetInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstances", reflect.TypeOf((*MockLightsailClient)(nil).GetInstances), varargs...)
}
